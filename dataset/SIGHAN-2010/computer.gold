扩展  USB  连接  
作者  ：  Gordon  Lunn  
Future  Technology  Devices  International  Limited  
USB  （  通用  串行  总线  ）  是  现在  支持  许多  通用  现成  的  外围  设备  ，  如  键盘  ，  鼠标  ，  打印机  和  存储  设备  等  的  公认  作为  首选  的  连接  方案  。  
对于  致力  于  工业  和  消费  市场  的  设备  制造商  来说  ，  USB  也  成为  满足  其  连接  至  PC  需求  的  一个  优先  的  选择  。  
事实上  ，  对于  任何  一个  使用  标准  的  PC  作为  控制器  设备  的  应用  ，  USB  接口  的  好处  是  显而易见  的  。  
虽然  大批量  短  生命  周期  的  通用  外设  可以  不  使用  USB  接口  ，  一些  有  更  长  的  生命  周期  的  定制型  应用  则  需要  添加  USB  连接  来  解决  现代  PC  缺乏  传统  的  连接  接口  的  问题  。  
在  这些  现代  PC  所  不  支持  的  接口  中  ，  RS-232  串行  接口  是  一个  典型  的  例子  ，  从  软件  的  角度  看  ，  RS-232  相比  USB  更  容易  实现  且  同样  仍然  满足  多种  应用  需求  。  
但是  大多数  现代  PC  已经  去掉  了  RS-232  接口  。  
简单  的  串口  通信  方案  的  成本  往往  低于  复杂  的  替代  产品  ，  如  RS-232  接口  成本  低于  USB  接口  。  
RS-232  方案  的  基本  组成部分  包括  一个  UART  和  一个  驱动器  和  一个  简单  的  握手  协议  ，  即使  在  资源  非常  有限  的  微控制器  中  也  可以  很  容易  地  实现  。  
而且  RS–232  接口  的  特性  使  其  成为  一个  可以  胜任  恶劣  的  工作  环境  的  强壮型  短距离  点  对  点  通信  解决  方案  。  
这样  的  需求  在  许多  工业  控制  或  测量  的  实现  中  非常  典型  。  
基于  这些  原因  ，  RS-232  接口  依然  活跃  在  许多  应用  领域  。  
由于  现代  PC  缺乏  对  RS-232  接口  的  支持  ，  PC  作为  控制器  的  应用  对  RS-232  接口  的  支持  就  显得  令  人  失望  。  
而  实现  对  RS-232  接口  外设  支持  的  可  选择  方案  似乎  很  少  ：  找到  一个  PC  其  装有  提供  RS-232  接口  的  PCI  卡  或  重新  把  外围  设备  设计  为  支持  USB  接口  类型  。  
用  USB  替换  RS-232  接口  需要  大量  的  设计  工作  。  
这些  影响  不仅  体现  在  硬件  上  ，  而且  更  重要  的  是  给  嵌入式  软件  带来  非常  巨大  的  变化  。  
现在  还有  第三  个  选择  可以  用来  在  现代  PC  上  支持  RS-232  接口  外设  。  
此  种  方式  较之  其他  方式  需要  较  少  的  工程  方面  工作  并且  保持  传统  设备  的  完整性  和  稳定性  。  
这种  方式  的  好处  是  提供  了  一个  USB  和  RS–232  接口  之间  的  透明  转换  。  
FTDI  公司  的  系列  芯片  即可  支持  这  种  方案  ，  这些  芯片  解决  了  使用  标准  UART  端口  来  实现  嵌入式  USB  支持  的  相关  复杂性  问题  。  
该  技术  提供  了  一  种  支持  传统  RS-232  接口  外设  的  简单  及  低  成本  的  解决  方案  。  
图  1  显示  小型  PCB  如何  使用  FTDI  芯片  来  提供  此  种  解决  方案  。  
图  1  ：  传统  RS-232  调制解调器  连接  到  现代  PC  。  
现在  FTDI  家族  的  第五  代  芯片  支持  USB1.0  和  USB2.0  协议  （  低速  ，  全速  和  高速  ）  。  
这些  设备  提供  了  一  系列  的  异步  和  同步  串行  接口  解决  方案  ，  包括  UART  接口  （  RS-232  /  RS-422  /  RS-485  ）  和  FIFO  。  
除了  集成  在  PCB  级  ，  这些  芯片  可  用于  制作  PC  与  外设  之间  的  USB  到  RS-232  的  接口  转换  连接线  。  
连接线  内  的  芯片  完成  所有  PC  与  外设  之间  的  接口  转换  工作  。  
由于  USB  的  波特率  比  RS–232  的  波特率  高  很多  （  6000：1  ）  ，  因此  这些  设备  不仅  需要  提供  兼容  的  USB  接口  ，  而且  必须  能够  对  数据  进行  缓冲  ，  分析  和  重组  来  满足  RS–232  协议  的  规范  。  
这些  都  是  基于  FTDI  所  专有  的  IP  实现  ，  包括  一个  USB  协议  引擎  ，  一个  UART  控制器  ，  一个  串行  接口  引擎  及  一个  USB  收发器  。  
图  2  所  示  为  其中  一  种  芯片  FT232R  的  机构  框图  。  
图  2  ：  FT232R  架构  框图  。  
运行  在  原有  设备  端  的  软件  并  不  需要  改变  ，  但是  仅  就  所  使用  的  COM  端口  而言  ，  运行  在  PC  端  的  应用  程序  需要  知道  正在  使用  的  是  USB  连接  而  非  RS-232  连接  。  
当  一个  USB  到  RS–232  转换线  连接  到  PC  的  USB  端口  ，  PC  的  操作  系统  会  创建  一个  虚拟  的  COM  端口  。  
应用  程序  通过  这个  虚拟  的  COM  端口  与  USB  接口  进行  通信  ，  而  不  需要  对  PC  上  的  应用  程序  进行  任何  修改  。  
应用  程序  只  需要  知道  转接线  所  连接  的  具体  的  COM  端口  即可  与  之  通信  。  
外设  的  软件  或  硬件  则  不  需要  任何  修改  。  
图  3  所  列  的  软件  代码  给出  了  一个  例子  来  显示  应用  程序  如何  确定  与  之  相连  的  COM  端口  ，  同时  它  还  给出  一些  配置  UART  的  例程  代码  。  
图  3  ：  基于  VCP  驱动  的  应用  软件  参考  代码  
PC  上  很  容易  实现  USB  。  
绝大多数  针对  台式机  或  笔记本  电脑  的  操作系统  ，  包括  Linux  ，  现在  都  支持  USB  作为  其  标准  配置  。  
但是  在  嵌入式  设备  中  ，  USB  接口  使用  仍然  由  其  是否  很  容易  被  嵌入式  设备  中  的  微控制器  支持  所  决定  。  
这  就  意味着  要  在  微控制器  上  如  集成  UART  ，  SPI  和  I2C  接口  一样  集成  USB  接口  。  
这  将  使得  微控制器  变  得  更  复杂  也  因此  给  设备  集成  制造商  带来  成本  的  压力  。  
然而  ，  使用  FTDI  的  USB  接口  芯片  ，  嵌入式  设备  只  需要  使用  微控制器  上  的  UART  接口  与  USB  芯片  进行  通信  就  可以  实现  USB  接口  的  连接  。  
如前所述  ，  繁重  的  USB  协议  由  FTDI  器件  中  所  集成  的  专用  硬件  和  固件  来  负担  。  
因此  现在  通过  一个  标准  的  COM  端口  发送  一些  简单  的  指令  ，  任何  使用  微控制器  的  嵌入式  设备  可以  轻易  地  支持  USB  。  
防火墙  x86  架构  和  ASIC  架构  和  NP  架构  的  区别  
在  众多  的  安全  产品  中  ，  防火墙  产品  无疑  是  保障  网络  安全  的  第一  道  防线  ，  很多  企业  为了  保障  自身  服务器  或  数据  安全  都  采用  了  防火墙  。  
随着  Internet  的  迅速  普及  ，  全球  范围  内  的  计算机  网络  病毒  、  操作  系统  漏洞  、  垃圾  邮件  等  网络  安全  问题  也  是  层出不穷  ，  网络  安全  产品  和  解决  方案  越来越  成为  各类  网络  用户  和  厂商  们  的  聚焦点  ，  在  众多  的  安全  产品  中  ，  防火墙  产品  无疑  是  保障  网络  安全  的  第一  道  防线  ，  很多  企业  为了  保障  自身  服务器  或  数据  安全  都  采用  了  防火墙  。  
随着  网络  应用  的  增加  ，  对  网络  带宽  提出  了  更  高  的  要求  。  
这  意味着  防火墙  要  能够  以  非常  高  的  速率  处理  数据  ，  于是  千兆  防火墙  逐步  崭露头角  ，  频频  被  运用  在  金融  、  电信  、  教育  、  气象  等  大型  的  行业  和  机构  ，  以及  对  安全  要求  极  高  的  大型  企业  用户  ，  其  市场  占有  份额  已经  超过  50％  ；  
下面  就  让  我们  来  了解  一下  千兆  防火墙  的  相关  的  产品  、  技术  及  选购  方面  的  一些  知识  。  
不同  构架  各具特色  
从  百兆  到  千兆  ，  最初  只是  量变  。  
千兆  防火墙  在  2000年  前后  就  进入  了  我国  市场  。  
由于  百兆  网络  接口  与  千兆  网络  接口  的  成本  相差  不  大  ，  早期  的  千兆  防火墙  仅仅  是  将  百兆  接口  替换  为  千兆  接口  而已  。  
这种  基于  X86  体系  结构  的  千兆  防火墙  主体  仍然  是  软件  ，  其  性能  受到  很  大  制约  ，  无法  达到  千兆  的  处理  速度  。  
因此  ，  这些  防火墙  只是  具有  千兆  接入  能力  的  防火墙  ，  而  不  是  真正  具有  千兆  处理  能力  的  防火墙  因此  可以  说是  一  种  “  换汤不换药  ”  的  形式  改变  。  
随后  几  年  ，  随着  千兆  网络  在  企业  和  行业  用户  中  的  不断  普及  ，  以及  用户  对  性能  需求  的  不断  增加  ，  千兆  防火墙  也  逐渐  发生  了  质变  。  
这  种质  的  变化  首先  是  人们  把  目光  转移  到  了  专用  集成电路  （  ASIC  ）  和  网络  处理器  （  NP  ）  上  。  
相对  于  X86  架构  ，  基于  这些  架构  的  千兆  防火墙  才  是  真正  的  硬件  解决  方案  ，  能够  实现  千兆  处理  速度  。  
在  这里  ，  我们  不妨  将  X86  架构  、  NP  和  ASIC  放在  一起  进行  技术  比较  ，  看看  不同  技术  的  优缺点  。  
X86  架构  
最初  的  千兆  防火墙  是  基于  X86  架构  。  
X86  架构  采用  通用  CPU  和  PCI  总线  接口  ，  具有  很  高  的  灵活性  和  可扩展性  ，  过去  一直  是  防火墙  开发  的  主要  平台  。  
其  产品  功能  主要  由  软件  实现  ，  可以  根据  用户  的  实际  需要  而  做  相应  调整  ，  增加  或  减少  功能  模块  ，  产品  比较  灵活  ，  功能  十分  丰富  。  
但  其  性能  发展  却  受到  体系  结构  的  制约  ，  作为  通用  的  计算  平台  ，  x86  的  结构  层次  较  多  ，  不易  优化  ，  且  往往  会  受到  PCI  总线  的  带宽  限制  。  
虽然  PCI  总线  接口  理论  上  能  达到  接近  2  G  bps  的  吞吐量  ，  但是  通用  CPU  的  处理  能力  有限  ，  尽管  防火墙  软件  部分  可以  尽可能  地  优化  ，  很  难  达到  千兆  速率  。  
同时  很多  X86  架构  的  防火墙  是  基于  定制  的  通用  操作系统  ，  安全性  很  大  程度  上  取决于  通用  操作  系统  自身  的  安全性  ，  可能  会  存在  安全  漏洞  。  
ASIC  架构  
相比之下  ，  ASIC  防火墙  通过  专门  设计  的  ASIC  芯片  逻辑  进行  硬件  加速  处理  。  
ASIC  通过  把  指令  或  计算  逻辑  固化  到  芯片  中  ，  获得  了  很  高  的  处理  能力  ，  因而  明显  提升  了  防火墙  的  性能  。  
新  一代  的  可  编程  ASIC  采用  了  更  灵活  的  设计  ，  能够  通过  软件  改变  应用  逻辑  ，  具有  更  广泛  的  适应  能力  。  
但是  ，  ASIC  的  缺点  也  同样  明显  ，  它  的  灵活性  和  扩展性  不够  ，  开发  费用  高  ，  开发  周期  太  长  ，  一般  耗时  接近  2  年  。  
虽然  研发  成本  较  高  ，  灵活性  受  限制  、  无法  支持  太  多  的  功能  ，  但  其  性能  具有  先天  的  优势  ，  非常  适合  应用  于  模式  简单  、  对  吞吐量  和  时延  指标  要求  较  高  的  电信级  大  流量  的  处理  。  
目前  ，  NetScreen  在  ASIC  防火墙  领域  占有  优势  地位  ，  而  我国  的  首信  也  推出  了  我国  基于  自主  技术  的  ASIC  千兆  防火墙  产品  。  
NP  架构  
NP  可以  说是  介于  两者  之间  的  技术  ，  NP  是  专门  为  网络  设备  处理  网络  流量  而  设计  的  处理器  ，  其  体系  结构  和  指令集  对于  防火墙  常用  的  包  过滤  、  转发  等  算法  和  操作  都  进行  了  专门  的  优化  ，  可以  高效  地  完成  TCP  /  IP  栈  的  常用  操作  ，  并  对  网络  流量  进行  快速  的  并发  处理  。  
硬件  结构  设计  也  大多  采用  高速  的  接口  技术  和  总线  规范  ，  具有  较  高  的  I  /  O  能力  。  
它  可以  构建  一  种  硬件  加速  的  完全  可  编程  的  架构  ，  这种  架构  的  软硬件  都  易于  升级  ，  软件  可以  支持  新  的  标准  和  协议  ，  硬件  设计  支持  更  高  网络  速度  ，  从而  使  产品  的  生命  周期  更  长  。  
由于  防火墙  处理  的  就是  网络  数据包  ，  所以  基于  NP  架构  的  防火墙  与  X86  架构  的  防火墙  相比  ，  性能  得到  了  很  大  的  提高  。  
NP  通过  专门  的  指令集  和  配套  的  软件  开发  系统  ，  提供  强大  的  编程  能力  ，  因而  便于  开发  应用  ，  支持  可  扩展  的  服务  ，  而且  研制  周期  短  ，  成本  较  低  。  
但是  ，  相比  于  X86  架构  ，  由于  应用  开发  、  功能  扩展  受到  NP  的  配套  软件  的  限制  ，  基于  NP  技术  的  防火墙  的  灵活性  要  差  一些  。  
由于  依赖  软件  环境  ，  所以  在  性能  方面  NP  不如  ASIC  。  
NP  开发  的  难度  和  灵活性  都  介于  ASIC  和  x86  构架  之间  ，  应该  说  ，  NP  是  X86  架构  和  ASIC  之间  的  一个  折衷  。  
目前  NP  的  主要  提供商  是  Intel  和  Motorola  ，  国内  基于  NP  技术  开发  千兆  防火墙  的  厂商  最  多  ，  联想  、  紫光  比威  等  都  有  相关  产品  推出  。  
从  上面  可以  看出  ，  X86  架构  、  NP  和  ASIC  各  有  优缺点  。  
X86  架构  灵活性  最高  ，  新  功能  、  新  模块  扩展  容易  ，  但  性能  肯定  满足  不  了  千兆  需要  。  
ASIC  性能  最高  ，  千兆  、  万兆  吞吐  速率  均  可  实现  ，  但  灵活性  最低  ，  定型  后  再  扩展  十分  困难  。  
NP  则  介于  两者  之间  ，  性能  可  满足  千兆  需要  ，  同时  也  具有  一定  的  灵活性  。  
三  种  架构  综合  比较  
选购  千兆  防火墙  需要  考虑  什么  
在  选购  千兆  防火墙  时  ，  用户  首先  需要  明确  自己  的  需求  。  
安全  风险  和  网络  应用  决定  了  用户  需求  ，  每个  网络  的  层次  、  作用  、  大小  和  结构  各  不同  ，  致使  这些  网络  所  面临  的  安全  风险  不  相同  ，  安全  需求  自然  也  不  相同  。  
没有  重要  资产  的  网络  没有  必要  选择  高端  防火墙  ，  高  安全  需求  的  网络  不能  选择  低  安全性  的  防火墙  ，  这  是  很  浅显  的  道理  。  
同样  地  ，  只有  10M  带宽  接入  互联网  的  办公  机构  没有  必要  去  选择  千兆  防火墙  。  
其次  ，  在  防火墙  的  安全  功能  与  性能  之间  做出  折衷  。  
防火墙  存在  着  功能  与  性能  的  矛盾  ，  根据  预定  的  安全  策略  ，  防火墙  在  协议  栈  的  不同  层次  对  流量  进行  检查  ，  决定  对  流量  的  控制  措施  （  允许  通过  或  丢弃  ）  。  
检查  的  层次  越  高  ，  防火墙  消耗  的  资源  就  越  多  ，  花费  的  时间  就  越  长  ，  性能  就  会  越  低  。  
在  应用  环境  时  要  考虑  网络  拓扑  ，  用户  规模  ，  流量  带宽  ，  通信  类型  和  环境  的  复杂  恶劣  程度  等  。  
最后  ，  技术  支持  与  服务  ，  在  选择  安全  产品  的  时候  ，  厂家  或  商家  的  技术  支持  与  服务  能力  也  应该  是  重要  的  考虑  因素  。  
二  、  DLL  的  概念  
DLL  是  建立  在  客户  /  服务器  通信  的  概念  上  ，  包含  若干  函数  、  类  或  资源  的  库  文件  ，  函数  和  数据  被  存储  在  一个  DLL  （  服务器  ）  上  并  由  一个  或  多  个  客户  导出  而  使用  ，  这些  客户  可以  是  应用  程序  或者  是  其它  的  DLL  。  
DLL  库  不同  于  静态  库  ，  在  静态  库  情况  下  ，  函数  和  数据  被  编译  进  一个  二进制  文件  （  通常  扩展名  为  X  ）  ，  Visual  X  的  编译器  在  处理  程序  代码  时  将  从  静态  库  中  恢复  这些  函数  和  数据  并  把  他们  和  应用  程序  中  的  其他  模块  组合  在  一起  生成  可  执行  文件  。  
这个  过程  称为  "  静态  链接  "  ，  此时  因为  应用  程序  所  需  的  全部  内容  都  是  从  库  中  复制  了  出来  ，  所以  静态  库  本身  并  不  需要  与  可  执行  文件  一起  发行  。  
在  动态  库  的  情况  下  ，  有  两  个  文件  ，  一个  是  引入  库  （  .LIB  ）  文件  ，  一个  是  DLL  文件  ，  引入  库  文件  包含  被  DLL  导出  的  函数  的  名称  和  位置  ，  DLL  包含  实际  的  函数  和  数据  ，  应用  程序  使用  LIB  文件  链接  到  所  需要  使用  的  DLL  文件  ，  库  中  的  函数  和  数据  并  不  复制  到  可  执行  文件  中  ，  因此  在  应用  程序  的  可  执行  文件  中  ，  存放  的  不  是  被  调用  的  函数  代码  ，  而是  DLL  中  所  要  调用  的  函数  的  内存  地址  ，  这样  当  一个  或  多  个  应用  程序  运行  是  再  把  程序  代码  和  被  调用  的  函数  代码  链接  起来  ，  从而  节省  了  内存  资源  。  
从  上面  的  说明  可以  看出  ，  DLL  和  .LIB  文件  必须  随  应用  程序  一起  发行  ，  否则  应用  程序  将  会  产生  错误  。  
微软  的  Visual  X  支持  三  种  DLL  ，  它们  分别  是  Non-MFC  Dll  （  非  MFC  动态  库  ）  、  Regular  Dll  （  常规  DLL  ）  、  Extension  Dll  （  扩展  DLL  ）  。  
Non-MFC  DLL  指  的  是  不用  MFC  的  类库  结构  ，  直接  用  C  语言  写  的  DLL  ，  其  导出  的  函数  是  标准  的  C  接口  ，  能  被  非  MFC  或  MFC  编写  的  应用  程序  所  调用  。  
Regular  DLL  :  和  下述  的  Extension  Dlls  一样  ，  是  用  MFC  类库  编写  的  ，  它  的  一个  明显  的  特点  是  在  源文件  里  有  一个  继承  CWinApp  的  类  （  注意  ：  此类  DLL  虽然  从  CWinApp  派生  ，  但  没有  消息  循环  ）  ,  被  导出  的  函数  是  C  函数  、  X  类  或者  X  成员  函数  （  注意  不要  把  术语  X  类  与  MFC  的  微软  基础  X  类  相  混淆  ）  ，  调用  常规  DLL  的  应用  程序  不必  是  MFC  应用  程序  ，  只要  是  能  调用  类  C  函数  的  应用  程序  就  可以  ，  它们  可以  是  在  Visual  X  、  Dephi  、  Visual  Basic  、  Borland  C  等  编译  环境  下  利用  DLL  开发  应用  程序  。  
常规  DLL  又  可  细分  成  静态  链接  到  MFC  和  动态  链接  到  MFC  上  的  ，  这  两  种  常规  DLL  的  区别  将  在  下面  介绍  。  
与  常规  DLL  相比  ，  使用  扩展  DLL  用于  导出  增强  MFC  基础  类  的  函数  或  子类  ，  用  这种  类型  的  动态  链接  库  ，  可以  用来  输出  一个  从  MFC  所  继承  下来  的  类  。  
扩展  DLL  是  使用  MFC  的  动态  链接  版本  所  创建  的  ，  并且  它  只  被  用  MFC  类库  所  编写  的  应用  程序  所  调用  。  
例如  你  已经  创建  了  一个  从  MFC  的  CtoolBar  类  的  派生  类  用于  创建  一个  新  的  工具  栏  ，  为了  导出  这个  类  ，  你  必须  把  它  放到  一个  MFC  扩展  的  DLL  中  。  
扩展  DLL  和  常规  DLL  不  一样  ，  它  没有  一个  从  CWinApp  继承  而  来  的  类  的  对象  ，  所以  ，  开发  人员  必须  在  DLL  中  的  DllMain  函数  添加  初始化  代码  和  结束  代码  。  
三  、  动态  链接  库  的  创建  
在  Visual  X  开发  环境  下  ，  打开  File  \  New  \  Project  选项  ，  可以  选择  Win32  Dynamic-Link  Library  或  MFC  AppWizard  [  dll  ]  来  以  不同  的  方式  来  创建  Non-MFC  Dll  、  Regular  Dll  、  Extension  Dll  等  不同  种类  的  动态  链接  库  。  
1．  Win32  Dynamic-Link  Library  方式  创建  Non-MFC  DLL  动态  链接  库  
每  一个  DLL  必须  有  一个  入口  点  ，  这  就  象  我们  用  C  编写  的  应用  程序  一样  ，  必须  有  一个  WINMAIN  函数  一样  。  
在  Non-MFC  DLL  中  DllMain  是  一个  缺省  的  入口  函数  ，  你  不  需要  编写  自己  的  DLL  入口  函数  ，  用  这个  缺省  的  入口  函数  就  能  使  动态  链接  库  被  调用  时  得到  正确  的  初始化  。  
如果  应用  程序  的  DLL  需要  分配  额外  的  内存  或  资源  时  ，  或者  说  需要  对  每个  进程  或  线程  初始化  和  清除  操作  时  ，  需要  在  相应  的  DLL  工程  的  .CPP  文件  中  对  DllMain  (  )  函数  按照  下面  的  格式  书写  。  
参数  中  ，  hMoudle  是  动态  库  被  调用  时  所  传递  来  的  一个  指向  自己  的  句柄  (  实际上  ，  它  是  指向  _DGROUP  段  的  一个  选择符  )  ；  
ul_reason_for_call  是  一个  说明  动态  库  被  调  原因  的  标志  ，  当  进程  或  线程  装入  或  卸载  动态  链接  库  的  时候  ，  操作系统  调用  入口  函数  ，  并  说明  动态  链接  库  被  调用  的  原因  ，  它  所有  的  可能值  为  ：  DLL_PROCESS_ATTACH  :  进程  被  调用  、  DLL_THREAD_ATTACH  :  线程  被  调用  、  DLL_PROCESS_DETACH  :  进程  被  停止  、  DLL_THREAD_DETACH  :  线程  被  停止  ；  
lpReserved  为  保留  参数  。  
到  此  为止  ，  DLL  的  入口  函数  已经  写  了  ，  剩下  部分  的  实现  也  不  难  ，  你  可以  在  DLL  工程  中  加入  你  所  想  要  输出  的  函数  或  变量  了  。  
我们  已经  知道  DLL  是  包含  若干  个  函数  的  库  文件  ，  应用  程序  使用  DLL  中  的  函数  之前  ，  应该  先  导出  这些  函数  ，  以便  供给  应用  程序  使用  。  
要  导出  这些  函数  有  两  种  方法  ，  一  是  在  定义  函数  时  使用  导出  关键字  _declspec  (  dllexport  )  ，  另外  一  种  方法  是  在  创建  DLL  文件  时  使用  模块  定义  文件  .Def  。  
需要  读者  注意  的  是  在  使用  第一  种  方法  的  时候  ，  不能  使用  DEF  文件  。  
下面  通过  两  个  例子  来  说明  如何  使用  这  两  种  方法  创建  DLL  文件  。  
1  ）  使用  导出  函数  关键字  _declspec  (  dllexport  )  创建  MyDll.dll  ，  该  动态  链接  库  中  有  两  个  函数  ，  分别  用来  实现  得到  两  个  数  的  最  大  和  最  小  数  。  
在  MyDll.h  和  MyDLL.cpp  文件  中  分别  输入  如下  原代码  ：  
该  动态  链接  库  编译  成功  后  ，  打开  MyDll  工程  中  的  debug  目录  ，  可以  看到  MyDll.dll  、  MyDll.lib  两  个  文件  。  
LIB  文件  中  包含  DLL  文件名  和  DLL  文件  中  的  函数名  等  ，  该  LIB  文件  只是  对应  该  DLL  文件  的  "  映像  文件  "  ，  与  DLL  文件  中  ，  LIB  文件  的  长度  要  小  的  多  ，  在  进行  隐式  链接  DLL  时  要  用到  它  。  
读者  可能  已经  注意  到  在  MyDll.h  中  有  关键字  "  extern  C  "  ，  它  可以  使  其他  编程  语言  访问  你  编写  的  DLL  中  的  函数  。  
2  ）  用  .def  文件  创建  工程  MyDll  
为了  用  .def  文件  创建  DLL  ，  请  先  删除  上  个  例子  创建  的  工程  中  的  MyDll.h  文件  ，  保留  MyDll.cpp  并  在  该  文件  头  删除  #  include  MyDll.h  语句  ，  同时  往  该  工程  中  加入  一个  文本文件  ，  命名  为  MyDll.def  ，  再  在  该  文件  中  加入  如下  代码  ：  
其中  LIBRARY  语句  说明  该  def  文件  是  属于  相应  DLL  的  ，  EXPORTS  语句  下  列出  要  导出  的  函数  名称  。  
我们  可以  在  .def  文件  中  的  导出  函数  后  加  X  ，  如  X  ，  X  ，  表示  要  导出  的  函数  顺序  号  ，  在  进行  显式  链接  时  可以  用到  它  。  
该  DLL  编译  成功  后  ，  打开  工程  中  的  Debug  目录  ，  同样  也  会  看到  MyDll.dll  和  MyDll.lib  文件  。  
2．  MFC  AppWizard  [  dll  ]  方式  生成  常规  /  扩展  DLL  
在  MFC  AppWizard  [  dll  ]  下  生成  DLL  文件  又  有  三  种  方式  ，  在  创建  DLL  时  ，  要  根据  实际  情况  选择  创建  DLL  的  方式  。  
一  种  是  常规  DLL  静态  链接  到  MFC  ，  另  一  种  是  常规  DLL  动态  链接  到  MFC  。  
两者  的  区别  是  ：  前者  使用  的  是  MFC  的  静态  链接  库  ，  生成  的  DLL  文件  长度  大  ，  一般  不  使用  这种  方式  ，  后者  使用  MFC  的  动态  链接  库  ，  生成  的  DLL  文件  长度  小  
DLL  所有  输出  的  函数  应该  以  如下  语句  开始  ：  
AFX_MANAGE_STATE  (  AfxGetStaticModuleState  (  )  )  /  /  此  语句  用来  正确  地  切换  MFC  模块  状态  
最后  一  种  是  MFC  扩展  DLL  ，  这  种  DLL  特点  是  用来  建立  MFC  的  派生  类  ，  Dll  只  被  用  MFC  类库  所  编写  的  应用  程序  所  调用  。  
前面  我们  已经  介绍  过  ，  Extension  DLLs  和  Regular  DLLs  不  一样  ，  它  没有  一个  从  CWinApp  继承  而  来  的  类  的  对象  ，  编译器  默认  了  一个  DLL  入口  函数  DLLMain  (  )  作为  对  DLL  的  初始化  ，  你  可以  在  此  函数  中  实现  初始化  ,  代码  如下  ：  
参数  hinstDll  存放  DLL  的  句柄  ，  参数  reason  指明  调用  函数  的  原因  ，  lpReserved  是  一个  被  系统  所  保留  的  参数  。  
对于  隐式  链接  是  一个  非  零  值  ，  对于  显式  链接  值  是  零  。  
在  MFC  下  建立  DLL  文件  ，  会  自动  生成  def  文件  框架  ，  其它  与  建立  传统  的  Non-MFC  DLL  没有  什么  区别  ，  只要  在  相应  的  头文件  写入  关键字  _declspec  (  dllexport  )  函数  类型  和  函数名  等  ，  或  在  生成  的  def  文件  中  EXPORTS  下  输入  函数名  就  可以  了  。  
需要  注意  的  是  在  向  其它  开发  人员  分发  MFC  扩展  DLL  时  ，  不要  忘记  提供  描述  DLL  中  类  的  头文件  以及  相应  的  .LIB  文件  和  DLL  本身  ，  此后  开发  人员  就  能  充分  利用  你  开发  的  扩展  DLL  了  。  
四  、  动态  链接  库  DLL  的  链接  
应用  程序  使用  DLL  可以  采用  两  种  方式  ：  一  种  是  隐式  链接  ，  另  一  种  是  显式  链接  。  
在  使用  DLL  之前  首先  要  知道  DLL  中  函数  的  结构  信息  。  
Visual  X  6.0  在  VC  \  bin  目录  下  提供  了  一个  名为  Dumpbin.exe  的  小  程序  ，  用  它  可以  查看  DLL  文件  中  的  函数  结构  。  
另外  ，  Windows  系统  将  遵循  下面  的  搜索  顺序  来  定位  DLL  ：  1．  包含  EXE  文件  的  目录  ，  2．  进程  的  当前  工作  目录  ，  3．  Windows  系统  目录  ，  4．  Windows  目录  ，  5．  列  在  Path  环境  变量  中  的  一  系列  目录  。  
1．  隐式  链接  
隐式  链接  就是  在  程序  开始  执行  时  就  将  DLL  文件  加载  到  应用  程序  当中  。  
实现  隐式  链接  很  容易  ，  只要  将  导入  函数  关键字  _declspec  (  dllimport  )  函数名  等  写  到  应用  程序  相应  的  头文件  中  就  可以  了  。  
下面  的  例子  通过  隐式  链接  调用  MyDll.dll  库  中  的  Min  函数  。  
首先  生成  一个  项目  为  TestDll  ，  在  DllTest.h  、  DllTest.cpp  文件  中  分别  输入  如下  代码  ：  
在  创建  DllTest.exe  文件  之前  ，  要  先  将  MyDll.dll  和  MyDll.lib  拷贝  到  当前  工程  所在  的  目录  下面  ，  也  可以  拷贝  到  windows  的  System  目录  下  。  
如果  DLL  使用  的  是  def  文件  ，  要  删除  TestDll.h  文件  中  关键字  extern  "  C  "  。  
TestDll.h  文件  中  的  关键字  Progam  commit  是  要  Visual  X  的  编译器  在  link  时  ，  链接  到  MyDll.lib  文件  ，  当然  ，  开发  人员  也  可以  不  使用  #  pragma  comment  (  lib  ，  "  MyDll.lib  "  )  语句  ，  而  直接  在  工程  的  X  页  的  Object  /  Moduls  栏  填入  MyDll.lib  即可  。  
2．  显式  链接  
显式  链接  是  应用  程序  在  执行  过程  中  随时  可以  加载  DLL  文件  ，  也  可以  随时  卸载  DLL  文件  ，  这  是  隐式  链接  所  无法  做到  的  ，  所以  显式  链接  具有  更  好  的  灵活性  ，  对于  解释性  语言  更为  合适  。  
不过  实现  显式  链接  要  麻烦  一些  。  
在  应用  程序  中  用  LoadLibrary  或  MFC  提供  的  AfxLoadLibrary  显式  的  将  自己  所  做  的  动态  链接  库  调  进来  ，  动态  链接  库  的  文件名  即  是  上述  两  个  函数  的  参数  ，  此后  再  用  GetProcAddress  (  )  获取  想  要  引入  的  函数  。  
自此  ，  你  就  可以  象  使用  如同  在  应用  程序  自定义  的  函数  一样  来  调用  此  引入  函数  了  。  
在  应用  程序  退出  之前  ，  应该  用  FreeLibrary  或  MFC  提供  的  AfxFreeLibrary  释放  动态  链接  库  。  
下面  是  通过  显式  链接  调用  DLL  中  的  Max  函数  的  例子  。  
在  上  例  中  使用  类型  定义  关键字  typedef  ，  定义  指向  和  DLL  中  相同  的  函数  原型  指针  ，  然后  通过  LoadLibray  (  )  将  DLL  加载  到  当前  的  应用  程序  中  并  返回  当前  DLL  文件  的  句柄  ，  然后  通过  GetProcAddress  (  )  函数  获取  导入  到  应用  程序  中  的  函数  指针  ，  函数  调用  完毕  后  ，  使用  FreeLibrary  (  )  卸载  DLL  文件  。  
在  编译  程序  之前  ，  首先  要  将  DLL  文件  拷贝  到  工程  所在  的  目录  或  Windows  系统  目录  下  。  
使用  显式  链接  应用  程序  编译  时  不  需要  使用  相应  的  Lib  文件  。  
另外  ，  使用  GetProcAddress  (  )  函数  时  ，  可以  利用  MAKEINTRESOURCE  (  )  函数  直接  使用  DLL  中  函数  出现  的  顺序  号  ，  如  将  GetProcAddress  (  hDLL  ,  "  Min  "  )  改为  GetProcAddress  (  hDLL  ,  MAKEINTRESOURCE  (  2  )  )  （  函数  Min  (  )  在  DLL  中  的  顺序  号  是  2  ）  ，  这样  调用  DLL  中  的  函数  速度  很快  ，  但是  要  记住  函数  的  使用  序号  ，  否则  会  发生  错误  。  
PC  之  父  C.  Thacker  荣获  2009年  图灵奖  
根据  ACM  官方  网站  3月  9日  发布  的  消息  ，  2009年  图灵奖  授予  了  现代  PC  之  父  Charles  Thacker  ，  以  表彰  他  对  第一  台  现代  个人  计算机  Xerox  PARC  Alto  的  先驱性  设计  与  实现  ，  还有  在  局域网  （  包括  以太网  ）  、  多  处理器  工作站  、  窥探  高速  缓存  一致性  协议  和  平板  PC  等  方面  的  重大  发明  和  贡献  。  
ACM  主席  Dame  Wendy  Hall  说  ，  Charles  Thacker  是  计算机  系统  领域  最  杰出  的  工程师  之一  。  
他  的  一个  又  一个  成就  对  现代  计算机  技术  产生  了  深远  影响  。  
而  Intel  公司  的  研究  中心  副  总裁  Andrew  Chien  则  表示  ，  Charles  Thacker  的  Alto  设计  已经  具备  了  今天  个人  电脑  的  各种  关键  要素  ，  为  PC  这个  世界  最  具  创造性  而且  惠及  全球  的  产业  奠定  了  基础  。  
Thacker  的  获奖  使  计算机  体系  架构  方面  的  获奖  次数  增加  到  6  次  （  不  含  主要  贡献  是  操作系统  的  Brooks  ）  。  
从  获奖  学科  领域  来  看  ，  编程  技术  和  理论  计算机  科学  还是  大户  ，  分别  有  12  次  和  11  次  折桂  。  
参见  下面  的  分布图  。  
图灵奖  是  计算机界  最高  技术  荣誉  ，  有  计算机  诺贝尔奖  之  称  。  
以  计算机  科学  之  父  图灵  的  名字  命名  ，  由  ACM  组织  评选  ，  授予  对  计算机  领域  有  重大  和  持久性  的  技术  贡献  的  个人  。  
第一  位  获奖者  是  程序  设计  语言  和  编译器  方面  的  大师  Alan  Perlis  。  
第一  位  女性  获奖者  是  2006年  的  Frances  Allen  。  
而  2002  和  2007年  的  获奖者  都  是  三  人  研究  小组  ，  是  获奖者  最  多  的  年份  。  
目前  图灵奖  的  奖金  是  25万  美元  ，  由  Intel  和  Google  赞助  。  
Charles  P.Thacker  （  昵称  Chuck  ）  是  计算机  先驱  之一  。  
美国  工程院  院士  ，  美国  艺术  与  科学院  院士  ，  ACM  会士  。  
目前  在  微软  工作  ，  是  微软  全球  十几  位  技术  院士  之一  。  
除了  是  一  位  出色  的  计算机  系统  设计师  之外  ，  他  也  是  杰出  的  研发  管理者  。  
1943年  2月  26日  ，  他  出生  于  美国  加州  帕萨迪纳  。  
1968年  在  加州  大学  伯克利  分校  物理系  读书  时  ，  他  加入  了  Genie  项目  。  
这个  项目  不久  发展  为  伯克利  计算机  公司  （  简称  BCC  ）  ，  开发  了  BCC  500  分时  系统  。  
Thacker  领导  了  中心  存储器  和  微处理器  的  设计  。  
但  公司  商业  上  并  不  成功  。  
1970年  ，  他  和  BCC  的  许多  其他  核心  技术  人员  一起  ，  加盟  了  施乐  公司  Palo  Alto  研究  中心  。  
在  这里  ，  Thacker  先后  担任  MAXC  时  分  操作系统  的  项目  负责人  ，  Alto  个人  计算  系统  的  首席  设计师  等  职务  。  
主持  或者  参与  了  Alto  、  以太网  、  激光  打印机  等  的  设计  与  开发  。  
其中  ，  设计  于  1973年  的  Alto  是  今天  现代  个人  电脑  的  鼻祖  ，  配有  鼠标  、  图形化  用户  界面  ，  支持  局域网  联网  ，  更  令人  吃惊  的  是  ，  它  还有  丰富  的  软件  ：  邮件  客户  端  、  所见即所得  文字  编辑器  、  向量  图形  编辑器  、  位图  编辑器  、  所见即所得  的  集成电路  CAD  系统  、  Smalltalk  开发  环境  、  Lisp  开发  环境  Interlisp  ，  甚至  还有  网络  多  人  游戏  Alto  Trek  和  3D  多  人  网络  射击  游戏  MazeWar  ！  
与  它  相比  ，  数年  后  才  问世  的  苹果  电脑  完全  相形见绌  。  
MazeWar  游戏  界面  
关于  Alto  ，  还有  一个  开发  人员  可能  感  兴趣  的  轶事  ：  由于  它  的  键盘  没有  下划线  ，  所以  程序员  发明  了  CamelCase  方式  ，  用  大小写  变化  来  表示  复合词  。  
当然  ，  这  只是  说法  之一  。  
1983年  ，  Thacker  来到  DEC  公司  ，  参与  创建  了  著名  的  SRC  （  系统  研究  中心  ）  。  
在  这里  他  主持  设计  了  第一  个  多  处理器  工作站  DEC  Firefly  和  第一  个  Alpha  架构  多  处理器  ，  窥探  高速  缓存  一致性  协议  （  也  称  Firefly  协议  ）  是  附带  成果  。  
1997年  ，  他  加入  微软  ，  帮助  创建  了  微软  在  英国  剑桥  的  研究院  。  
两  年  后  ，  他  返回  美国  ，  领导  了  微软  Tablet  PC  原型  的  开发  。  
现在  ，  他  又  回到  微软  研究院  ，  从事  计算机  体系  架构  方面  的  研究  。  
2004年  被  美国  工程院  授予  Charles  Stark  Draper  奖  。  
2007年  荣获  IEEE  的  冯诺依曼奖  。  
Charles  Thacker  在  技术  方面  是  一  位  硬派  人士  ，  主要  成就  都  是  计算机  硬件  系统  架构  和  网络  方面  取得  的  。  
从  他  的  生平  中  我  发现  一点  非常  有意思  ，  那  就是  他  主持  或者  参与  设计  的  产品  基本上  没有  在  商业  上  取得  很  大  成功  的  ，  只有  他  起  的  作用  不  算  特别  突出  的  激光  打印机  算是  例外  。  
可不  是  吗  ，  最初  的  BCC  、  施乐  的  Alto  、  DEC  的  Firefly  甚至  微软  的  Tablet  PC  ，  通通  没有  成为  叫座  、  大  把  挣钱  的  产品  。  
图灵奖  看重  的  是  技术  的  创新  ，  而  非  商业  上  的  成功  ，  由此  可见一斑  。  
然而  ，  即使  以  现在  的  眼光  来  看  将近  40  年  前  设计  的  Alto  ，  也  不由得  不  心  生  敬意  。  
的确  ，  今天  我们  桌面  电脑  有的  东西  ，  几乎  都  能  在  这  台  机器  上  找到  原型  。  
Charles  Thacker  是  清醒  的  。  
在  2006年  的  一  次  访谈  中  ，  他  谈到  ，  虽然  Alto  功能  很多  很  酷  ，  但是  短板  也  不少  。  
他  提到  了  十  年  后  诞生  的  Apple  II  ，  赞赏  它  的  极  简  主义  设计  和  低廉  的  成本  。  
而  Alto  的  成本  是  大  问题  ，  1973年  它  的  价格  是  1万2千  美元  ，  相当  于  今天  的  10万  美元  。  
这  直接  阻碍  了  它  进入  大众  的  桌面  。  
而且  Alto  太  超前  于  时代  了  ，  而  IBM  PC  和  Apple  电脑  则  正好  在  微处理器  足够  强大  的  时候  开始  进入  市场  。  
他  也  提到  ，  有意思  的  是  ，  当  乔布斯  等  人  决定  Apple  II  的  处理器  选用  6502  的  时候  ，  他们  在  施乐  却  不  认为  6502  是  电脑  的  CPU  ，  只是  将  它  用作  Alto  后续  产品  的  键盘  控制器  .  .  .  .  .  .  
此外  ，  为  自己  开发  这  一  出发点  也  对  产品  大众化  产生  了  不良  影响  。  
比如  ，  虽然  电子  表格  设想  也  提  出来  了  ，  但是  因为  开发  人员  觉得  这  没什么  用  ，  因此  没有  动手  去  开发  ，  而  这  种  软件  成  了  早期  其他  PC  机  大  卖  的  主要  原因  之一  。  
当然  ，  从  更  长  的  时段  来  看  ，  商业  上  的  成功  也许  还  不如  技术  上  真正  创新  更  有  意义  。  
Charles  Thacker  在  谈到  自己  的  成就  时  说  ，  虽然  Alto  最  有名  ，  但是  今天  更  重要  的  也许  是  他  在  DEC  设计  的  Firefly  系统  ，  其中  的  许多  经验  有助于  即将  到来  的  多  核  世界  。  
谈到  成功  经验  ，  Thacker  总结  了  两  点  ：  干  中  学  ，  多  学习  别人  的  经验  。  
他  提到  现在  很多  人  因为  算法  的  基础  不好  ，  而  去  重新  自制  一  套  ，  结果  还  不如  已  有  的  优质  安全  ，  最后  对  最终  用户  造成  伤害  。  
看来  ，  历史  应该  成为  我们  宝贵  的  资源  库  。  
多  处理器  系统  下  的  伪  共享  （  false  sharing  ）  问题  
1.  背景  介绍  
首先  简单  说  一下  计算机  中  处理器  -  内存  体系  结构  。  
由于  CPU  速度  远  大于  内存  访问  速度  ，  现代  CPU  设计  中  都  引入  了  缓存  （  cache  ）  作为  CPU  和  内存  两者  之间  交流  的  缓冲  中介  。  
缓存  的  速度  也  介于  两者  之间  。  
缓存  中  存放  了  最  经常  被  访问  的  内存  数据  ，  CPU  在  很  大  程度  上  只  需要  访问  高速  缓存  ，  大大  提高  了  系统  性能  。  
系统  对  缓存  进行  读  写  的  单位  被  称作  缓存行  （  cache  line  ）  。  
大家  知道  系统  对  内存  的  操作  单位  一般  是  word  ，  如果  对  缓存  操作  也  用  word  作  单位  ，  就  显得  太  小  ，  缺乏  效率  ，  因此  一般  cache  line  大概  是  8  个  word  ，  这  是  缓存  与  内存  沟通  的  最  小  单位  。  
在  可以  预见  的  几  年  内  ，  计算机  系统  会  逐渐  向  多  核心  CPU  或者  多  CPU  结构  过渡  ，  出现  多  个  处理  核心  共享  内存  的  局面  。  
一个  很  自然  的  问题  马上  出现  ，  那  就是  多  个  处理  核心  对  单一  内存  资源  的  访问  冲突  。  
这个  冲突  本来  不难  解决  ，  只要  给  内存  访问  加  锁  就  可以  了  。  
但是  ，  当  把  缓存  纳入  考虑  范围  时  ，  情况  就  复杂  了  。  
缓存  是  集成  在  每个  CPU  内部  的  小  内存  ，  除了  这个  CPU  ，  其他  CPU  不能  访问  。  
而  按照  单  CPU  系统  的  简单  缓存  设计  ，  缓存  并  不能  察觉  除  本  CPU  以外  的  外部  因素  对  内存  内容  的  修改  。  
因此  ，  假设  出现  下面  的  情况  ：  处理器  A  将  内存  中  某  块  内容  C  读入  自己  的  缓存  ，  并  在  缓存  中  修改  了  该  内容  ，  然后  处理器  B  也  将  内存  中  这块  内容  C  读入  自己  的  缓存  ，  那么  ，  B  看到  的  只是  原始  版本  的  内容  ，  而  看  不  到  存在  于  A  缓存  中  的  更新  的  内容  ，  这  就  产生  了  内容  不  一致  的  问题  。  
多  处理器  系统  一般  是  设计  控制  协议  来  协调  各个  CPU  缓存  读  写  ，  保证  内容  一致  ，  以  解决  这种  冲突  。  
2.  伪共享  
顾名思义  ，  “  伪共享  ”  就是  “  其实  不  是  共享  ”  。  
那  什么  是  “  共享  ”  ？  
多  CPU  同时  访问  同一  块  内存  区域  就是  “  共享  ”  ，  就  会  产生  冲突  ，  需要  控制  协议  来  协调  访问  。  
会  引起  “  共享  ”  的  最  小  内存  区域  大小  就是  一个  cache  line  。  
因此  ，  当  两  个  以上  CPU  都  要  访问  同一个  cache  line  大小  的  内存  区域  时  ，  就  会  引起  冲突  ，  这种  情况  就  叫  “  共享  ”  。  
但是  ，  这种  情况  里面  又  包含  了  “  其实  不  是  共享  ”  的  “  伪共享  ”  情况  。  
比如  ，  两  个  处理器  各  要  访问  一个  word  ，  这  两  个  word  却  存在  于  同一个  cache  line  大小  的  区域  里  ，  这时  ，  从  应用  逻辑  层面  说  ，  这  两  个  处理器  并  没有  共享  内存  ，  因为  他们  访问  的  是  不同  的  内容  （  不同  的  word  ）  。  
但是  因为  cache  line  的  存在  和  限制  ，  这  两  个  CPU  要  访问  这  两  个  不同  的  word  时  ，  却  一定  要  访问  同一个  cache  line  块  ，  产生  了  事实上  的  “  共享  ”  。  
显然  ，  由于  cache  line  大小  限制  带来  的  这种  “  伪共享  ”  是  我们  不  想  要  的  ，  会  浪费  系统  资源  。  
举例来说  ，  当  多  进程  程序  操作  同一个  int  型  数组  int  X  时  ，  如果  进程  0  只  访问  X  ，  进程  1  只  访问  a  X  ，  进程  2  只  访问  X  ，  .  .  .  那么  ，  实际上  每个  进程  不  应该  发生  数据  共享  。  
但是  ，  一般  cache  line  可以  包含  几  个  int  ，  因此  访问  同一个  cache  line  内  int  数组  元素  的  几  个  进程  就  需要  系统  花费  额外  资源  和  时间  运用  控制  协议  来  协调  ，  这  是  不必要  的  。  
在  这种  情况  下  ，  把  每个  数组  元素  单独  放在  一个  cache  line  大小  的  内存  区域  里  在  时间  上  是  最  有  效率  的  ，  然而  空间  上  就  变成  最  没  效率  的  了  。  
计算机  设计  就是  处理  矛盾  的  艺术  
Core  i7  /  i5  vPro  平台  新  特性  –  Intel  @  AMT  KVM  
酝酿  已  久  的  X  AMT  KVM  特性  终于  在  最近  发布  的  最新  X  Core  i7  vPro  和  Core  i5  vPro  平台  上  发布  了  ，  新  的  vPro  平台  除了  CPU  采用  Intel  最新  的  Core  i7  和  Core  i5  ，  也  要求  采用  Intel  最新  的  支持  X  AMT  6  的  芯片组  。 
新  平台  的  信息  可以  参考  Intel  官方  网站  ：  X  ，  下面  截图  来自  此  页面  。  
KVM  是  Keyboard  、  Video  and  Mouse  的  缩写  ，  KVM  设备  目前  已经  被  广泛  应用  。  
一般  的  应用  模式  是  ：  通过  KVM  设备  ，  同一  套  键盘  、  鼠标  和  显示器  可以  同时  操作  多  台  计算机  ，  能  操作  的  计算机  台数  取决于  使用  的  KVM  设备  支持  的  端口  数  ，  一般  有  4  口  、  8  口  、  16  口  、  24  口  ；  
但  普通  的  KVM  设备  比较  遗憾  的  一点  是  无法  通过  网络  传输  ，  这  就  限制  了  键盘  、  鼠标  和  显示器  与  被  操作  的  设备  距离  不能  太  远  。  
市场  上  也  有  支持  跨  网络  的  KVM  连接  的  设备  ，  这样  的  设置  支持  KVM  Over  IP  的  特性  ，  功能  比  普通  的  KVM  设备  要  复杂  ，  可以  直接  连接  到  局域网  ，  然后  控制台  可以  通过  IP  访问  KVM  设备  ，  然后  打开  相应  的  设备  就  能  远程  操作  。  
笔者  实验室  就  有  一  台  Avocent  AutoView  3200  就  支持  KVM  Over  IP  ，  可以  通过  网络  远程  直接  控制  多达  16  台  计算机  ，  不过  同时  只能  打开  两  台  机器  的  界面  ；  
另外  有  一点  不  是  很  好  的  是  ，  如果  客户机  死机  了  ，  远程  重启  没  办法  做到  ，  还是  需要  本地  去  重置  电源  ；  
这个  设备  的  价格  也  是  比较  昂贵  的  ，  一般  都  要  好几  万  人民币  。  
最新  X  Core  i7  /  i5  vPro  平台  支持  的  最新  X  AMT  的  KVM  特性  就  能  实现  以前  类似  于  KVM  Over  IP  设备  的  功能  ，  通过  X  AMT  KVM  ，  被  管理  终端机  的  键盘  、  鼠标  和  显示  能够  通过  AMT  被  重定向  到  远程  控制台  ；  
并且  结合  X  AMT  已  有  的  远程  控制  的  能力  ，  可以  在  客户  端  失去  响应  的  情况  下  远程  重启  ，  真正  意义  上  实现  了  远程  操控  和  管理  ；  
另外  ，  结合  最近  的  X  AMT  的  Fast  Call  for  Help  特性  ，  可以  做到  跨  防火墙  远程  控制  客户机  。
X  AMT  KVM  特性  使得  X  AMT  能够  更  好  的  支持  更  多  的  使用  模式  ，  比如  ：  
¨  客户机  端  蓝屏  时  ，  需要  IT  操作员  帮忙  查看  蓝屏  信息  ；  
¨  客户机  操作系统  无法  响应  或  处于  修复  模式  时  ，  其他  的  基于  操作系统  的  远程  显示  应用  无法  工作  ；  
¨  客户机  操作  系统  还  未  正常  工作  ，  处于  远程  安装  或  修复  时  ，  随后  的  重启  动作  需要  远程  安装  人员  确认  时  ；  
¨  客户机  处于  待机  (  S3  )  状态  时  ，  IT  操作员  需要  远程  唤醒  并  操作  ；  
¨  客户机  平台  启动  时  ，  需要  在  BIOS  （  文本  显示  ）  和  操作  系统  （  图形  显示  ）  启动  过程  中  进行  交互  ，  IT  操作员  可以  远程  查看  和  控制  整个  启动  过程  。  
基于  X  AMT  KVM  特性  的  使用  模式  绝对  不仅仅  限于  上面  提到  的  几  点  ，  只要  咱们  劳动  人民  发挥  我们  的  聪明才智  ，  肯定  是  能够  更  好  的  利用  起来  ，  以  解决  不同  场景  的  问题  ，  满足  不同  用户  的  要求  。  
笔者  相信  ，  X  AMT  KVM  新  特性  是  X  AMT  技术  发展  历史  中  具有  重要  里程碑  意义  的  特性  ，  有  了  此  特性  ，  远程  操作  、  远程  诊断  和  远程  修复  及其  引申  出来  的  需求  才  真正  意义  上  得到  了  完美  解决  ，  也  一定  能  吸引  越来越  多  的  IT  管理  人员  的  目光  ，  进一步  将  X  AMT  其他  特性  应用  起来  。  
关于  X  AMT  KVM  特性  的  更  多  细节  和  开发  相关  的  问题  ，  笔者  将  在  随后  的  文章  中  进一步  介绍  ，  敬请  期待  …  …  …  
英特尔  携手  Orange  推出  配置  英特尔  Atom  处理器  并  运行  MeeGo  平台  的  移动  设备  ，  为  您  提供  全新  多媒体  体验  
英国  斯温登  和  法国  巴黎  2010年  3月  3日  －  英特尔  和  Orange  今天  宣布  达成  战略性  协议  ，  通过  一  系列  配置  英特尔  Atom  处理器  ，  并  运行  MeeGo  软件  平台  的  设备  ，  携手  推出  Orange  多媒体  服务  。  
MeeGo  ,  以  Linux  操作系统  为  基础  ，  是  Moblin  和  Maemo  的  结合体  ，  上个月  在  巴塞罗那  全球  移动  大会  上  公布  。  
它  为  一  系列  智能  ，  类似  于  PC  的  设备  和  令  人  激动  的  新  服务  的  快速  发展  提供  了  一个  开放  的  软件  环境  。  
为  各种  设备  ，  从  智能  手机  ，  到  上网本  ，  联网本  等  建立  一个  共同  的  软件  框架  ，  Intel  和  Orange  将  努力  让  消费者  更  容易  使用  这些  日益  增多  的  ，  采用  了  全新  的  ，  令  人  心潮澎湃  的  应用  程序  和  服务  的  移动  和  驱动  设备  。  
MeeGo  以  Moblin  核心  OS  为  基础  ，  Moblin  核心  OS  为  大量  的  各类  设备  和  参考  用户  体验  提供  支持  。  
而且  ，  MeeGo  还  充分  利用  了  Maemo  在  移动  行业  的  势头  ，  及  在  软件  开发  人员  中  广为  应用  的  Qt  应用  程序  和  UI  框架  。  
英特尔  和  Orange  将  致力  于  提供  更  多  的  Orange  标志性  服务  ，  如  在  MeeGo  环境  下  运行  的  Orange  TV  和  Orange  地图  。  
英特尔  和  Orange  还  会  共同  挖掘  计算  和  通信  平台  的  潜力  ，  让  用户  们  使用  各类  设备  和  屏幕  充分  享受  服务  。  
“  我们  的  客户  有  75％  尚未  接触  移动  互联网  。  现在  可  供  客户  选择  的  电话  和  操作  系统  越来越  多  了  ，  我们  的  任务  就是  确保  让  客户  更加  轻松  地  进入  这个  更为  丰富  的  移动  多媒体  领域  。  ”  来自  Orange  集团  SVP  设备  的  Yves  Maitre  称  。  
“  我们  与  英特尔  基于  MeeGo  软件  平台  的  合作  不仅  保证  了  提供  更  多  的  桌面  和  设备  选择  ，  而且  客户  可以  继续  获益  于  Orange  标志性  服务  带来  的  用户  体验  ，  包括  他们  信任  和  认同  的  定制化  桌面  ，  高  质量  的  网络  和  安全  简化  的  收费  系统  。  ”  
“  英特尔  原子  处理器  在  市场  上  获得  非常  大  的  成功  ，  ”  英特尔  软件  和  服务  集团  副  总裁  兼  系统  软件  部  总经理  Doug  Fisher  表示  ，  “  采用  MeeGo  软件  平台  ，  这些  类似  于  PC  的  设备  将  为  消费者  提供  大量  的  互联网  ，  计算  和  通信  体验  ，  丰富  的  图形  ，  多  任务  和  多媒体  能力  ，  及  最  棒  的  应用  性能  。  英特尔  和  Orange  在  数字  设备  和  消费者  体验  方面  的  想法  很  接近  ，  我们  共同  的  努力  会  将  人们  与  那些  对  他们  来说  最为  重要  的  内容  连接  起来  ，  不论  他们  身  在  何处  。  ”  
Google  云  计算  开发  平台  google  appengine  体会  谈  
体会  ：  
1.  支持  两  种  语言  ，  java  和  python  。  
2.  我  使用  的  是  java  ，  需要  注意  的  是  ，  目前  只  支持  eclipse3.3  和  3.4  ,  如果  你  是  用  的  eclipse3.5  则  没有  对应  的  google  插件  可以  用  ，  插件  安装  方法  可以  登录  X  查看  。  
3.  使用  起来  非常  简洁  ，  你  只  需要  按照  常规  的  java  程序  设计  方法  来  进行  web  程序  开发  ，  然后  利用  google  插件  来  进行  上传  即可  ，  上传  方法  参照  X  
需要  注意  的  是  ，  每个  上传者  必须  有  google  账户  ，  而且  每个  账户  只能  免费  上传  10  个  程序  ，  程序  的  规模  也  是  有  限制  的  ，  而且  每个  上传  的  程序  需要  应用  程序  ID.  
申请  这个  ID  你  首先  要  保证  你  要  有  手机  ，  这个  ID  是  通过  SMS  发送  给  你  的  ，  无论  你  是  哪个  国家  的  （  强大  啊  ）  。  
4.  上传  后  ，  可  利用  X  你  申请  的  应用  程序  名  X  来  访问  ，  体验  X  （  我  最初  做  实验  用  的  ）  。  
5.  无需  硬件  ，  无需  配置  ，  就是  这么  简单  ，  你  就  可以  利用  google  的  应用  服务器  来  开发  足够  强大  的  程序  ，  特别  是  需要  强大  计算  的  程序  。  
6.  它  的  数据  持久化  做  的  也  很  特别  ，  查询  什么  的  都  做  的  很  全面  ，  操作  起来  比  关系  数据库  要  简单  多  了  ，  基本上  属于  面向  对象  的  了  。  
使用  反  病毒  软件  保护  Windows  的  5  个  原则  
微软  视窗  系统  上  的  最佳  病毒  防护  原则  历久弥坚  ，  一如既往  。  
对  需要  与  其它  电脑  通信  的  微软  视窗  系统  来说  ，  优秀  的  反  病毒  软件  是  至关紧要  的  一个  部分  ，  特别  是  在  这个  系统  连接  到  互联网  ，  并且  需要  浏览  网页  、  收发  电子  邮箱  ，  或  传送  即时  信息  的  时候  。  
似乎  每个  人  都  有  自己  喜爱  的  反  病毒  解决  方案  ，  各  不  相同  。  
然而  ，  对于  个人  桌面  系统  ，  有  一些  经验  和  原则  似乎  在  安全  专家  中  被  相当  普遍  地  奉行  着  ：  
1  、  在  连接  到  互联网  之前  安装  反  病毒  软件  。  
一些  使用  微软  视窗  系统  的  电脑  需要  先  安装  反  病毒  软件  才  连接  到  互联网  。  
我  曾  看到  恶意  软件  迂回  侵入  电脑  所  用  的  时间  少于  从  网上  下载  反  病毒  软件  并  安装  到  电脑  上  的  时间  。  
如果  你  没有  见识  过  ，  并  以此  作为  不必  担心  病毒  的  证据  ，  那么  在  你  在  浏览器  中  打开  一个  提供  反  病毒  软件  的  网站  ，  下载  并  安装  反  病毒  软件  之前  ，  你  可以  用  电脑  的  安全  作  筹码  玩  一  回  俄罗斯  轮盘  。  
2  、  别  使用  预装  的  反  病毒  软件  。  
Norton  （  诺顿  ）  和  McAfee  （  麦克菲  ）  ，  曾  是  家用  反  病毒  软件  中  最  可信  的  品牌  ，  都  已  损害  其  原有  声誉  。  
现在  ，  大多数  家用  台式  电脑  的  安全  专家  建议  ，  那些  预装  这些  品牌  的  反  病毒  软件  的  电脑  要  尽快  换  装  其它  反  病毒  软件  。  
不管  你  对  Trend  Micro  （  趋势  科技  ）  的  企业级  防  病毒  产品  有  什么  看法  或  想法  ，  一些  新  电脑  预装  的  、  源自  Trend  Micro  （  趋势  科技  ）  的  免费  反  病毒  软件  从来  都  不如  Trend  Micro  （  趋势  科技  ）  正规  产品  好  。  
一般而言  ，  电脑  预装  的  “  免费  ”  反  病毒  软件  ，  通常  来自  那些  在  市场  营销  上  投入  资金  比  其它  公司  更  多  的  大牌  厂商  ，  所以  这  不  是  你  所  追求  的  最佳  选择  。  
3  、  使用  具有  实时  扫描  程序  的  反  病毒  软件  。  
你  需要  一个  自动  、  实时  扫描  程序  来  确保  可以  对  绝大多数  常见  的  病毒  和  蠕虫  载体  作  检测  ，  从而  防止  在  第一  次  遇到  病毒  或  蠕虫  传播  时  被  感染  。  
实时  扫描  程序  可能  会  影响  电脑  的  性能  ，  可能  你  有时  会  把  它  关掉  从而  恢复  电脑  的  性能  ，  但  对此  你  要  十分  谨慎  。  
不要  在  关掉  实时  扫描  程序  的  时候  浏览  网页  或  检查  电子  邮件  。  
4  、  定期  执行  全  系统  扫描  。  
一个  实时  扫描  程序  是  不够  的  ，  因为  实时  扫描  程序  只能  检测  病毒  库  中  具有  特征码  的  已知  病毒  ，  防范  试图  通过  实时  扫描  程序  的  有效  保护点  的  恶意  程序  。  
因此  你  还  需要  经常  做  全  系统  扫描  ，  并且  如果  条件  允许  的话  ，  可以  设定  在  夜间  自动  执行  。  
5  、  不要  使用  两  个  反  病毒  程序  。  
同时  使用  两  个  反  病毒  程序  是  自找麻烦  。  
无论是  由于  它们  的  实时  扫描  程序  争夺  访问  控制权  ，  降低  电脑  性能  ，  或者  其中  一个  反  病毒  程序  将  另外  一个  反  病毒  程序  维护  的  病毒  库  特征  文件  误认为  是  感染  病毒  的  文件  ，  层出不穷  问题  会  让  两  个  桌面  反  病毒  软件  互不  兼容  。  
我  长期  奉行  的  方法  如下  ：  
1  、  从  已  受  反  病毒  程序  保护  的  电脑  中  下载  反  病毒  程序  安装  程序  ，  刻录  光盘  。  
2  、  确保  使用  微软  视窗  系统  的  电脑  没有  连接  到  网络  。  
3  、  卸载  电脑  中  可能  预装  的的  反  病毒  软件  。  
4  、  安装  AVG  Free  （  AVG  免费  版本  ）  ，  像  我  这样  配置  ，  并  确保  实时  扫描  程序  是  开启  的  。  
运行  一  次  完整  系统  扫描  。  
5  、  安装  ClamWin  ，  并  配置  它  每天  或  每周  在  我们  不  使用  电脑  的  时候  做  一  次  完整  系统  扫描  。  
我  知道  这  违反  了  规则  5  ：  不要  使用  两  个  反  病毒  程序  。  
但是  我  发现  ，  AVG  免费  版本  和  ClamWin  二者  很  有  默契  ，  相得益彰  ，  为  现代  反  病毒  软件  中  所  罕见  。  
由于  没有  哪个  反  病毒  软件  是  完美  的  ，  事实上  有  两  个  反  病毒  应用  程序  可以  用来  提供  叠加  保护  ，  在  防止  病毒  感染  的  战斗  中  有  显著  的  优势  。  
当然  ，  它们  相得益彰  的  部分  要  归因于  ClamWin  提供  的  实时  扫描  程序  不足  ，  众所周知  ，  ClamAV  主要  用来  在  一些  Linux  和  基于  Unix  的  电子  邮件  服务器  中  作  病毒  扫描  。  
如  ClamWin  网站  所  述  ：  
请  注意  ClamWin  免费  反  病毒  软件  不  包括  自动  实时  扫描  程序  。  
你  需要  手动  扫描  文件  来  检测  病毒  或  间谍  软件  。  
我  使用  AVG  的  实时  扫描  程序  ，  ClamWin  用于  定期  扫描  。  
有时  ，  在  知道  电脑  将要  暂时  空闲  并且  ClamWin  在  此  期间  没有  运行  计划  时  ，  我  也  会  用  AVG  做  一个  全  系统  扫描  。  
当然  ，  其它  可以  在  对抗  病毒  感染  中  起  保护  作用  的  因素  有  ：  一个  好  的  防火墙  ；  
浏览  网页  ，  检查  电子  邮件  ，  或  下载  文件  时  的  好  习惯  ；  
有时  甚至  连  微软  视窗  系统  的  用户  帐户  控制  （  User  Account  Control  ）  也  有所  帮助  -  尽管  UAC  可能  弊  大于  利  。  
在  任何  情况  下  ，  不要  为  关于  微软  视窗  系统  的  安全性  正在  改进  的  种种  报道  所  惑  ，  令  自己  为  一个  虚假  的  安全感  所  迷惑  。  
微软  仍然  无视  病毒  和  蠕虫  利用  的  漏洞  ，  默认  设置  仍然  没有  尽  其  所  能  ，  微软  视窗  系统  的  基本  结构  离  百毒不侵  的  地步  还  差  得  很  远  ，  因此  用户  的  行为  仍然  是  决定  系统  可能  如何  受到  病毒  感染  的  最  重要  因素  之一  。  
反  病毒  软件  的  工作  是否  名符其实  ？  
作者  ：  Michael  Kassner  
翻译  ：  Purple  Endurer  ，  2010-01-27  第  1  版  
分类  ：  安全  
标签  ：  软件  ,  反  病毒  ,  恶意  软件  ,  反  病毒  软件  ,  Threatfire  Zero-Day  Malware  ,  保护  ,  间谍  软件  ,  广告  &  恶意  软件  ,  网络  威胁  ,  病毒  &  蠕虫  ,  安全  
经常  有人  问  我  反  病毒  程序  的  工作  是否  名符其实  ，  我  通常  给出  肯定  的  答案  。  
最近  ，  我  开始  考虑  人们  为什么  会  这么  问  ？  
我们  都  被  告知  ，  要  在  互联网  上  冲浪  ，  我们  的  电脑  需要  反  病毒  程序  来  保护  ，  如果  确实  如此  ，  那么  ：  
为什么  电脑  仍然  被  病毒  感染  了  ？  
如果  我们  不  使用  反  病毒  程序  ，  我们  会  有  多少  损失  ？  
在  考虑  这些  问题  时  ，  我  意识  到  我  可能  没有  掌握  所有  事实  。  
所以  我  开始  研究  反  病毒  方法  。  
我  的  发现  如下  。  
一  、  我们  面临  的  是  什么  ？  
请  记住  ，  坏人  是  有  动机  的  。  
利用  恶意  软件  感染  的  电脑  来  赚钱  比  其他  任何  非法  的  努力  来得  更  容易  、  更  安全  。  
尽管如此  ，  我  想  我们  （  受害者  ）  也  被  刺激  了  ，  尤其  是  他们  追求  的  是  我们  的  钱  。  
那么  ，  为什么  网络  犯罪分子  占上风  ？  
重要  的  是  ，  他们  受益  于  ：  
A.  有  漏洞  的  软件  ：  这  是  不言而喻  的  ，  软件  ，  特别  是  代码  复杂  的  ，  会  存在  可以  被  利用  的  漏洞  。  
B.  出其不意  的  攻击  ：  普通  用户  不  会  寻找  软件  漏洞  ，  而  坏人  会  这么  做  ，  从而  有  机会  在  我们  知道  之前  利用  这些  漏洞  。  
C.  捉迷藏  ：  要  确定  恶意  软件  是  什么  模样  很  困难  ，  这  令  反  病毒  软件  开发商  陷入  被动  。  
二  、  例子  
我  找  不  到  比  Google  最近  发生  的  事件  更  好  的  例子  了  。  
攻击者  利用  IE  浏览器  中  未  公开  （  零日  ）  漏洞  侵入  了  Google  原  以为  比较  安全  的  网络  。  
对照  我  上面  列出  的  漏洞  利用  三  步骤  ：  
A.  有  漏洞  的  软件  ：  IE  存在  可以  被  利用  的  漏洞  。  
B.  出其不意  的  攻击  ：  这个  只有  攻击者  知道  了  。  
C.  捉迷藏  ：  反  病毒  厂商  尝试  开发  一个  检测  方法  ，  而  微软  则  急匆匆  地  为  IE  制作  补丁  。  
由于  仍然  不  明白  为何  反  病毒  软件  未能  保护  我们  的  电脑  ，  我  向  一个  经验  丰富  的  软件  工程师  追询  此事  。  
他  指出  ，  要  消除  未  发现  的  东西  是  很  难  的  。  
这次  讨论  很  低调  。  
我  由此  认为  ：  检测  恶意  代码  并  没有  我们  想象  的  那么  容易  。  
我  的  下  一  步  是  找  出  原因  。  
三  、  恶意  软件  的  检测  方法  
恶意  软件  的  检测  方法  可以  归结  为  两  种  ：  基于  特征码  的  检测  方法  和  基于  行为  的  检测  方法  。  
反  病毒  程序  可以  使用  其一  或  二者  都  用  ，  取决于  程序  的  复杂  程度  。  
基于  特征码  的  恶意  软件  检测  方法  已经  广泛  使用  多年  ，  所以  我们  先  看  这种  方法  。  
（  一  ）  基于  特征码  的  恶意  软件  检测  方法  
基于  特征码  的  恶意  软件  检测  方法  取决于  模式  识别  （  pattern  recognition  ）  。  
工作  原理  如下  ：  反  病毒  程序  对  文件  进行  扫描  ，  并  与  特征  代码  库  中  的  抵御  信息  字节  码  相  比较  。  
如果  被  扫描  的  文件  包含  的  模式  与  库  中  相  匹配  ，  就  会  被  认为  是  恶意  软件  。  
反  病毒  程序  会  根据  程序  的  配置  隔离  或  删除  该  文件  。  
不足  
目前  ，  几乎  所有  反  病毒  程序  都  包含  基于  特征码  的  恶意  软件  检测  方法  。  
尽管如此  ，  反  病毒  公司  正  试图  摆脱  这种  方法  ，  原因  如下  ：  
基于  特征码  的  恶意  软件  检测  方法  无法  有效  防御  新  的  或  未知  的  恶意  软件  。  
新  的  恶意  软件  每天  都  在  产生  ，  从而  要求  特征  库  更新  越来越  频繁  。  
这些  都  是  令人担忧  的  ，  也  是  反  病毒  公司  投入  大量  的  时间  和  精力  转换  到  基于  行为  的  检测  方法  的  原因  。  
（  二  ）  基于  行为  的  检测  方法  （  Behavior-based  malware  detection  ）  
基于  行为  的  恶意  软件  检测  方法  是  有  道理  的  ，  因为  它  监视  的  是  程序  如何  活动  ，  而  不  是  软件  的  构建  。  
也就是说  ，  不论  软件  看起来  是否  正确  ，  如果  发现  它  有  异常  行为  ，  该  程序  就  会  被  标记  。  
基于  行为  的  恶意  软件  检测  是  分成  两  类  ：  基于  异常  的  恶意  软件  检测  方法  和  基于  规范  的  恶意  软件  检测  方法  。  
1  、  基于  异常  行为  的  恶意  软件  检测  方法  （  Anomaly-based  malware  detection  ）  
基于  异常  的  恶意  软件  检测  方法  的  关键  组成部分  是  判定  什么  可  视为  正常  的  行为  。  
如此  一来  ，  任何  不  符合  正常  描绘  的  行为  就  可  视为  可疑  的  （  异常  ）  。  
例如  ，  一个  程序  在  刚  运行  时  没有  产生  任何  文件  ，  接着  这个  程序  突然  将  一个  文件  移动  到  操作系统  文件夹  中  。  
这  一  行动  将  立即  被  此  类型  的  防  病毒  软件  所  标记  。  
基于  异常  的  恶意  软件  检测  方法  可  进一步  分为  ：  
被动  检测  （  passive  detection  ）  ：  利用  扫描  来  检测  推导  程序  是否  符合  正常  范畴  。  
主动  检测  （  active  detection  ）  ：  在  可  控  环境  中  （  如  沙箱  或  虚拟机  ）  执行  有  问题  的  程序  ，  然后  观察  该  程序  的  行为  ，  如果  程序  符合  某些  否定  准则  ，  将  被  标记  为  可疑  。  
尽管  听  起来  很  好  ，  基于  异常  行为  的  恶意  软件  检测  方法  也  有  缺点  。  
这种  类型  的  检测  发生  误报  比较  常见  ，  这  只是  因为  现代  程序  的  复杂性  。  
第二  ，  如果  攻击者  可以  确保  他  的  恶意  代码  行为  与  好  的  程序  相似  ，  也  不  会  被  发现  。  
PC  Tools  的  Threatfire  零日  恶意  软件  保护  程序  （  Zero-Day  Malware  Protection  ）  是  基于  异常  行为  检测  恶意  软件  方法  的  一个  实例  。  
2  、  基于  规则  的  恶意  软件  检测  方法  （  Specification-based  malware  detection  ）  
目前  ，  基于  规则  的  恶意  软件  检测  是  最  有  可能  减少  恶意  软件  问题  的  方法  。  
这  是  因为  ，  任何  程序  （  操作系统  和  应用  程序  都  一样  ）  的  一切  行动  都  会  有  一个  预先  确定  的  策略  介入  。  
例如  ，  电脑  用户  可以  通过  配置  策略  来  禁止  从  网站  下载  文件  。  
与  基于  异常  行为  的  恶意  软件  检测  方法  相比  ，  基于  规则  的  恶意  软件  检测  方法  的  优势  是  灵活性  和  最低  的  误报率  。  
采用  基于  规则  的  恶意  软件  检测  方法  的  一个  实例  是  诺瓦盾  反  恶意  软件  （  NovaShield  AntiMalware  ）  。  
四  、  我  的  研究  结果  
我  很  少  在  电脑  中  发现  被  隔离  的  恶意  软件  。  
我  注意  到  别的  东西  。  
大多数  由  典型  反  病毒  程序  保护  的  电脑  ，  在  被  感染  后  需要  用  专门  的  扫描  程序  （  专  杀  工具  ）  来  清除  这些  冒犯  进来  的  恶意  软件  。  
写  完  这  篇  文章  ，  我  知道  为什么  会  这样  。  
五  、  终  思  
作为  抱有  “  安全  胜  于  遗憾  ”  信念  的  那  类  人  之一  ，  我  将  继续  建议  您  使用  反  病毒  程序  。  
我  要  改变  的  是  所  推荐  的  反  病毒  程序  的  类型  。  
它们  肯定  会  包括  基于  异常  行为  和  基于  规则  的  恶意  软件  检测  方法  。  
函数式  编程  的  特性  和  适用  场合  
作者  ：  Justin  James  
翻译  ：  PurpleEndurer  ，  2010-01-05  第  1  版  
前言  
函数式  编程  （  Functional  programming  ，  FP  ）  也许  能  解决  你  遇到  的  某些  开发  问题  。  
如果  你  正  考虑  在  工作  中  使用  函数式  编程  ，  不妨  来  这儿  了解  一些  你  需要  知道  的  知识  。  
正文  
近  几  年  来  ，  函数式  编程  （  Functional  programming  ，  简称  FP  ，  下同  ）  语言  及其  思想  异军突起  。  
这  部分  要  归因于  各种各样  包含  这种  思想  的  语言  日趋  主流  （  如  Ruby  ）  ，  并且  开发  人员  们  正在  学习  如何  更  好  地  利用  它们  的  功能  特性  。  
它  还  为  .NET  平台  （  特别  是  C  #  ）  越来越  适应  许多  FP  思想  推波助澜  ，  使  混合  编程  模型  （  hybrid  model  ）  增多  。  
为了  更进一步  ，  现在  Java  平台  （  拥有  Scala  ）  和  .NET  平台  （  拥有  F  #  ）  同时  拥有  支持  面向  对象  和  FP  模式  的  全  功能性  语言  ；  
在  .NET  4  中  ，  F  #  获得  了  与  C  #  和  VB.NET  同等  的  重视  。  
现在  ，  大多数  开发  人员  有  能力  学习  掌握  FP  语言  及其  理念  ，  但  什么  时候  这样  做  才  有  意义  呢  ？  
如果  你  正在  考虑  使用  FP  ，  你  需要  牢记  这些  事情  ：  
FP  代码  没有  “  副作用  （  side  effects  ）  ”  。  
FP  中  没有  字面  值  （  literal  value  ）  ，  简单  的  功能  只  返回  相同  值  。  
许多  FP  语言  具有  “  惰性  计算  （  lazy  evaluation  ）  ”  机制  ，  即  函数  不  进行  计算  ，  直到  需要  用到  它们  的  返回值  。  
在  这种  情况  下  ，  如果  你  定义  “  x  ”  的  值  为  “  y  +  5  ”  ，  “  x  ”  的  值  仍  是  未  定义  的  ，  直到  您  尝试  使用  “  x  ”  的  值  ，  此时  执行  返回  到  它  的  定义  ，  计算  其  值  并  提供  给  调用者  。  
这  是  福音  （  更  好  的  性能  ）  ，  同时  也  是  祸端  （  在  某些  情况  值  不  确定  ）  。  
然而  FP  语言  的  这些  特性  都  不  应  被  视为  障碍  ，  因为  它们  代表  了  思想  上  的  根本  转变  。  
利用  FP  语言  ，  你  或许  能  出乎意料  地  提高  代码  的  编写  过程  和  代码  质量  。  
但是  ，  如果  使用  FP  语言  ，  你  必须  考虑  到  是否  存在  超脱  工程  （  overengineering  ）  或  超脱  思想  （  overthinking  ）  的  问题  ，  特别  是  当  代码  的  其他  维护者  可能  需要  学习  一个  新  的  语言  的  时候  。  
根据  我  的  经验  （  在  产品  代码  中  使用  FP  的  时间  有限  ）  ，  我  认为  FP  技术  和  语言  在  算法  编码  方案  （  algorithmic  coding  scenarios  ）  方面  表现  抢眼  。  
也许  我  的  成见  是  基于  FP  的  “  一切  都  基于  函数  ”  的  做法  ，  但  我  发现  FP  的确  在  那  方面  表现  得  非常  好  。  
例如  数学  就  与  FP  很  投缘  。  
几  个  月  前  ，  我  看到  一个  F  #  代码  例子  ，  作者  将  其中  的  测量  可变  单元  定义  为  提供  转换  功能  的  函数  ，  因此  可以  十分  自然  地  在  代码  中  增加  10  米  和  45  英寸  。  
另  一  种  令  人  对  FP  实力  印象  深刻  的  例子  是  Xbox  Live  排名  系统  ，  用  F  #  替代  C  #  重写  后  ，  代码  行数  只  有  原先  的  10%  ，  而  运行  速度  却  达到  了  原先  的  95％  。  
同样  ，  它  是  一个  算法  编码  的  例子  。  
FP  丧失  的  优势  在于  基本  的  “  库  粘接  代码  （  library  glue  code  ）  ”  和  创建  结构  类  的  能力  ，  而  这些  正是  现代  主流  软件  开发  经验  的  组成部分  。  
如果  您  的  代码  包含  了  很多  看上去  就  像  结构  的  类  ，  并且  绝大多数  “  算法  代码  （  algorithm  code  ）  ”  可  归并  为  各个  对象  的  属性  和  方法  ，  那么  使用  FP  就  不  值得  了  ，  除非  你  的  项目  非  要  使用  它  不可  。  
总结  
总之  ，  FP  不  一定  是  解决  你  开发  工作  中  所  面临  的  所有  挑战  问题  的  答案  ，  但是  值得  考虑  一下  ，  看看  它  能否  在  工作  中  有  用武之地  。  
选择  学习  新  程序  设计  语言  的  技巧  
如果  你  有  兴趣  学习  一  门  新  的  程序  设计  语言  ，  考虑  这儿  的  五  个  问题  会  有助于  你  选择  最  适合  你  需要  的  那个  语言  。  
我  经常  被  人  问道  ：  “  在  开发  工作  中  你  是  如何  选择  使用  哪  种  程序  设计  语言  的  呢  ？  ”  这  是  一个  合乎  情理  的  问题  ，  特别  是  对于  那些  在  开发  领域  只  有  极  少  或者  没有  经验  的  人  而言  。  
直接了当  地  说  “  使用  某某  语言  。  ”  对  我  来说  是  一个  巨大  的  诱惑  ，  但  我  还是  认为  解释  如何  思考  选择  工作  所  用  的  语言  会  更  好  一些  。  
当  你  考虑  学习  哪  种  程序  设计  语言  的  时候  ，  你  需要  问  自己  下列  5  个  问题  来  作出  满足  需要  的  正确  决定  。  
为什么  要  学习  程序  设计  语言  ？  
如果  你  的  目标  是  学  来  编程  ，  那么  寻找  那些  传授  基本  原则  的  语言  ，  如  Lisp  （  或  Scheme  ）  ，  或  Ruby  和  Smalltalk  也  行  。  
有  许多  优秀  语言  是  专门  设计  从  根本  上  传授  编程  技术  的  。  
你  要  绕  过  主流  开发  语言  ，  而  着眼  于  这些  教学  用  语言  中  的  一  种  ，  并  寻找  与  之  相关  的  练习  册  、  教材  或  其他  培训  材料  ，  这些  资料  会  有效  地  教导  你  。  
如果  你  想  成为  更  好  的  程序员  ，  这些  教学  用  语言  中  的  一  种  会  让  你  受益非浅  。  
或者  ，  你  可以  尝试  一  种  非  主流  语言  ，  尤其  是  当  它  使用  的  范式  与  你  现在  所  用  的  不同  的  时候  。  
如果  你  要  成就  一番  事业  ，  那么  你  需要  基于  市场  需求  作出  决定  。  
研究  对  你  有  吸引力  的  招聘  广告  （  工作  类型  ，  地点  ，  薪酬  ，  所  需  经验  等级  …  …  等等  ）  。  
跟踪  这  语言  （  和  其他  技能  ）  ，  这些  广告  提到  的  主要  技能  正是  你  需要  学习  的  。  
如果  你  认为  你  难于  接受  这种  语言  或  环境  ，  那么  您  可能  需要  重新  评估  你  的  事业  目标  。  
如果  你  只是  想  要  从中  得到  乐趣  或  创建  自己  使用  的  应用  程序  ，  那么  你  可以  学习  任何  你  想  学  的  语言  ！  
如何  做  程序  设计  语言  的  学习  计划  ？  
你  的  计划  和  学习  风格  会  影响  到  你  对  编程  语言  的  选择  。  
例如  ，  如果  你  在  面对面  的  课堂  环境  中  学  得  最好  ，  那么  你  需要  确保  你  想  学  的  课堂  存在  。  
对于  许多  非  主流  语言  ，  可  供  选择  的  书  也  很  少  ．  
无论如何  ，  你  要  确保  你  觉得  在  这种  语言  的  在线  社区  混  得  舒适  。  
这  就要  考虑  这些  问题  ：  他们  是  如何  对待  新来者  ？  
提  了  很多  问题  得到  解决  了  吗  ？  
是否  有  一个  良好  的  机制  把  问题  整理  归档  ？  
在  这  一点  上  ，  是否  有  好  的  文档  资料  ？  
一个  文档  资料  都  不  完整  的  编程  语言  ，  会  迫使  你  依赖  于  社区  ，  而  一个  没有  助益  的  社区  可以  令  你  迅速  沉沦  。  
这个  编程  语言  有  什么  工具  集  ，  库  和  框架  支持  ？  
有些  人  真的  很  喜欢  在  专门  的  IDE  中  工作  ，  其他  一些  人  则  完全  乐于  使用  一个  基本  文本  编辑器  。  
无论  你  的  风格  是  哪  种  ，  请  确信  这个  工具  可以  支持  。  
例如  ，  即使  你  喜欢  纯  文本  编辑器  ，  也  可能  希望  它  能  支持  你  所  选择  的  编程  语言  的  格式  和  语法  分色  。  
按照  同样  的  思路  ，  你  要  确保  语言  的  库  和  框架  支持  你  打算  做  的  应用  程序  。  
举例来说  ，  如果  你  计划  用于  科学  应用  程序  ，  你  要  检查  数学  库  ，  以  确保  您  不  需要  花  很多  时间  来  实现  基本  数学  例程  。  
你  计划  做  什么  ？  
如果  你  已经  心仪  于  一个  特定  类型  的  应用  程序  ，  这  会  影响  你  选择  什么样  的  编程  语言  来  学习  。  
一些  编程  语言  比  其他  的  更  适合  某些  应用  程序  。  
例如  ，  如果  你  在  做  一个  Web  应用  程序  的  工作  ，  你  要  确保  你  选择  的  语言  具有  在  这些  应用  中  能  用  得  上  的  能力  ，  并且  是  为  该  方案  设计  的  。  
在  服务器  上  使用  CGI  模式  ，  几乎  任何  语言  都  可  用于  开发  ，  但  你  很快  会  发现  ，  有些  语言  会  比  其它  的  语言  做  得  更  好  。  
这  部分  涉及  到  工具  集  ，  框架  和  库  （  不论  你  使用  哪  种  语言  ，  只能  手工  处理  HTTP  连接  都  是  一  件  苦差  事  ）  ，  但  编程  语言  在  这个  事情  中  又  扮演  举足轻重  的  角色  ，  很多  开发  语言  之所以  成功  ，  是  因为  它  的  一个  小  功能  或  一些  特性  使得  某种  特殊  类型  的  程序  更  易于  开发  。  
看看  与  你  要  创建  的  类似  的  应用  程序  ，  试  着  找  出  开发者  使用  了  哪些  语言  ，  以及  他们  选择  这些  语言  的  原因  。  
这  将  使  你  明了  自己  应该  学习  什么  编程  语言  。  
我  乐意  学习  次  主流  编程  语言  吗  ？  
目前  使用  次  主流  编程  语言  的  可能性  是  存在  的  。  
对于  个人  开发  ，  这  不  是  一个  问题  ，  但  许多  开发  环境  对  非  主流  语言  来说  存在  风险  ，  某些  语言  的  专业性  可能  会  限制  你  的  工作  选择  ，  或  你  的  老板  可能  不  愿意  让  你  在  工作  项目  中  用  该  语言  。  
尽管如此  ，  学习  一  种  不  是  很  流行  的  编程  语言  的  价值  还是  很  大  的  。  
首先  ，  您  可能  会  发现  自己  处在  变成  一个  高薪  专家  顾问  的  道路  上  。  
此外  ，  你  所  学  的  每  一  种  语言  会  教  给  你  一些  编程  中  的  新  事物  ，  即使  你  在  日常  工作  中  不  使用  这种  语言  。  
结论  
学习  新  的  编程  语言  是  一个  非常  有益  的  经验  ，  但  重要  的  是  不要  浪费  你  的  时间  。  
挑选  出  满足  需要  的  合适  的  编程  语言  并  不  容易  ，  而  风险  是  ，  你  所  学  的  语言  中  可能  会  有  一些  事情  让  你  反感  。  
但是  利用  这些  技巧  ，  你  应该  能  更  好  地  确定  哪些  编程  语言  将  会  满足  您  的  需求  和  目标  。  
你  会  给  新  程序员  提供  什么  标准  来  帮助  他们  挑选  语言  呢  ？  
X  的  现状  和  未来  
作者  ：  贾斯汀·詹姆斯  
翻译  ：  PurpleEndurer  ，  2009-07-10  第  1  版  
分类  ：  编程  语言  
标签  ：  开发  人员  ，  X  ，  C  /  X  ，  编程  语言  ，  软件  开发  ，  软件  /  网站  开发  ，  Justin  James  
来  看看  贾斯汀·詹姆斯  为什么  认为  具有  良好  工作  能力  的  X  开发  人员  有  很  大  的  潜力  罢  。  
TechRepublic  成员  Oleg  F  （  一  名  有  经验  的  X  开发  人员  ）  询问  我  对  X  的  现在  和  未来  的  看法  。  
此外  ，  他  需要  X  如何  适应  .NET  平台  ，  网站  开发  ，  以及  云  计算  的  信息  。  
我  的  回复  如下  ：  
我  认为  对  大多数  开发  人员  来说  ，  X  作为  通用  编程  语言  的  时代  正  快速  走向  终结  。  
X  仍然  有  许多  用武之地  ，  特别  是  操作系统  级  工作  ，  低  层  工作  （  嵌入  设备  ，  设备  驱动  程序  等等  ）  ，  某些  高  性能  应用  程序  ，  而  像  .NET  或  Java  这样  的  架空  系统  上  的  应用  程序  太  大  了  （  像  一个  办公  软件  套装  ）  。  
一些  开发  人员  仍然  继续  使用  X  开发  其它  不  太  复杂  的  语言  也  能  处理  的  应用  程序  。  
但  对  典型  程序员  而言  ，  X  是  要  为  极  小  改进  而  挠  破  头皮  的  东东  。  
多数  开发  人员  面临  的  性能  问题  不  是  转移  到  本地  代码  就  能  解决  的  那种  问题  ；  
一旦  你  偏向  性能  ，  在  大多数  情况  下  X  是  一个  相当  具  吸引力  的  应用  程序  开发  选择  。  
我  所  讨论  的  一些  开发  人员  说  在  .NET  管理  环境  中  使用  X  不  是  特别  有  吸引力  ；  
这  减少  了  许多  在  Web  开发  中  使用  它  的  机会  ，  除非  你  想  在  CGI  模式  中  使用  它  。  
关于  CGI  有  好  （  开销  小  ，  简单  概念  模型  ）  有  坏  （  你  的  应用  程序  不得不  留意  许多  更  低级  的  任务  ）  。  
就  我  所  闻  ，  在  .NET  CLR  ，  X  丧失  了  速度  优势  以及  许多  让  X  更  有用  的  东西  。  
这  并  不  是  说  X  末路  不  远  。  
我  认为  X  加入  了  COBOL  和  FORTRAN  的  行列  ，  作为  具有  大量  安装  基数  的  传统  语言  ，  需要  有人  维护  和  扩展  现存  应用  程序  50年  以上  。  
另外  ，  由于  大量  的  原因  ，  许多  新  的  开发  项目  将  用  它  来  启动  （  熟悉  ，  支持  库  ，  传统  /  习惯  ，  文化  ，  等等  ）  。  
我  也  怀疑  它  会  作为  已  “  亡  ”  语言  （  像  COBOL  ）  重  拾  荣耀  ，  因为  议论  和  宣传  比  非  使用率  少  得  多  （  也  与  COBOL  类似  ）  。  
我  不  想  使  X  的  未来  听  起来  令  人  感觉  暗淡  ；  
如果  有  什么  的话  ，  我  认为  具有  良好  工作  能力  的  X  开发  人员  有  很  大  的  潜力  。  
如果  你  是  X  开发  人员  ，  我  建议  你  坚持  用  这个  语言  。  
你  正在  做  的  事情  耀眼  ，  或  获得  了  与  Web  应用  程序  在  主流  出版物  上  的  同样  的  关注  吗  ？  
没有  。  
但  按  当前  薪水  结构  ，  我  觉得  有  经验  的  X  开发  人员  将  暂时  拿到  很  丰厚  的  工资  。  
另外  ，  因为  剩余  的  X  工作  是  高难度  的  ，  并且  学习  X  的  人  少  了  （  现在  的  大学  中  教  它  不  是  很多  ）  ，  我  希望  X  开发  人员  能  有  更  多  的  就业  保障  ，  和  比  .NET  或  Java  开发  人员  更  好  的  长期  补助  。  
尽管  在  Web  开发  中  X  任何  时候  都  不大  可能  成为  主流  ，  并且  用  X  开发  桌面  应用  程序  也  少于  平时  ，  但  我  认为  X  在  云  计算  的  某些  方面  有  许多  上乘  机会  。  
对  一些  项目  （  想想  那些  很  适合  超级  计算机  的  人  ）  ，  “  云  ”  给  X  开发  人员  提供  了  一  条  路  ，  来  得到  与  网格  计算  相同  的  益处  ，  但  有  更  多  的  灵活性  。  
这些  项目  和  适合  使用  X  的  开发  人员  的  项目  类型  中  有  许多  相互  重叠  的  。  
因此  ，  我  认为  云  计算  将  会  在  许多  项目  中  取代  或  补充  网格  和  超级  计算机  ，  并  提供  了  一个  以  崭新  和  创新  的  方法  使用  X  的  极  好  机会  。  
请  记住  ，  这些  分析  大部分  的  重点  是  Windows  领域  。  
就  从  我  看到  的  来说  ，  *nix  开发  社区  仍然  是  非常  倾向  C  /  X  。  
关心  Windows  中  机会  减少  的  X  开发  人员  一定  要  来  看看  *nix  中  的  发展  。  
我  相信  X  将  慢慢  隐退  到  后台  ，  但  它  不  会  消亡  也  不  会  永远  变  得  无足轻重  。  
尽管  我  所  知  的  绝大部分  开发人  从未  在  真实  世界  中  接触  过  X  ，  但  许多  开发  人员  将  会  从  学习  它  中  受益  ，  即使  仅仅  为了  增进  对  包括  Java  ，  .NET  和  Ruby  在内  的  各种  语言  的  一些  认知  。  
将  XForms  与  Google  Web  Toolkit  相  结合  ，  第  1  部分  :  介绍  GWT  的  JavaScript  Native  Interface  
本  系列  文章  介绍  如何  结合  使用  Google  Web  Toolkit  (  GWT  )  和  XForms  创建  动态  Web  应用  程序  ，  分为  四  部分  。  
第  1  部分  采用  自  下  到  上  的  办法  说明  结合  使用  GWT  和  XFoms  中  存在  的  问题  。  
介绍  了  这  两  种  技术  的  基础  知识  ，  考察  了  能够  让  两者  和平共处  的  相同  之  处  。  
这  是  同时  使用  GWT  和  XForms  开发  Web  应用  程序  的  基础  。  
简介  
Google  Web  Tookit  (  GWT  )  已经  成为  一  种  非常  受  欢迎  的  开发  Ajax  应用  程序  的  方法  。  
它  可以  让  Java  开发  人员  利用  已  有  的  Java  知识  迅速  创建  Ajax  应用  程序  ，  而  不  需要  去  学习  JavaScript  。  
XForms  代表  了  HTML  标准  的  新  发展  ，  通过  简单  的  指令  就  能  创建  复杂  的  、  动态  的  行为  。  
GWT  和  XForms  都  非常  强大  ，  足以  单独  解决  很多  问题  。  
那么  为什么  还要  将  两者  结合  起来  呢  ？  
这  恰恰  也  是  本  系列  文章  所  要  说明  的  。  
本  系列  文章  中  ，  我们  将  建立  一个  简单  的  Web  应用  程序  管理  摇滚  明星  和  他们  的  相册  。  
我们  将  同时  使用  GWT  和  XForms  ，  最后  您  就  能够  把  这  两  种  技术  完全  融合  在  一起  了  。  
第  1  部分  中  将  通过  一些  简单  的  例子  来  介绍  这些  技术  。  
对于  GWT  我们  使用  它  自带  的  KitchenSink  这个  例子  。  
这个  例子  曾经  被  用于  展示  GWT  的  多种  UI  小  部件  。  
前提  条件  
本文  使用  GWT  1.4  和  Mozilla  XForms  插件  0.8  （  相关  链接  请  参阅  参考  资料  部分  ）  。  
这个  Mozilla  XForms  可  用于  任何  基于  Mozilla  的  Web  浏览器  ，  如  Firefox  和  Seamonkey  。  
使用  GWT  需要  了解  Java  技术  和  一些  Web  技术  如  HTML  、  CSS  。  
文中  还  用到  了  大量  JavaScript  代码  。  
XForms  采用  模型  -  视图  -  控制器  范型  ，  因此  熟悉  MVC  就  足够  了  。  
原来  接触  过  XForms  和  GWT  当然  很  好  ，  但  不  是  必需  的  。  
XForms  
现在  创建  Web  应用  程序  ，  目标  很  可能  是  创建  支持  Ajax  的  Web  应用  程序  。  
您  可能  遇到  过  各种各样  的  Ajax  ，  比如  能够  异步  添加  和  修改  数据  的  Ajax  。  
如果  说  在  Ajax  这个  词  还  没有  发明  之前  已经  有  很多  人  想到  过  这些  形式  ，  您  可能  会  奇怪  。  
用  Ajax  完成  的  很多  常见  的  功能  也  能  用  XForms  实现  。  
XForms  这种  标准化  的  技术  将  成为  下一代  HTML  规范  的  核心  。  
XForms  的  关键  在于  将  数据  和  数据  的  物理  视图  分离  开  来  。  
听  起来  是否  有些  耳熟  ？  
通过  分离  数据  ，  就  可  通过  任何  形式  的  HTML  呈现  出来  。  
还  可以  与  form  元素  相  结合  ，  从而  实现  输入  数据  和  编辑  已  有  数据  的  无缝  衔接  。  
人们  使用  Ajax  来  解决  很多  相同  的  问题  。  
在  Ajax  中  需要  保持  数据  和  表示  （  HTML  ）  的  分离  。  
通常  会  创建  JavaScript  对象  来  表示  这些  数据  。  
XForms  提供  了  一  种  更加  标准化  的  方法  。  
它  用  XML  保存  实例  数据  。  
我们  来  看  一个  例子  。  
XML  实例  数据  
XForms  采用  熟悉  的  模型  -  视图  -  控制器  范型  。  
因此  XForm  背后  的  数据  包含  在  XForm  模型  中  。  
清单  1  给出  了  一个  例子  。  
清单  1  .  XForms  模型  
这里  有  几  点  需要  注意  。  
首先  是  XForms  模型  中  包含  的  XForms  实例  。  
实例  是  模型  所  代表  的  真正  的  数据  。  
可以  指定  实例  的  来源  。  
与  JavaScript  和  CSS  引用  其他  资源  很  相似  。  
如果  指定  source  属性  ，  浏览器  就  会  发出  单独  的  HTTP  请求  来  加载  这些  数据  。  
当然  也  可  直接  包含  实例  数据  。  
其次  ，  模型  和  实例  都  有  ID  。  
后面  将  看到  ，  这  恰恰  是  它们  能够  用于  其他  技术  的  关键  。  
第三  ，  要  注意  不同  的  XForm-submission  声明  。  
这里  列举  的  大  动作  和  基本  HTML  表单  中  的  相似  。  
都  是  表单  数据  需要  提交  到  的  URL  。  
要  注意  method  属性  。  
它  也  类似  于  HTML  表单  中  的  method  属性  。  
它  说明  提交  使用  什么样  的  HTTP  请求  。  
这  就是  整个  模型  。  
下面  再  看看  XForms  中  的  视图  。  
XForms  视图  
模型  声明  以后  ，  用  模型  中  包含  的  数据  创建  视图  很  简单  。  
XForms  包含  很多  常见  的  控件  处理  模型  实例  数据  。  
每个  控件  都  能  引用  模型  的  实例  数据  。  
实例  数据  用  XML  格式  表示  ，  因此  用  XPath  很  容易  导航  和  引用  。  
XForms  完全  支持  XPath  2.0  规范  。  
我们  来  看  几  个  例子  。  
处理  模型  数据  最  简单  的  办法  就是  在  浏览器  上  显示  出来  。  
可以  使用  output  控件  ，  如  清单  2  所  示  。  
ref  属性  就是  一个  XPath  表达式  。  
它  对  模型  中  的  实例  数据  求  值  。  
这里  不但  有  XForms  控件  ，  而且  在  output  控件  中  使用  了  XHTML  表达式  ，  如  div  、  CSS  class  属性  。  
这  不  是  什么  技巧  ，  只不过  在  巧妙  地  提醒  您  未来  XForms  将  成为  HTML  完整  的  一部分  。  
设计  XForms  是  为了  交换  ，  而  不仅仅  是  显示  数据  。  
因此  必然  有  编辑  数据  的  控件  。  
看看  清单  3  。  
清单  3  .  XForms  中  的  表单  控件  
清单  3  中  的  例子  创建  了  一个  带  标签  的  input  字段  和  Submit  按钮  。  
两者  都  和  模型  绑定  在  一起  。  
输入  字段  绑定  到  实例  数据  。  
从  HTML  元素  的  角度  来  看  ，  该  输入  字段  预先  填充  了  数据  模型  中  绑定  的  值  。  
提交  控件  也  就  成  了  HTML  Submit  按钮  。  
但  它  也  是  绑定  到  模型  的  。  
它  引用  了  模型  中  的  submission  元素  。  
该  元素  指定  了  一个  表单  动作  。  
因而  ，  提交  控件  将  创建  一个  HTML  Submit  按钮  ，  单击  该  按钮  就  会  按照  模型  的  提交  规范  向  URL  发出  HTTP  post  请求  。  
什么  发送  给  该  URL  呢  ？  
当然  是  XML  数据  。  
数据  绑定  到  输入  控件  ，  用户  输入  的  新  数据  在  HTTP  POST  到  服务器  之前  将  自动  传递  给  模型  。  
目前  一般而言  ，  HTML  表单  的  提交  就是  导航  到  那个  POST  的  动作  URL  。  
这  是  典型  的  “  Web  1.0  ”  方式  ，  幸运  的  是  对于  XForms  来说  并非如此  。  
在  XForms  应用  程序  中  ，  提交  仅仅  是  传递  到  服务器  的  数据  。  
和  导航  没有  关系  。  
这  是  清晰  划分  模型  （  数据  以及  对  数据  的  操作  ，  如  提交  给  服务器  ）  和  视图  的  一部分  。  
结果  还要  等  时间  的  考验  。  
这  难道  不  是  典型  的  Ajax  应用  程序  吗  ？  
可能  需要  无数  行  JavaScript  代码  才能  将  数据  绑定  到  表单  、  捕捉  表单  的  提交  、  异步  发送  数据  到  服务器  然后  重  绘  显示  数据  的  部分  视图  。  
这些  都  压缩  到  XForms  实现  中  去  了  。  
仅仅  用  XForms  就  能  完成  大量  的  工作  ，  但  这  绝不  是  一  种  栅栏  围  起来  的  封闭  技术  。  
它  很  容易  和  基本  的  客户  端  技术  交互  ：  HTML  DOM  和  JavaScript  。  
XForms  和  JavaScript  
通过  XForms  ，  应用  程序  数据  可以  用  模型  表示  ，  绑定  到  不同  的  视图  。  
这些  开发  服务器  端  代码  时  常用  的  方法  ，  由于  Ajax  在  客户  端  也  变  得  越来越  常见  。  
XForms  是  一  种  客户  端  技术  ，  因此  使用  浏览器  的  原生  语言  JavaScript  很  容易  访问  它  并  不  奇怪  。  
XForms  的  强大  功能  完全  可以  通过  在  同一  页面  上  执行  的  JavaScript  访问  。  
实际上  ，  所有  的  XForms  成分  ，  包括  模型  和  视图  都  属于  建立  的  HTML  DOM  。  
这  正是  下一代  HTML  规范  的  核心  。  
因而  就  像  访问  HTML  div  一样  ，  可  用  熟悉  的  getElementById  (  )  格式  来  访问  。  
清单  4  给出  了  使用  JavaScript  访问  XForms  模型  的  一个  例子  。  
清单  4  .  通过  JavaScript  访问  XForms  模型  
通过  清单  4  可以  看到  ，  能够  把  XForms  模型  作为  DOM  的  一部分  来  访问  。  
得到  的  是  标准  的  JavaScript  对象  。  
它  有  专门  的  方法  ，  如  getInstanceDocument  (  )  。  
然后  就  可以  访问  XML  实例  数据  了  。  
这  是  真正  的  XML  DOM  对象  ，  可以  像  其他  任何  XML  DOM  对象  一样  导航  和  修改  。  
GWT  
GWT  是  2006年  的  JavaOne  上  提出  的  。  
当时  已经  得到  了  Java  技术  开发  人员  的  广泛  接受  。  
利用  已  有  的  知识  再  加上  对  HTML  和  CSS  的  基本  了解  ，  Java  技术  开发  人员  就  能  快速  创建  支持  Ajax  的  Web  应用  程序  。  
显然  这  是  一  种  合适  的  快速  原型  开发  工具  ，  但  实践  证明  也  适用  于  生产  环境  。  
比如  ，  Google  自己  的  将  Web  应用  程序  和  Web  API  融为一体  的  在线  集成  开发  环境  Mashup  Editor  ，  就是  用  GWT  开发  的  。  
GWT  的  很多  强大  功能  来源于  将  Java  代码  编译  成  JavaScript  的  能力  。  
Java  技术  开发  人员  可以  用  熟悉  的  事件  驱动  编程  直接  与  服务器  端  模型  连接  在  一起  。  
多数  Java  开发  人员  乐于  不用  自己  编写  JavaScript  代码  。  
他们  享受  到  了  强  类型  语言  的  好处  ，  同时  又  能  使用  标准  工具  （  如  Eclipse  ）  调试  支持  Ajax  的  Web  应用  程序  。  
如果  愿意  编写  JavaScript  代码  ，  GWT  能  提供  更  多  的  功能  。  
最  重要  的  是  ，  JavaScript  是  连接  GWT  世界  的  关键  。  
如果  需要  非  GWT  程序  和  GWT  程序  交互  ，  或者  相反  ，  那么  JavaScript  就是  唯一  的  办法  。  
所  幸  的  是  ，  GWT  很  容易  和  其他  技术  交互  。  
它  打开  了  自身  底层  JavaScript  的  盖子  ，  允许  开发  人员  直接  在  GWT  类  中  编写  JavaScript  代码  。  
就是说  ，  通过  GWT  的  JavaScript  Native  Interface  (  JSNI  )  可以  在  编写  Java  类  的  同时  编写  JavaScript  代码  。  
JSNI  
GWT  文档  （  请  参阅  参考  资料  ）  介绍  了  JSNI  的  一些  应用  。  
单纯  用  JSNI  就  能  实现  客户  端  方法  。  
JSNI  可以  封装  已  有  的  JavaScript  ，  非常  适合  将  已  有  的  应用  程序  迁移  到  GWT  。  
使用  JSNI  可以  访问  客户  端  Java  代码  （  编译  成  了  JavaScript  ）  ，  反之亦然  。  
关键  在于  用  JavaScript  能够  实现  的  功能  ，  用  GWT  和  JSNI  都  能  实现  ，  不  需要  Java  表示  。  
我们  来  看  一些  例子  。  
JSNI  的  例子  
为了  说明  JANI  可以  做  什么  ，  我们  先  从  GWT  自带  的  一个  例子  入手  。  
这个  例子  是  KitchenSink  。  
它  展示  了  GWT  中  的  UI  元素  。  
也  非常  适合  试验  JSNI  ，  因为  只有  客户  端  代码  ，  不  需要  和  服务器  通信  。  
我们  将  定义  一个  用  JavaScript  实现  的  Java  方法  。  
首先  从  JavaScript  所  能  做  的  最  简单  的  事情  开始  ，  经典  的  “  Hello  world  ”  。  
Hello  world  的  JSNI  版  如  清单  5  所  示  。  
清单  5  .  Hello  World  JSNI  
使用  这个  JSNI  方法  ，  需要  将  其  添加  到  KitchenSink  类  ，  让  它  在  执行  Java  方法  showInfo  (  )  的  时候  调用  JSNI  方法  ，  如  清单  6  所  示  。  
清单  6  .  从  Java  调用  JSNI  
GWT  对  JavaScript  方法  的  处理  就  像  是  在  Java  平台  上  编写  的  一样  。  
简单  明了  。  
编译  然后  在  托管  模式  下  运行  会  看到  图  1  所  示  的  结果  。  
太  简单  了  。  
现在  稍微  增加  一点  难度  ，  让  Java  和  JavaScript  共享  数据  。  
从  JSNI  访问  Java  变量  
要  让  JSNI  真正  有用  ，  必须  能够  在  Java  和  原生  JavaScript  代码  之间  共享  数据  。  
从而  能够  利用  GWT  和  JavaScript  各自  的  优点  。  
清单  7  是  “  Hello  world  ”  的  改进  版本  。  
清单  7  .  JSNI  和  Java  变量  
变量  myVar  在  Java  中  定义  ，  但是  可  在  JSNI  方法  中  访问  ，  如  清单  8  所  示  。  
清单  8  .  在  JSNI  方法  中  访问  myVar  变量  
现在  编译  新  的  KitchenSink  并  单击  按钮  ，  将  看到  图  2  所  示  的  结果  。  
图  2.  Hello  变量  
现在  ，  您  可以  轻松  地  在  Java  和  原生  JavaScript  代码  之间  交换  数据  。  
因为  您  已  拥有  所有  结合  使用  GWT  和  各种  JavaScript  技术  所  需  的  构建  技术  ，  如  XForms  。  
结束语  
XForms  和  GWT  都  为  现代  Ajax  应用  程序  提供  了  有力  的  抽象  和  强大  的  工具  。  
而且  都  有  和  “  底层  ”  JavaScript  的  联系  。  
不但  可以  用  JavaScript  补充  各自  本身  已经  很  丰富  的  功能  ，  而且  提供  了  将  两  种  技术  结合  起来  的  公共  基础  。  
现在  了解  了  集成  XForms  和  GWT  的  蓝图  。  
第  2  部分  将  按照  这个  蓝图  开始  融合  XForms  和  GWT  。  
将  XForms  与  Google  Web  Toolkit  相  结合  ，  第  2  部分  :  创建  艺术家  专辑  管理  表单  
这个  分为  四  部分  的  系列  文章  的  第  1  部分  提供  了  关于  GWT  和  XForms  的  坚实  基础  ，  并  研究  了  如何  结合  使用  这  两  种  技术  简化  Web  应用  程序  的  创建  过程  。  
在  第  2  部分  中  ，  您  将  构建  一个  简单  的  Web  应用  程序  ，  即  摇滚  巨星  应用  程序  ，  此  程序  拥有  两  个  页面  ：  一个  用于  查看  艺术家  ，  另  一个  用于  查看  这些  艺术家  录制  的  专辑  。  
第一  个  页面  将  使用  GWT  构建  ，  它  将  使用  GWT  的  小  部件  和  GWT  的  Ajax  抽象  。  
该  页面  将  链接  到  第二  个  页面  ，  后者  使用  XForms  构建  并  使用  XForms  数据  模型  和  XForms  控件  创建  自己  的  UI  。  
前提  条件  
加快  学习  速度  ！  
请  阅读  本  系列  的  第  1  部分  ，  介绍  GWT  的  JavaScript  Native  Interface  。  
本文  使用  GWT  1.4  和  Mozilla  XForms  插件  0.8  （  相关  链接  请  参阅  参考  资料  部分  ）  。  
这个  Mozilla  XForms  插件  可  用于  任何  基于  Mozilla  的  Web  浏览器  ，  如  Firefox  和  Seamonkey  。  
使用  GWT  需要  了解  Java™  语言  的  知识  和  一些  Web  技术  如  HTML  、  CSS  。  
文中  还  用到  了  大量  JavaScript  代码  。  
XForms  大量  采用  模型  -  视图  -  控制器  范型  ，  因此  熟悉  MVC  就  足够  了  。  
原来  接触  过  XForms  和  GWT  当然  很  好  ，  但  不  是  必需  的  。  
本文  中  的  代码  是  使用  Eclipse  3.3  开发  的  ，  但  并  不  需要  了解  Eclipse  。  
使用  GWT  管理  艺术家  
构建  摇滚  巨星  应用  程序  所  需  做  的  第一  件  事  是  获取  所有  艺术家  的  列表  。  
当然  ，  您  也  希望  可以  向  列表  中  添加  新  艺术家  。  
列表  还  将  为  您  提供  浏览  到  第二  个  页面  的  方式  ，  在  第二  个  页面  中  ，  您  将  能够  管理  某个  艺术家  所  录制  的  专辑  。  
您  将  为  艺术家  页面  使用  GWT  。  
您  将  使用  其  内置  的  小  部件  为  页面  创建  漂亮  的  UI  ，  并  使用  其  Ajax  抽象  简化  数据  的  加载  和  保存  。  
应用  程序  数据  
应用  程序  中  的  数据  将  存储  于  简单  的  XML  文件  中  。  
XML  是  传输  数据  的  一  种  常见  格式  ，  当然  也  是  XForms  原生  的  。  
您  可以  轻松  地  将  数据  保存  到  关系  数据库  中  ，  但是  您  也  可以  很  好  地  将  其  序列化  为  XML  格式  以  用于  不同  目的  。  
使用  XML  （  而  不  使用  关系  数据库  ）  使  数据  更加  简单  ，  从而  可以  将  精力  集中  在  应用  程序  的  关键  部件  ：  GWT  和  XForms  之上  。  
带  GWT  的  艺术家  模型  
应用  程序  需要  使用  一个  简单  的  数据  模型  表示  艺术家  。  
使用  GWT  可  使  该  过程  与  创建  一个  简单  的  Java  bean  一样  容易  ，  如  清单  1  所  示  。  
清单  1  .  艺术家  模型  ：  Java  Bean  
如前所述  ，  这  只是  一个  标准  的  Java  bean  ：  三  个  字段  带有  相应  的  getters  和  setters  。  
您  将  对  艺术家  设置  一个  数值  ID  以  方便  引用  。  
如果  使用  数据库  表  保存  艺术家  ，  那么  可能  也  需要  使用  此  ID  。  
要  注意  的  是  ，  它  位于  应用  程序  的  客户机  包  中  。  
因此  这个  类  将  被  编译  为  JavaScript  。  
但是  这  对  您  没什么  影响  。  
您  仍然  可以  使用  Java  编程  ，  无需  考虑  后面  的  JavaScript  。  
最后  ，  注意  您  的  类  实现  了  IsSerializable  标记器  接口  。  
任何  需要  通过  网络  发送  的  类  （  比如  ，  Ajax  调用  的  请求  或  响应  的  一部分  ）  都  需要  此  接口  。  
现在  ，  考察  一下  如何  使用  GWT  为  Artist  对象  列表  创建  UI  。  
为  艺术家  列表  使用  GWT  小  部件  
GWT  的  一个  优秀  特性  是  ，  带有  一  组  小  部件  可  用于  创建  通用  的  UI  结构  。  
您  可以  使用  熟悉  的  Java  语法  创建  UI  元素  。  
如果  您  从事  过  Swing  或  SWT  编程  ，  则  会  对此  非常  熟悉  。  
此时  ，  您  将  使用  FlexTable  。  
这  是  一个  非常  适合  应用  程序  的  动态  表  ，  因为  没有  设定  艺术家  的  数目  。  
FlexTable  可以  进行  扩展  以  适合  艺术家  的  数目  。  
填充  FlexTable  的  代码  如  清单  2  所  示  。  
清单  2  .  创建  一个  艺术家  表  
如果  已经  存在  表  ，  那么  清单  2  中  的  代码  将  清空  该  表  。  
然后  创建  一个  表头  。  
表头  的  惟一  特点  是  使用  了  样式  。  
我们  可以  大致  观察  一下  。  
代码  接下来  对  艺术家  进行  迭代  ，  将  其  添加  到  表  中  。  
我们  来  观察  一下  清单  3  中  添加  了  表  的  页面  。  
清单  3  .  艺术家  页面  
HTML  没有  太  多  工作  要  做  ！  
所有  的  难题  都  由  GWT  解决  。  
HTML  所  做  的  惟一  工作  就是  为  表头  内置  了  一些  CSS  。  
现在  ，  页面  已  具备  了  UI  元素  ，  因此  只  需  添加  一些  数据  即可  。  
您  将  使用  GWT  风格  的  Ajax  获取  数据  。  
获取  艺术家  数据  ：  使用  远程  过程  调用  
您  所  拥有  的  优秀  GWT  部件  可以  用来  显示  艺术家  列表  。  
现在  ，  您  只  需要  一个  列表  。  
为此  ，  您  将  创建  管理  艺术家  的  服务  。  
您  将  使用  GWT  （  如  Ajax  ）  异步  调用  此  服务  。  
这  是  一  种  典型  的  GWT  远程  过程  调用  （  RPC  ）  。  
首先  声明  服务  的  接口  ，  如  清单  4  所  示  。  
清单  4  .  Artist  Service  Interface  
注意  ，  服务  扩展  了  GWT  标记器  接口  RemoteService  。  
这  是  一个  必需  的  GWT  约定  。  
另外  还要  注意  ，  getAllArtists  (  )  调用  返回  了  一  组  Artist  对象  。  
这些  是  先前  定义  的  与  数据  模型  相同  的  Artist  对象  。  
您  可能  希望  让  它  返回  Collection  <  Artist  >  或  List  <  Artist  >  ，  但是  不要  这样  做  。  
GWT  在  客户机  代码  中  不  支持  泛型  ，  例如  编译  为  JavaScript  的  代码  。  
JavaScript  中  没有  范型  ，  而且  运行  时  泛型  信息  也  不  可用  。  
您  也  可以  返回  java.util.List  ，  因为  这  是  允许  的  ，  但是  数组  就  可以  很  好  地  满足  要求  并且  具有  强  类型  。  
GWT  需要  使用  从  客户机  调用  的  所有  接口  的  异步  版本  。  
接口  相应  的  异步  版本  如  清单  5  所  示  。  
清单  5  .  异步  服务  接口  
这里  的  关键  是  服务名  的  Async  后缀  。  
这  是  一  种  命名  约定  ，  可  使  GWT  将  此  接口  与  清单  4  中  所  示  的  接口  匹配  。  
另外  还要  注意  ，  所有  调用  实现  异步  的  方式  ，  这  说明  这些  调用  拥有  void  返回  类型  。  
它们  都  拥有  一个  AsyncCallback  ，  这  使  GWT  能够  在  接口  服务器  端  实现  处理  完  收到  的  请求  后  ，  调用  回调  函数  。  
让  我们  观察  一下  接口  的  服务器  端  实现  ，  如  清单  6  所  示  。  
清单  6  .  接口  的  服务器  端  实现  
关于  这个  类  有  几  个  需要  注意  的  地方  。  
其一  是  它  扩展  了  RemoteServiceServlet  并  实现  了  您  定义  的  接口  。  
RemoteServiceServlet  是  一个  用于  处理  Ajax  请求  的  典型  Java  servlet  。  
运行  时  ，  客户机  代码  的  请求  将  调用  超类  的  方法  ，  而  超类  将  使用  反射  调用  客户机  请求  的  实际  方法  。  
最后  ，  注意  ，  您  将  使用  Data  Access  Object  (  DAO  )  接口  ArtistDao  。  
您  将  使用  基于  文件  的  实现  ArtistFileDao  ，  但是  您  可以  轻松  地  将  其  交换  为  基于  数据库  的  实现  。  
该  类  还  拥有  处理  读  /  写  文件  及  解析  XML  的  代码  。  
我们  来  测试  一下  应用  程序  。  
查看  艺术家  ：  托管  模式  
到  目前  为止  ，  所有  内容  都  是  纯  GWT  的  。  
GWT  的  一个  优秀  特性  就是  您  可以  使用  托管  模式  。  
如果  您  在  使用  Eclipse  ，  则  可以  从中  启动  应用  程序  并  进行  查看  。  
但是  您  首先  需要  一些  数据  。  
清单  7  给出  了  一个  简单  的  数据  文件  。  
清单  7  .  测试  数据  
现在  您  已  拥有  测试  数据  ，  可以  开始  启动  应用  程序  。  
应该  出现  图  1  所  示  的  界面  。  
图  1.  以  托管  模式  查看  艺术家  
这  是  测试  数据  中  的  艺术家  列表  。  
现在  您  只  需  一个  简单  的  表单  输入  新  艺术家  。  
添加  新  艺术家  ：  使用  GWT  创建  表单  
您  需要  一个  简单  的  数据  输入  表单  以  输入  新  艺术家  。  
所  幸  的  是  GWT  也  包括  了  创建  表单  的  小  部件  。  
您  可以  使用  GWT  通过  编程  创建  表单  ，  如  清单  8  所  示  。  
清单  8  .  使用  GWT  的  数据  输入  表单  
这  段  代码  同样  非常  简单  。  
您  创建  了  一  组  小  部件  ：  标签  、  文本框  和  按钮  （  以及  您  一直  使用  的  FlexTable  ）  。  
您  还  将  使用  几  个  面板  ，  充当  布局  管理器  处理  小  部件  的  布局  。  
然后  将  事件  侦听  程序  添加  到  一个  按钮  上  以  添加  新  艺术家  。  
事件  侦听  程序  将  调用  后端  服务  。  
我们  来  查看  一下  清单  9  中  的  代码  。  
清单  9  .  添加  新  的  艺术家  方法  
在  这  段  代码  中  ，  您  看到  了  被  调用  接口  的  异步  版本  。  
创建  了  一个  异步  回调  方法  。  
在  本  例  中  该  方法  非常  简单  ，  并且  只  在  调用  失败  时  使用  。  
因为  您  可以  继续  操作  ，  将  艺术家  添加  到  表  中  ，  而  不用  等待  服务器  响应  。  
这  就  提供  了  很  好  的  用户  体验  ，  因为  可以  即时  添加  艺术家  ，  但是  这里  假定  很  少  出现  调用  失败  。  
本文  最后  有  完整  的  源代码  下载  。  
我们  来  查看  一下  添加  完  表单  后  的  UI  ，  如  图  2  所  示  。  
图  2.  查看  艺术家  并  添加  新  艺术家  
填写  表单  并  单击  Add  Artist  按钮  。  
UI  应  立即  被  更新  ，  如  图  3  所  示  。  
图  3.  添加  的  艺术家  
您  已经  了解  了  使用  GWT  创建  UI  元素  和  使用  Ajax  检索  数据  及  将  数据  保存  到  后端  服务  的  方式  。  
我们  来  看看  如何  使用  XForms  创建  管理  专辑  的  页面  。  
使用  XForms  管理  专辑  
应用  程序  的  第二  部分  将  按  艺术家  查看  专辑  列表  。  
自然  地  ，  您  会  希望  创建  单个  的  页面  为  每个  艺术家  显示  专辑  。  
那么  您  如何  知道  应该  显示  哪个  专辑  呢  ？  
很  明显  ，  有  几  种  不同  的  方法  可以  实现  此  功能  ，  但是  我们  将  使用  命令  模式  。  
命令  会  告诉  您  创建  页面  所  需  的  所有  信息  。  
这样  ，  您  需要  了解  要  显示  哪个  专辑  ，  换言之  ，  哪个  艺术家  的  专辑  。  
为此  ，  您  需要  一个  request  参数  指定  艺术家  ，  因此  直接  称之为  artistId  。  
您  需要  一个  链接  从  第一  个  页面  链接  到  第二  个  页面  ，  而  该  链接  需要  使用  artistId  参数  。  
从  GWT  页面  到  XForms  页面  的  链接  
我们  回到  第一  个  页面  ，  创建  一个  到  第二  个  页面  的  链接  。  
这  只  需要  稍微  修改  一下  代码  ，  如  清单  10  所  示  。  
清单  10  .  添加  指向  Artist  列表  的  链接  
修改  的  代码  是  用于  设置  表  中  左侧  专辑  的  代码  。  
您  没有  使用  setText  (  ...  )  ，  而是  使用  了  setHTML  (  ...  )  。  
这  让  您  能够  将  HTML  置于  表  中  ，  从而  创建  一个  简单  的  指向  新  页面  “  Albums.jsp  ”  的  链接  。  
您  使用  了  一个  JSP  ，  因此  可以  构建  动态  页面  。  
动态  部分  就是  只  显示  由  artistId  指定  的  艺术家  所  录制  的  专辑  。  
注意  ，  artistId  参数  是  链接  的  一部分  。  
现在  您  只  需  创建  此  页面  即可  。  
使用  GWT  创建  XForms  页面  
您  可以  像  创建  其他  Web  资源  （  如  HTML  或  CSS  页面  ）  那样  创建  JSP  。  
您  也  可以  在  页面  上  使用  GWT  。  
所  需  做  的  惟一  操作  就是  引用  GWT  生成  的  JavaScript  文件  。  
现在  ，  您  将  使用  服务器  端  代码  加载  指定  艺术家  录制  的  专辑  。  
您  将  把  该  数据  直接  写入  XForms  模型  实例  数据  ，  如  清单  11  所  示  。  
清单  11  .  使用  服务器  逻辑  内联  数据  
Java  scriptlet  处理  逻辑  以  查明  要  显示  的  专辑  。  
同样  ，  您  是  从  XML  文件  加载  数据  。  
过滤  逻辑  包含  在  一个  外部  类  中  ，  该  类  可  作为  本文  源代码  的  一部分  下载  。  
同样  注意  ，  要  在  XML  文件  中  创建  一些  测试  数据  。  
测试  数据  也  随附  在  文章  的  源代码  中  。  
以  Web  模式  测试  XForms  页面  
现在  ，  您  已  准备  好  测试  XForms  专辑  页面  。  
截止  目前  ，  您  已  使用  GWT  的  托管  模式  测试  了  GWT  艺术家  页面  。  
您  可以  再次  以  托管  模式  启动  ，  但是  您  需要  再次  切换  到  GWT  的  Web  模式  以  测试  新  页面  。  
为什么  要  这样  做  呢  ？  
XForms  所  需  的  浏览器  插件  在  GWT  的  托管  模式  下  不  可用  。  
图  4  展示  了  如何  切换  到  Web  模式  。  
图  4.  切换  到  Web  模式  
单击  Compile  /  Browse  将  应用  程序  切换  到  Web  模式  ，  如  图  5  所  示  。  
图  5.  Web  模式  下  的  应用  程序  
您  现在  应该  会  看见  应用  程序  在  默认  的  Web  浏览器  中  运行  。  
现在  ，  您  可以  单击  某  一个  艺术家  ，  然后  会  看见  图  6  所  示  的  界面  。  
图  6.  测试  Artists  页面  
页面  显示  了  艺术家  的  一  列  专辑  。  
它  使用  了  一些  简单  的  XForms  控件  从  模型  的  实例  数据  中  迭代  XML  数据  。  
在  第  3  部分  中  ，  您  将  看见  如何  为  数据  条目  添加  XForms  控件  ，  以及  如何  将  其  连接  到  GWT  Ajax  调用  以  允许  唱片  公司  的  工作  人员  在  此  页面  上  添加  新  专辑  。  
结束语  
本文  作为  摇滚  巨星  系列  的  第  2  部分  ，  介绍  了  如何  使用  GWT  构建  交互式  页面  并  将  其  链接  到  使用  XForms  的  页面  。  
在  第  3  部分  中  ，  您  将  重构  本文  所  建立  的  摇滚  巨星  应用  程序  。  
您  不  会  实际  更改  本文  所  创建  的  应用  程序  的  功能  ，  但是  您  将  了解  如何  使用  页面  上  的  GWT  元素  作为  XForms  元素  使  应用  程序  更  具  交互性  。  
硬盘  是  作为  计算机  使用  频率  最高  的  元件  之一  ,  出现  的  故障  可以  说  也  是  最  多  的  ,  今天  让  我们  一起  来  看  一下  日常  使用  中  常见  的  一些  故障  
1  、  问  cmos  中  找  不  到  硬盘  ?  
答  1  、  可能  是  硬盘  坏  了  ；  
2  、  如果  光驱  同  硬盘  接  在  同一  条  电缆  线  上  ，  开机  检测  不  到  硬盘  ，  一般  是  因为  跳线  问题  ，  将  光驱  设置  为  从盘  方式  即可  ，  不过  如果  是  原来  正常  ，  那  就  不  是  这个  问题  ；  
3  、  用  一  块  好  的  硬盘  与  它  挂  在  一起  ，  坏  盘  只  接  电源线  不  接  数据线  ，  好  盘  电源线  数据线  都  接  好  ，  用  好  盘  启动  ，  然后  ，  小心  点  把  数据线  拔  下  ，  接  在  坏  盘  上  ，  再  用  dm  低格  ，  办法  很  有用  ，  不过  有点  危险  ，  实在  不行  可以  试试  看  ；  
4  、  如果  软盘  都  无法  启动  则  可能  是  中  了  逻辑  炸弹  ，  可以  用  搜索引擎  搜索  逻辑  炸弹  寻找  解决  方法  ；  
5  、  更换  一  条  新  的  数据线  。  
2  、  问  :  我  的  硬盘  好  响  ，  但  我  在  DOS  下  扫描  硬盘  没有  发现  坏  区  ，  我  的  硬盘  会  不  会  很快  就  坏  ？  
答  ：  因为  硬盘  属于  电子  存储  和  物理  存储  相  结合  的  ，  所以  即使  硬盘  没有  坏  区  ，  硬盘  内  还有  电路板  和  马达  ，  马达  在  使用  中  也  处于  老化  状态  ，  因为  硬盘  也  属于  耗材  ，  所以  硬盘  理所当然  会  坏  ，  只是  如果  没有  坏  区  的话  ，  还  可以  使用  一  段  时间  的  ！  
3  、  问  ：  最近  打开  电脑  时  找  不  到  硬盘  ,  无法  启动  .  用  软盘  或  光盘  虽然  能  启动  但  也  找  不  到  硬盘  而  无法  进入  操作系统  .  但  却  又  能  找到  硬盘  顺利  的  启动  并  进入  操作系统  .  请教  是  什么  原因  ?  
谢谢  !  
答  ：  平时  打开  电脑  属于  冷  启动  ，  而  按  下  X  再  启动  属于  软  启动  ！  
软  启动  本身  就是  在  硬盘  基础  上  来  启动  系统  ，  冷  启动  的话  ，  是  在  通过  BIOS  检测  后  ，  用  硬盘  来  引导  系统  ，  而  刚  开  电脑  根本  找  不  到  硬盘  ！  
请  检查  硬盘  数据线  和  电源线  的  连接  ！  
如果  还是  没有  问题  的话  ，  那  就是  你  的  硬盘  出现  了  引导区  损坏  ！  
请  重新  分区  来  解决  ！  
4  、  问  ：  硬盘  容量  本来  是  40  G  的  ，  但是  有  一  次  可能  是  保护卡  没  卸  的  原因  吧  ，  不管  是  分区  或  格盘  都  变成  32  G  多  了  ，  （  正常  的  是  38  G  多  点  ）  。  
更换  数据线  也  一样  。  
而且  保护卡  也  打  不  上  了  。  
用  PQ  或  fdisk  检测  硬盘  容量  都  不对  。  
请教  ：  如何  让  它  恢复  到  40  G  ？  
找回  失去  的  空间  ？  
答  ：  有些  保护卡  是  需要  一部分  硬盘  空间  来  恢复  系统  的  ，  所以  ，  保护卡  没有  正常  操作  ，  而  系统  认为  保护卡  依然  占用  空间  ！  
所以  出现  了  无法  使用  的  空间  ！  
请  重新  分区  来  解决  ！  
5  、  问  ：  有时候  在  开机  自检  时  出现  ：  
当  检测  到  1  时  就  不  动  了  ，  象  死机  一样  ，  并且  此时  硬盘  和  光驱  的  灯  一直  常  亮  不  闪  ！  
答  ：  这个  是  由于  系统  启动  的  时候  ，  从  BIOS  启动  ，  然后  再  去  检测  IDE  设备  ！  
系统  一直  检查  ，  而  设备  未  准备  好  或者  无法  使用  ，  造成  死  循环  ，  然后  就  无法  启动  ！  
请  检查  硬盘  数据线  和  电源线  的  连接  ，  让  系统  找到  硬盘  ，  问题  即可  解决  ！  
6  、  问  ：  ‘  我  的  系统  是  windowsxp  ,  硬盘  40  G  .  通过  PQ  分区  为  C  /  D  /  E  /  F  四  个  盘  ．  现在  系统  正常  ，  C  /  D  /  E  三  个  盘  都  正常  。  
在  访问  Ｆ  盘  时  内容  都  显示  正常  ，  但  在  资源  管理器  中  上方  显示  ＂  未  指定  ＂  ，  尝试  用  ＰＱ  重新  格式化  、  在  开始  ／  所有  程序  ／  附件  ／  命令  提示符  下  用  format  格式化  后  再  进入  Ｆ  盘  ，  仍  显示  为  “  未  指定  ”  ，  请  帮助  ！  
非常  感谢  ！  
答  ：  这  是  由于  分区表  中  ，  无法  读取  F  盘  的  引导  信息  。  
所以  ，  显示  为  “  未  指定  ”  。  
请  在  DOS  模式  下  进入  FDISK  ，  然后  删除  F  分区  ，  重新  创建  ，  格式化  ，  即可  使用  ！  
7  、  问  ：  开机  时  ，  找  不  到  硬盘  ，  进  不  去  ，  在  CMOS  中  搜索  也  找  不  到  ？  
答  ：  请  检查  ，  硬盘  数据线  和  电源线  的  连接  ，  如果  没有  问题  的话  ，  则  怀疑  是  硬盘  分区  损坏  ，  请  挂到  别的  计算机  上  来  格式化  ，  然后  分区  来  创建  引导  分区  ！  
8  、  问  ：  有  一  块  10  G  的  昆腾  硬盘  ,  昨天  非正常  关机  (  拔  的  插头  )  后  就  不能  启动  了  ,  提示  硬盘  出错  .  本  想  用  主板  查找  硬盘  ,  结果  按  到  低格  选项  上  了  ,  还  连  回  了  几  次  车  !  
后来  才  发现  了  .  用  光驱  启动  后  连  FDISK  命令  都  不能  用  ,  把  硬盘  接到  其它  电脑  上  就  根本  没有  把  这个  硬盘  识别  出来  ?  
我  该  怎样  办  才能  修好  这个  硬盘  ?  
答  ：  低格  的  时候  完全  损坏  了  硬盘  的  引导区  ，  因此  ，  需要  用  别的  硬盘  来  引导  ！  
在  BIOS  中  检测  IDE  设备  来  识别  ！  
用  诺顿  来  修复  ，  如果  还  不行  的话  ，  找  个  和  你  一样  的  硬盘  ，  然后  就  可以  把  分区表  拷贝  过来  ！  
9  、  问  ：  各位  好  ：  小弟  有  一  块  迈拓  20  G  硬盘  ，  2001年  买  回来  的  ，  前段  时间  在  使用  的  时候  遇到  死机  ，  冷  启动  之后  ，  自检  的  时候  可以  看见  硬盘  ，  但是  不能  进入  系统  ，  用  其他  分区  软件  可以  看见  硬盘  。  
希望  能够  帮  我  找到  解决  答案  ，  谢谢  ！  
答  ：  这个  是  由于  你  的  系统  错误  而  造成  的  无法  启动  ，  而且  ，  关于  死机  ，  有  很多  的  原因  造成  的  ！  
请  检查  电脑  的  散热  ！  
至于  系统  的  问题  ，  请  用  SYS  修复  或者  覆盖  安装  系统  来  解决  ！  
10  、  问  ：  请教  一个  问题  :  
我  的  电脑  有  个  现象  在  开机  时  进入  cmos  时  一会  死机  ,  伴随  硬盘  (  maxtor  ;  40  g  )  识别  什么  nikimi  xy  a300  之类  的  型号  (  错误  )  ,  
我  试  了  一  新  内存  ,  主板  是  新  的  ,  有点  类似  病毒  怪  状  或者  某个  硬件  有  问题  ,  之前  还  能  进入  系统  但  有  死机  状  请  尽快  答复  ,  不  甚  感谢  !  
答  ：  很  抱歉  ，  您  的  这个  错误  并  不  完整  ，  请  写  出  完整  的  错误  报告  ！  
就  错误  出现  的  时候  的  情况  判断  ，  应该  是  系统  识别  不  了  硬盘  导致  的  错误  ！  
请  确认  您  的  硬盘  没有  问题  ！  
到  BIOS  中  检测  硬盘  是否  可以  被  识别  ！  
11  、  问  ：  紧急  求救  :  
我  的  移动  硬盘  (  30  G  )  ,  存  在  里面  的  文件  好多  都  找  不  到  了  (  将近  20  G  )  ,  只有  几十  个  文件  能  看到  (  几十  兆  )  ,  
但是  查看  属性  ,  移动  硬盘  的  容量  确实  :  已  用  20  G  ,  说明  我  的  那些  文件  还  在  .  我  怎样  才能  再  看到  他们  .  
注明  :  我  的  文件  属性  全  是  存档  ;  ,  没有  加  隐藏  ;  .  
答  ：  不  知道  您  的  移动  硬盘  是  什么  牌子  的  产品  ！  
某些  移动  硬盘  和  闪存  都  加  了  一个  保护  的  隐藏  分区  ，  或者  一个  特别  的  加密  分区  ！  
所以  ，  请  仔细  阅读  您  的  产品  说明书  ！  
如果  是  自己  做  的  移动  硬盘  ，  则  可能  是  硬盘  存在  错误  ，  无法  读取  ，  因此  ，  容量  空间  已经  占用  ！  
但  却  依然  看  不  到  文件  ！  
12  、  问  ：  紧急  求救  ：  
我  的  IBM  40  G  硬盘  前  几  天  用  得  还  好好  的  ，  没有  任何  坏  区  或  异常  声音  。  
但  今天  开机  自检  时  检测  到  硬盘  型号  后  就  死机  ，  只  听见  不断  读  盘  的  声音  ，  插入  启动盘  也  进  不  了  DOS  ，  拆  下  硬盘  后  挂  在  别的  机器  上  造成  另  一  台  机器  也  死机  ，  情况  和  原来  一样  。  
请问  这  是  为什么  ？  
答  ：  听见  不断  读  盘  的  声音  ，  证明  硬盘  可以  识别  ！  
所以  ，  是  你  硬盘  本身  存在  的  问题  ！  
不断  读  盘  的  声音  证明  是  你  的  硬盘  马达  不  停  的  转动  ，  但是  却  找  不  到  硬盘  引导  扇区  ，  硬盘  物理  问题  ！  
而且  插入  启动盘  也  进  不  了  DOS  ，  拆  下  硬盘  后  挂  在  别的  机器  上  造成  另  一  台  机器  也  死机  ，  说明  ，  其他  计算机  也  无法  读取  硬盘  引导  扇区  ，  造成  无法  读取  的  症状  ！  
请  到  BIOS  里  识别  ，  如果  依然  无  问题  ！  
请  找  当地  专业  维修  硬盘  的  地方  ，  修复  你  的  硬盘  磁头  位置  ！  
否则  自己  维修  可能  造成  盘面  损坏  ！  
如果  依然  无法  修复  则  硬盘  报废  ！  
13  、  问  ：  请  高手  解答  ：  
我  想  在  98  系统  上  增加  一个  80  G  的  硬盘  （  原  已  有  60  G  的  硬盘  ）  ，  在  CMOS  中  能  找到  新  硬盘  ，  可是  在  我  的  电脑  却  没有  新  增加  的  硬盘  ，  是  什麽  原因  ，  请  尽快  指教  。  
答  ：  这个  是  由于  你  的  硬盘  跳线  没有  调  的  原因  。  
IDE  接口  上  只能  有  一个  主盘  ，  所以  ，  第二  个  硬盘  虽然  在  BIOS  里  识别  ，  但是  系统  识别  不  了  ，  所以  请  把  第二  个  硬盘  的  跳线  设置  为  从盘  ，  就  可以  使用  了  ！  
14  、  问  :  我  的  win2000  莫名其妙  开机  后  在  bios  里  硬盘  参数  完全  不对  了  ，  如  我  是  酷鱼  硬盘  在  bios  里  显示  的  是  rt  而  非  st  !  
不能  进入  系统  。  
答  ：  硬盘  识别  错误  ，  是  硬盘  与  BIOS  识别  本身  存在  的  问题  ，  与  系统  没有  关系  ！  
怀疑  是  硬盘  内部  电路板  出现  问题  ！  
是否  对  硬盘  进行  过  非法  操作  或者  错误  运行  某些  程序  ！  
造成  硬盘  识别  错误  ！  
解决  方法  ：  请  把  硬盘  挂到  别的  计算机  上  看  是否  可以  正常  识别  ！  
如果  可以  识别  ，  则  可能  是  你  的  主板  ＢＩＯＳ  损坏  ，  如果  识别  不  了  ，  则  是  硬盘  电路  损坏  ！  
15  、  问  :  我  的  迈拓  20  G  5400  转  硬盘  分区表  破坏  了  ，  现在  没有  备份  ，  谁  能  帮  我  找  一个  啊  ，  我  已经  用  过  所有  办法  了  ，  现在  只有  找  一样  的  硬盘  的  分区表  了  
答  ：  解决  方法  ：  如果  FDISK  和  PQ  等  硬盘  工具  无法  解决  的话  ，  请  找  另外  一  台  电脑  ，  然后  挂  上去  ！  
在  好  的  那  台  电脑  上  格式化  硬盘  ，  然后  就  可以  重新  分区  ，  正常  使用  了  ！  
16  、  问  ：  请问  老师  我  的  硬盘  是  西捷  80  G  ,  可是  在  我  的  电脑  属性  中  却  只  有  76  G  少  了  整整  4  G  我  是  不  是  被  商家  给  骗  了  。  
如果  不  是  被  骗  是  什么  原因  造成  的  
答  ：  你  这个  属于  正常  现象  ，  因为  硬盘  容量  是  用  MB  和  GB  来  定  的  ，  标准  定义  为  1024  MB  =  1  GB  ，  但是  厂家  为了  方便  于  计算  和  使用  ，  在  生产  的  时候  ，  1000  MB  =  1  GB  ，  这样  的话  ，  就  少  了  2%  的  空间  ！  
但是  你  这个  硬盘  多  少  了  内容  ，  怀疑  是  厂家  在  给  你  做  系统  的  时候  ，  做  了  个  隐藏  分区  来  备份  系统  ！  
请  仔细  检查  ！  
解决  方法  ：  用  FDISK  或者  PQ  等  硬盘  检测  工具  来  检测  ，  这  不  是  个  很  严重  的  问题  ！  
17  、  问  ：  ‘  不好意思  ，  还有  一个  问题  要  问  ：  
插入  移动  硬盘  以后  ，  在  机器  右下  角  可以  看见  可  热  插  拔  的  图标  ，  但是  在  “  我  的  电脑  ”  里  却  看  不  见  移动  硬盘  盘符  ，  后来  把  接线口  直接  拔掉  再  装  上  以后  ，  出现  了  图标  ，  但是  却  叫  我  格式化  移动  硬盘  ，  点  确定  以后  ，  又  说  函数  错误  。  
老师  能  不  能  帮助  解答  一下  这  是  什么  原因  ？  
答  ：  这个  是  由于  移动  硬盘  不  和  闪存  一样  用  电子  方式  来  传输  ，  移动  硬盘  也  需要  用到  一部分  机械  部分  来  读  写  数据  ！  
而  闪存  只  需要  默认  USB  供电  就  可以  正常  工作  ，  而  移动  硬盘  需要  的  电量  比  闪存  多  许多  ，  因此  需要  计算机  重新  启动  来  检测  ！  
解决  方法  ：  重新  启动  ！  
18  、  问  ：  我  有  一个  昆腾  火球  的  10.02  硬盘  ，  有时  能  找到  ，  有时  又  找  不  到  ，  请问  是  什么  问题  ，  可以  修复  吗  ？  
谢谢  
答  ：  请问  是  不  是  在  启动  的  时候  时  有  时  无  呢  ？  
这个  主要  是  由于  系统  启动  的  时候  ，  主板  BIOS  必须  检测  硬盘  位置  ，  你  的  10  G  硬盘  属于  早期  产品  ，  因此  会  出现  硬盘  坏  道  ，  或者  硬盘  分区表  错误  等  问题  ，  解决  方法  ：  检查  硬盘  数据线  与  电源线  的  连接  ，  在  BIOS  中  自动  检测  硬盘  ，  用  SCANDISK  来  检测  硬盘  是否  有  坏  道  ！  
19  、  问  ：  我  最近  刚  置  了  一  台  电脑  ，  玩  一会  就  会  出现  找  不  到  硬盘  的  提示  ，  还有  玩  大  的  游戏  就  会  出现  死机  ，  是  什么  原因  
答  ：  硬盘  的  数据线  与  数据线  的  插头  接触  不良  ,  因为  是  新  电脑  ，  所以  硬件  问题  不  是  很  大  ！  
请  仔细  检查  连接  ！  
但是  如果  这个  硬盘  是  返修货  或者  本身  就  有  问题  ，  也  可以  出现  上述  问题  ！  
玩  大  游戏  的  时候  出现  死  机器  ，  这个  应该  是  硬件  不  兼容  或者  软件  不  兼容  造成  的  ！  
因为  是  新  硬件  ，  所以  考虑  兼容性  问题  ，  请问  在  买  电脑  的  时候  是否  拷  机  以  证明  稳定  ！  
如果  没有  的话  ，  请  安装  主板  驱动  和  显卡  驱动  ，  重新  插  拔  内存  来  解决  ！  
20  、  【  问  】  换  过  主板  后  ，  发现  硬盘  灯  一直  在  微  闪  ，  请问  这  是  正常  的  吗  ？  
【  答  】  硬盘  灯  微  闪  并  不  代表  就是  在  读  盘  ，  轻微  的  闪烁  只是  电流  的  原因  ，  很  正常  的  ，  如果  没有  其他  不  正常  现象  可以  不用  担心  。  
鲜为人知  的  安装  卸载  绝技  巧  用  Rundll32  
在  Windows  系统  中  安装  和  卸载  程序  是  件  非常  容易  的  事情  ，  一般  用户  通过  安装  和  卸载  程序  向导  就  能  很  轻松  地  完成  。  但  安装  和  卸载  Windows  程序  还  有些  鲜为人知  的  小  技巧  ，  使用  Rundll32  命令  安装  和  卸载  Windows  程序  就是  其中  之一  ，  可能  你  从来  还  没  接触  过  ，  下面  我们  就  一起  领略  它  的  神奇  功能  吧  ！  
提示  ：  Rundll32.exe  是  Windows  系统  提供  的  一个  命令  ，  它  用来  调用  32  位  的  DLL  函数  （  16  位  的  DLL  文件  用  Rundll.exe  来  调用  　。  DLL  文件  是  Windows  的  基础  ，  所有  的  API  函数  都  是  在  DLL  中  实现  的  ，  它  不能  独立  运行  ，  一般  由  进程  加载  并  调用  ，  运行  DLL  文件  最  简单  的  方法  是  利用  Rundll32.exe  ，  它  的  命令  格式  是  “  Rundll32.exe  动态  链接  库  名  函数  名  参数  名  ”  。  
1．  卸载  微软  Java  虚拟机  
在  Windows  系统  中  ，  要  想  IE  浏览器  执行  包含  Java  小  程序  的  网页  ，  必须  安装  微软  Java  虚拟机  （  MSJVM  ）  ，  Windows  X  已经  捆绑  了  MSJVM  ，  Windows  X  中  虽然  已经  剥离  了  微软  Java  虚拟机  ，  但  还是  可以  手工  安装  。  不过  ，  有  个  现实  我们  不得不  面对  ：  由于  微软  和  SUN  公司  的  明争暗斗  ，  微软  已经  停止  对  MSJVM  的  开发  ，  因此  很多  用户  改用  SUN  公司  提供  的  Java  虚拟机  。  但  微软  没有  提供  MSJVM  的  卸载  工具  ，  使用  Rundll32  命令  ，  我们  可以  轻松  卸载  MSJVM  。  
单击  “  开始  →  运行  ”  命令  ，  在  “  运行  ”  对话框  中  输入  “  RunDll32  advpack.dll  ,  LaunchINFSection  java.inf  ,  UnInstall  ”  ，  回车  后  系统  会  打开  “  Microsoft  VM  uninstall  ”  对话框  ，  单击  “  是  （  Y  ）  ”  按钮  后  ，  系统  就  会  开始  卸载  微软  Java  虚拟机  ，  卸载  完成  后  需要  重新  启动  系统  。  
接下来  删除  “  X  ”  （  即  Windows  的  安装  目录  ，  Windows  2000  系统  为  Winnt  目录  ，  Windows  X  为  Windows  目录  ）  下  的  Java  文件夹  ；  “  X  \  inf  ”  下  的  java.pnf  文件  ，  以及  “  X  \  system32  ”  下  的  jview.exe  文件  和  wjview.exe  文件  。  最后  打开  注册表  编辑器  ，  依次  展开  [  HKEY_LOCAL_MACHINE  \  SOFTWARE  \  Microsoft  \  JavaVM  ]  分支  和  [  HKEY_LOCAL_MACHINE  \  SOFTWARE  \  Microsoft  \  Internet  Explorer  \  AdvancedOptions  \  JAVA_VM  ]  分支  ，  删除  这  两  个  分支  下  的  所有  子键  。  
提示  ：  以上  方法  不  适用  Windows  98  系统  。  
2．  重新  安装  Windows  XP  自带  的  IE6.0  
Windows  系统  的  IE  浏览器  漏洞  很多  ，  最  容易  出现  问题  。  有时  无法  解决  ，  就  只能  重新  安装  了  。  使用  Rundll32  命令  可以  很  轻松  地  完成  重新  安装  工作  。  我们  以  重新  安装  Windows  XP  中  的  IE6.0  为  例  ：  
首先  将  Windows  XP  光盘  插入  光驱  ，  然后  单击  “  开始  →  运行  ”  命令  ，  在  “  运行  ”  对话框  中  输入  “  Rundll32  setupapi  ,  InstallHinfSection  DefaultInstall  132  C  :  \  windows  \  inf  \  ie.inf  ”  命令  ，  回车  后  系统  会  打开  安装  进程  对话框  ，  开始  重新  安装  IE6.0  。  
提示  ：  如果  你  的  Windows  XP  系统  不  是  安装  在  C  盘  ，  请  将  “  C  ＼  Windows  ＼  Inf  ＼  Ie.inf  ”  修改  为  “  X  ＼  inf  ＼  ie.inf  ”  。  
3．  卸载  Windows  Messenger  
卸载  Windows  Messenger  的  方法  很多  ，  最  常用  的  就是  修改  “  Sysoc.inf  ”  文件  ，  但  此  方法  比较  复杂  ，  使用  Rundll32  命令  能  很  轻松  完成  卸载  ：  
首先  要  确保  已经  关闭  了  Outlook  和  IE  等  Windows  自带  的  组件  ，  然后  单击  “  开始  →  运行  ”  ，  在  “  运行  ”  对话框  中  输入  “  RunDll32  advpack.dll  ,  LaunchINFSection  X  \  inf  \  msmsgs.inf  ,  BLC.Remove  ”  命令  ，  回车  后  系统  会  打开  一个  卸载  对话框  ，  单击  “  是  （  Y  ）  ”  按钮  后  ，  系统  就  开始  卸载  Windows  Messenger  程序  。  
以上  只是  简单  介绍  如何  使用  Rundll32  命令  卸载  和  安装  Windows  程序  的  几  个  实例  ，  还有  很多  Windows  程序  的  安装  和  卸载  可以  使用  此  方法  ，  就  不再  详细  介绍  了  ，  请  大家  慢慢  体会  。  
数位  板  也  玩  多  点  触控  Wacom  推  Bamboo  系列  新品  
2009年  9月  24日  ，  世界  领先  的  数位  板  系统  和  笔  感应  式  数位  屏  系统  的  制造商  Wacom  公司  在  北京  隆重  举行  产品  发布会  ，  在  中国  市场  与  全球  同步  推出  最新  的  消费级  数位  板  Bamboo  系列  产品  。  该  系列  新  产品  创造性  地  把  多  点  触控  技术  和  世界  领先  的  笔  输入  技术  同时  融入  到  数位  板  产品  当中  ，  让  人们  通过  数位  板  不仅  能够  用  压感  笔  ，  而且  能  用  手指  来  操作  电脑  。  从而  以  更  自然  、  更  直观  、  更  人性  的  方式  与  电脑  进行  交互  ，  并  借助  最新  Bamboo  的  多  点  触控  和  笔  输入  功能  ，  获得  更  丰富  美妙  的  电脑  使用  体验  ，  享受  更  多  乐趣  。  
Wacom  Bamboo  系列  数位  板  
为了  能  让  数位  板  这种  曾经  是  专业  的  设计  工具  进一步  走近  普通  消费者  ，  让  他们  能  随心所欲  地  表达  自我  ，  丰富  他们  的  电脑  生活  ，  2007年  ，  Wacom  公司  在  全球  市场  同步  推出  面向  消费  市场  的  新  品牌  系列  产品  ——  Bamboo  ，  鼓励  广大  用户  借助  数位  板  ，  在  电脑  已  成为  人们  日常  工作  、  生活  的  重要  沟通  和  展示  平台  的  今天  ，  来  表达  自身  的  独特  风格  ，  展现  自己  个性  和  缤纷  创意  ，  留下  精彩  印记  ，  让  电脑  生活  更加  丰富多彩  。  
利用  Bamboo  ，  用户  用  一  根  手指  在  数位  板  上  轻  触  ，  就  可以  进行  选择  项目  、  打开  菜单  、  启动  应用  等  多种  操作  ；  也  可以  用  两  根  手指头  同时  触控  数位  板  ，  进行  滚动  和  快速  滚动  、  伸缩  、  导航  、  旋转  等  操作  ，  使  电脑  操作  更  轻松  惬意  。  对于  要求  更  高  精度  和  压力  感应  的  工作  ，  比如  绘画  、  修饰  数码  照片  ，  或者  是  批注  文件  ，  则  可以  使用  压感  笔  来  实现  。  从而  使得  我们  对  电脑  的  操作  有  了  更  多  的  选择  。  
Bamboo  新  产品  全面  融合  了  Wacom  公司  在  开发  直观  输入  设备  方面  的  丰富  经验  与  创新  实力  ，  不仅  在  功能  上  实现  了  里程碑式  的  重大  飞跃  ，  开创  了  数位  板  提供  多  点  触控  功能  的  先河  ，  同时  在  笔  输入  方面  继续  保持  Wacom  公司  领先  的  优势  ，  采用  了  Wacom  特有  的  无线  无  源  压感  笔  技术  ，  而且  在  外形  设计  上  以  最  具  时尚  潮流  趋势  的  超  轻  超薄  为  理念  ，  使得  Bamboo  更  时尚  、  更  精致  ，  让  人  爱不释手  。  
Bamboo  新  产品  系列  更  强调  人性化  设计  ，  全部  提供  能够  自定义  的  快捷键  ，  所有  快捷键  都  在  同一  侧  ，  而且  能  左右手  互换  ，  无论是  左手  用户  还是  右手  用户  ，  都  可以  根据  自己  的  习惯  ，  把  所有  的  快捷键  和  按键  都  设置  在  最  合适  的  一侧  ，  便于  非  优势  手  使用  。  同时  ，  数位  板  边缘  提供  了  完美  的  手腕  支撑  ，  让  用户  能够  轻松  地  长  时间  使用  ；  工作  区域  采用  宽屏  设计  ，  能  与  宽屏  显示器  以及  多  显示器  完美  配合  。  另外  ，  Bamboo  新  产品  把  外设  的  笔座  转换  成  了  挂  在  板子  右侧  的  笔插  ，  增强  了  实用性  和  时尚感  。  
Wacom  此次  推出  的  Bamboo  系列  产品  包括  了  五  款  新品  ，  分别  是  新  Bamboo  Fun  Small  （  小  幅面  ）  、  Bamboo  Fun  Medium  （  中等  幅面  ）  、  Bamboo  Pen&Touch  、  Bamboo  Pen  、  Bamboo  Touch  。  分别  针对  不同  用户  群  的  不同  应用  需求  而  开发  设计  。  并且  所有  产品  均  与  目前  流行  的  Windows  操作系统  和  Mac  操作系统  配合  ，  包括  Windows  XP  ,  Windows  Vista  (  with  SP2  )  ,  Mac  OS  10.4  or  later  。  
Oracle  数据库  密码  文件  的  使用  与  维护  
概要  ：  Oracle  关系  数据库  系统  以  其  卓越  的  性能  获得  了  广泛  的  应用  ，  而  保证  数据库  的  安全性  是  数据库  管理  工作  的  重要  内容  。  本文  是  笔者  在  总结  Oracle  数据库  安全  管理  工作  的  基础  上  ，  对  Oracle  数据库  系统  密码  文件  的  创建  、  使用  和  维护  作  了  详细  的  介绍  ，  供  大家  参考  。  
关键  词  ：  Oracle  数据库  密码  文件  
在  Oracle  数据库  系统  中  ，  用户  如果  要  以  特权  用户  身份  （  INTERNAL  ／  SYSDBA  ／  SYSOPER  ）  登录  Oracle  数据库  可以  有  两  种  身份  验证  的  方法  ：  即  使用  与  操作  系统  集成  的  身份  验证  或  使用  Oracle  数据库  的  密码  文件  进行  身份  验证  。  因此  ，  管理  好  密码  文件  ，  对于  控制  授权  用户  从  远端  或  本机  登录  Oracle  数据库  系统  ，  执行  数据库  管理  工作  ，  具有  重要  的  意义  。  
Oracle  数据库  的  密码  文件  存放  有  超级  用户  INTERNAL  ／  SYS  的  口令  及  其他  特权  用户  的  用户名  ／  口令  ，  它  一般  存放  在  ORACLE_HOME  ＼  DATABASE  目录  下  。  
一  、  密码  文件  的  创建  ：  
在  使用  Oracle  Instance  Manager  创建  一  数据库  实例  的  时侯  ，  在  ORACLE_HOME  ＼  DATABASE  目录  下  还  自动  创建  了  一个  与  之  对应  的  密码  文件  ，  文件名  为  PWDSID.ORA  ，  其中  SID  代表  相应  的  Oracle  数据库  系统  标识符  。  此  密码  文件  是  进行  初始  数据库  管理  工作  的  基础  在  此  之后  ，  管理员  也  可以  根据  需要  ，  使用  工具  ORAPWD.EXE  手工  创建  密码  文件  ，  命令  格式  如下  ：  
C  :  ＼  >  ORAPWDFILE  =  ＜  FILENAME  ＞  PASSWORD  =  ＜  PASSWORD  ＞  ENTRIES  =  <  MAX_USERS  >  
各  命令  参数  的  含义  为  ：  
FILENAME  ：  密码  文件名  ；  
PASSWORD  ：  设置  INTERNAL  ／  SYS  帐号  的  口令  ；  
MAX_USERS  ：  密码  文件  中  可以  存放  的  最  大  用户数  ，  对应  于  允许  以  SYSDBA  ／  SYSOPER  权限  登录  数据库  的  最  大  用户数  。  由于  在  以后  的  维护  中  ，  若  用户数  超出  了  此  限制  ，  则  需要  重建  密码  文件  ，  所以  此  参数  可以  根据  需要  设置  得  大  一些  。  
有  了  密码  文件  之后  ，  需要  设置  初始化  参数  REMOTE_LOGIN_PASSWORDFILE  来  控制  密码  文件  的  使用  状态  。  
二  、  设置  初始化  参数  REMOTE_LOGIN_PASSWORDFILE  ：  
在  Oracle  数据库  实例  的  初始化  参数  文件  中  ，  此  参数  控制  着  密码  文件  的  使用  及其  状态  。  它  可以  有  以下  几  个  选项  ：  
NONE  ：  指示  Oracle  系统  不  使用  密码  文件  ，  特权  用户  的  登录  通过  操作系统  进行  身份  验证  ；  
EXCLUSIVE  ：  指示  只有  一个  数据库  实例  可以  使用  此  密码  文件  。  只有  在  此  设置  下  的  密码  文件  可以  包含  有  除  INTERNAL  ／  SYS  以外  的  用户  信息  ，  即  允许  将  系统  权限  SYSOPER  ／  SYSDBA  授予  除  INTERNAL  ／  SYS  以外  的  其他  用户  。  
SHARED  ：  指示  可  有  多  个  数据库  实例  可以  使用  此  密码  文件  。  在  此  设置  下  只有  INTERNAL  ／  SYS  帐号  能  被  密码  文件  识别  ，  即使  文件  中  存有  其他  用户  的  信息  ，  也  不  允许  他们  以  SYSOPER  ／  SYSDBA  的  权限  登录  。  此  设置  为  缺省值  。  
在  REMOTE_LOGIN_PASSWORDFILE  参数  设置  为  EXCLUSIVE  、  SHARED  情况  下  ，  Oracle  系统  搜索  密码  文件  的  次序  为  ：  在  系统  注册库  中  查找  ORA_SID_PWFILE  参数  值  （  它  为  密码  文件  的  全  路径名  ）  ；  若  未  找到  ，  则  查找  ORA_PWFILE  参数  值  ；  若  仍  未  找到  ，  则  使用  缺省值  ORACLE_HOME  ＼  DATABASE  ＼  PWDSID.ORA  ；  其中  的  SID  代表  相应  的  Oracle  数据库  系统  标识符  。  
三  、  向  密码  文件  中  增加  、  删除  用户  ：  
当  初始化  参数  REMOTE_LOGIN_PASSWORDFILE  设置  为  EXCLUSIVE  时  ，  系统  允许  除  INTERNAL  ／  SYS  以外  的  其他  用户  以  管理员  身份  从  远端  或  本机  登录  到  Oracle  数据库  系统  ，  执行  数据库  管理  工作  ；  这些  用户名  必须  存在  于  密码  文件  中  ，  系统  才能  识别  他们  。  由于  不管  是  在  创建  数据库  实例  时  自动  创建  的  密码  文件  ，  还是  使用  工具  ORAPWD.EXE  手工  创建  的  密码  文件  ，  都  只  包含  INTERNAL  ／  SYS  用户  的  信息  ；  为此  ，  在  实际  操作  中  ，  可能  需要  向  密码  文件  添加  或  删除  其他  用户  帐号  。  
由于  仅  被  授予  SYSOPER  ／  SYSDBA  系统  权限  的  用户  才  存在  于  密码  文件  中  ，  所以  当  向  某  一  用户  授予  或  收回  SYSOPER  ／  SYSDBA  系统  权限  时  ，  他们  的  帐号  也  将  相应  地  被  加入  到  密码  文件  或  从  密码  文件  中  删除  。  由此  ，  向  密码  文件  中  增加  或  删除  某  一  用户  ，  实际上  也  就是  对  某  一  用户  授予  或  收回  SYSOPER  ／  SYSDBA  系统  权限  。  
要  进行  此  项  授权  操作  ，  需  使用  SYSDBA  权限  （  或  INTERNAL  帐号  ）  连入  数据库  ，  且  初始化  参数  REMOTE_LOGIN_PASSWORDFILE  的  设置  必须  为  EXCLUSIVE  。  具体  操作  步骤  如下  ：  
创建  相应  的  密码  文件  ；  
设置  初始化  参数  REMOTE_LOGIN_PASSWORDFILE  ＝  EXCLUSIVE  ；  
使用  SYSDBA  权限  登录  ：  CONNECTSYS  ／  internal_user_passswordASSYSDBA  ；  
启动  数据库  实例  并  打开  数据库  ；  
创建  相应  用户  帐号  ，  对  其  授权  （  包括  SYSOPER  和  SYSDBA  ）  ：  授予  权限  ：  GRANTSYSDBATOuser_name  ；  
收回  权限  ：  REVOKESYSDBAFROMuser_name  ；  
现在  这些  用户  可以  以  管理员  身份  登录  数据库  系统  了  ；  
四  、  使用  密码  文件  登录  ：  
有  了  密码  文件  后  ，  用户  就  可以  使用  密码  文件  以  SYSOPER  ／  SYSDBA  权限  登录  Oracle  数据库  实例  了  ，  注意  初始化  参数  REMOTE_LOGIN_PASSWORDFILE  应  设置  为  EXCLUSIVE  或  SHARED  。  任何  用户  以  SYSOPER  ／  SYSDBA  的  权限  登录  后  ，  将  位于  SYS  用户  的  Schema  之下  ，  以下  为  两  个  登录  的  例子  ：  
1.  以  管理员  身份  登录  ：  
假设  用户  scott  已  被  授予  SYSDBA  权限  ，  则  他  可以  使用  以下  命令  登录  ：  
CONNECTscott  ／  tigerASSYSDBA  
2.  以  INTERNAL  身份  登录  ：  
CONNECTINTERNAL  ／  INTERNAL_PASSWORD  
五  、  密码  文件  的  维护  ：  
1.  查看  密码  文件  中  的  成员  ：  
可以  通过  查询  视图  V$PWFILE_USERS  来  获取  拥有  SYSOPER  ／  SYSDBA  系统  权限  的  用户  的  信息  ，  表  中  SYSOPER  ／  SYSDBA  列  的  取值  TRUE  ／  FALSE  表示  此  用户  是否  拥有  相应  的  权限  。  这些  用户  也  就是  相应  地  存在  于  密码  文件  中  的  成员  。  
2.  扩展  密码  文件  的  用户  数量  ：  
当  向  密码  文件  添加  的  帐号  数目  超过  创建  密码  文件  时  所  定  的  限制  （  即  ORAPWD.EXE  工具  的  MAX_USERS  参数  ）  时  ，  为  扩展  密码  文件  的  用户数  限制  ，  需  重建  密码  文件  ，  具体  步骤  如下  ：  
a  )  查询  视图  V$PWFILE_USERS  ，  记录  下  拥有  SYSOPER  ／  SYSDBA  系统  权限  的  用户  信息  ；  
b  )  关闭  数据库  ；  
c  )  删除  密码  文件  ；  
d  )  用  ORAPWD.EXE  新建  一  密码  文件  ；  
e  )  将  步骤  a  中  获取  的  用户  添加  到  密码  文件  中  。  
3.  修改  密码  文件  的  状态  ：  
密码  文件  的  状态  信息  存放  于  此  文件  中  ，  当  它  被  创建  时  ，  它  的  缺省  状态  为  SHARED  。  可以  通过  改变  初始化  参数  REMOTE_LOGIN_PASSWORDFILE  的  设置  改变  密码  文件  的  状态  。  当  启动  数据库  事例  时  ，  Oracle  系统  从  初始化  参数  文件  中  读取  REMOTE_LOGIN_PASSWORDFILE  参数  的  设置  ；  当  加载  数据库  时  ，  系统  将  此  参数  与  口令  文件  的  状态  进行  比较  ，  如果  不同  ，  则  更新  密码  文件  的  状态  。  若  计划  允许  从  多  台  客户机  上  启动  数据库  实例  ，  由于  各  客户机  上  必须  有  初始化  参数  文件  ，  所以  应  确保  各  客户机  上  的  初始化  参数  文件  的  一致性  ，  以  避免  意外  地  改变  了  密码  文件  的  状态  ，  造成  数据库  登陆  的  失败  。  
4.  修改  密码  文件  的  存储  位置  ：  
密码  文件  的  存放  位置  可以  根据  需要  进行  移动  ，  但  作  此  修改  后  ，  应  相应  修改  系统  注册库  有关  指向  密码  文件  存放  位置  的  参数  或  环境  变量  的  设置  。  
5.  删除  密码  文件  ：  
在  删除  密码  文件  前  ,  应  确保  当前  运行  的  各  数据库  实例  的  初始化  参数  REMOTE_LOGIN_PASSWORDFILE  皆  设置  为  NONE  。  在  删除  密码  文件  后  ，  若  想  要  以  管理员  身份  连入  数据库  的话  ，  则  必须  使用  操作系统  验证  的  方法  进行  登录  。  
Google  Wave  将  问世  
Google  在  旧金山  举行  的  年度  开发  人员  会议  上  发布  了  有关  Wave  的  讯息  。  据  了解  ，  该  公司  指出  他们  有  一个  小  工程师  团队  已经  执行  Wave  计画  有  一两  年  了  。  Google  现在  要  将  Wave  开放  给  开发  人员  ，  并且  提供  “  开发  工具  ”  与  “  应用  软件  ”  来  和  它  互动  (  它  基本上  是  开放  源码  )  。  而  一般  大众  得  等到  今年  年底  ，  才  有  机会  享受  到  这项  应用  系统  。  
较  早  的  报导  将  Wave  描绘  成  一  套  通讯  与  协同  合作  的  工具  ，  但是  它  的  设计  本身  透露  出  将  会  包含  更  多  的  功能  。  它  结合  了  我们  在  过去  一两  年  在  网路  上  所  见到  的  许多  趋势  ，  成为  一个  单一  的  应用  。  
从  社交  网站  的  兴起  ，  我们  可以  看到  串流  、  即时  、  internet  应用  软体  开始  流行  的  趋势  ;  对  一般  大众  而言  ，  Wave  代表  了  Google  对  这个  趋势  所  做  的  回应  。  应用  “  串流  ”  最好  的  例子  ，  就是  某个  Twitter  主页  或是  Facebook  上  的  信息  顺着  页面  往  下  流动  ，  使用者  不仅  可以  随意  一一  浏览  ，  也  可以  针对  某  一  条  信息  发表  意见  ，  和  朋友  分享  ，  或是  不  理会  它  ，  让  它  顺着  页面  往  下  洗  。  
Wave  似乎  要  以  电子  邮件  和  讯息  做为  拥抱  这种  串流  介面  的  开端  。  Wave  主页  在  页面  上  包含  了  短信  (  如  Twitter  )  、  大型  使用者  群组  沟通  (  如  Facebook  )  以及  基本  的  协同  合作  工具  ，  来  对  内容  进行  动作  (  如  即时  通讯  与  电子  邮件  )  。  
使用者  所  分享  的  资讯  可以  是  静态  的  ，  例如  电子  邮件  信息  ，  以及  对  该  邮件  的  讨论  ，  也  可以  是  动态  的  ，  如  活动  邀请  -  可以  包含  一  份  可能  参加  那个  活动  的  朋友  的  名单  ，  以及  该  活动  地点  所在  的  Google  地图  。  如果  你  是  后来  才  被  邀请  加入  某个  Wave  讨论串  ，  你  可以  点击  “  回覆  ”  ，  接着  就  可以  赶上  你  之前  所  没  看到  的  讨论  对话  了  -  就  像  是  对  网页  内容  做  Tivo  数位  录影  一样  。  长远  而言  ，  Google  打算  让  Wave  能够  和  其他  的  网站  互动  。  
Wave  不  会  要求  你  的  朋友  对  某个  特定  的  网路  服务  保持  忠诚度  ;  它  的  设计  旨在  结合  来自  Internet  各处  的  内容  。  因为  Wave  将  会  有  其  自己  的  文字  编辑器  ，  并且  能  让  你  轻松  容易  地  上传  多媒体  内容  ，  所以  有人  猜想  它  会  不  会  吞食  掉  一些  核心  网路  服务  (  甚至  是  一些  Google  自己  的  网路  服务  ，  如  Google  文件  或  Picasa  等  )  。  不过  现在  要  判断  它  是  不  是  会  先进  到  能  使  人们  把  那些  应用  软体  甩掉  ，  或  甚至  只是  产生  威胁  ，  还  言  之  过早  。  
既然  Wave  是  开放  程序  其他  有名  的  网路  应用  (  如  Twitter  )  ，  也  可以  很  容易  地  成为  Wave  体验  的  一部分  。  
最后  ，  Wave  最  大  的  资产  ，  可能  是  这些  资讯  能够  和  Google  的  核心  商品  ─  “  搜索  ”  结合  ，  而  Facebook  之类  的  社交  网路  服务  可以  让  使用者  分享  信息  ，  而  在  这些  网路  服务  里  找  出  些  可能  的  应用  ，  则  会  激发  出  更  多  其他  的  可能  。  
Google  Wave  如何  帮助  我们  工作  ?  
对  企业  用户  而言  ，  各  公司  正  迫切  需要  着  某种  像  Wave  般  的  技术  ，  以  帮助  其  员工  更为  流畅  地  协同  工作  。  无奈  大部分  的  企业  仍  因为  其  现有  的  技术  架构  ，  还要  好几  年  的  转换  时间  ，  才  有  可能  切换  到  这  类  的  资讯  流动  模式  。  
想  要  企业  以及  为  企业  所  设计  的  软体  赶上  串流  应用  的  革新  ，  还  得  要  花  上  一  段  好  长  的  时间  。  今天  员工  们  还是  得  在  一  堆  “  回覆  所有  人  ”  的  信件  中  ，  摸索  着  做  群组  分享  讨论  。  
使用  如  Wave  之类  的  技术  ，  使用者  能够  用  一  种  更  炫  的  方式  ，  选择  他们  所  想  要  一起  分享  内容  的  群组  或  个人  。  而  因为  分享  的  内容  是  置放  在  网路  上  的  ，  他们  也  能够  即时  更新  。  
如  socialtext  之类  的  新型  企业  技术  供应商  ，  已经  将  其  借  网路  同工  的  应用  ，  设计  成  可以  使用  像  串流  之类  格式  的  资料  ，  让  使用者  能够  编辑  wiki  和  分享  Twitter  的  短讯  。  有些  公司  已经  采用  了  这样  的  技术  ，  不过  要  让  多数  的  公司  企业  拥抱  这样  的  模式  ，  可能  还要  再  等  上  个  好几  年  。  
Google  应该  会  也  多半  会  试  着  将  Wave  整合  到  Google  应用  服务  中  。  Google  应用  服务  是  Google  的  商用  软体  ，  包括  G  mail  、  日历  、  文件  、  试算表  与  即时  通讯  …  等  项目  。  如果  他们  能够  让  使用者  利用  Wave  和  商业  内容  互动  的话  ，  便  能  更  增加  这项  产品  在  企业  技术  买家  眼中  的  价值  。  
数据  中心  绿色  布线  方案  之  美国  泛达  PANDUIT  
由于  预算  限制  和  逐步  升高  的  能源  成本  ，  数据  中心  的  管理者  被迫  考虑  所有  可行  的  散热  方案  ，  以  提高  运行  效率  和  维持  业务  连续性  。  基于  统一  物理  层  基础  设施  (  UPI  )  的  冷却  解决  方案  ，  作为  应对  高热  负载  可靠  、  经济  和  环保  的  选择  ，  在  数据  中心  中  不断  得到  应用  。  
美国  泛达  对  数据  中心  空间  的  专业  知识  和  确定  客户  要求  的  咨询式  方法  ，  可以  提供  优化  数据  中心  散热  效率  的  物理  层  基础  设施  解决  方案  。  美国  泛达  基于  UPI  的  数据  中心  解决  方案  包括  散热  管理  系统  、  高速  数据  传输  (  HSDT  )  系统  、  机柜  系统  和  物理  层  基础  设施  管理  软件  。  该  独特  解决  方案  使得  企业  可以  自信  地  实现  更  广泛  的  业务  目标  。  
2009年  ，  美国  泛达  发布  了  包括  Panview  IQ  物理  层  智能  管理  系统  、  架空  地板  密封  套件  、  物理  连接  安全  组件  、  GridRunner  网格式  桥  架  走线  系统  等  全新  产品  系列  ，  并  提出  了  建设  集  灵活性  、  安全性  、  可用性  为  一体  的  数据  中心  解决  方案  。  
新  方案  的  独到之处  在于  整体  考虑  了  数据  中心  的  设计  和  效率  ，  可以  较  好  地  平衡  能耗  、  散热  及  合理  设计  布线  基础  设施  ，  确保  数据  中心  的  可靠性  、  互操作性  和  可扩展性  。  这种  整体  方法  造就  了  统一  的  物理  层  基础  设施  ，  使  之  全面  覆盖  能源  、  控制  、  计算  、  通信  和  安全  系统  。  
1.  科学  的  冷热  循环  
保证  数据  中心  机房  拥有  科学  的  冷热  对流  ，  合理  地  利用  冷空气  ，  将  暖空气  正确  地  排出  ，  可以  大量  节省  数据  中心  制冷  带来  的  能源  消耗  。  
美国  泛达  提供  了  CoolBoot  架空  地板  开孔  封堵  装置  ，  专  为  封堵  架空  地板  上  的  出线孔  而  设计  。  系统  可以  避免  架空  地板  下  的  冷风  通过  出线孔  散  出  ，  确保  冷风  能够  更  多  地  被  网络  设备  吸收  和  利用  ，  同时  数据  中心  内  冷热  通道  的  完整性  得到  保持  和  提升  。  
2.  合理  规划  架空  地板  下  的  数据  和  电源  线缆  
在  机房  内  ，  经常  因为  地板  下方  空间  内  线缆  的  随意  摆放  、  堆积  而  影响  冷空气  的  正常  流动  。  同时  ，  合理  的  综合  接地  设计  可以  保护  设备  的  物理  安全  。  
美国  泛达  GridRunner  网格式  走线  系统  主要  用于  管理  、  支持  和  规划  数据  中心  内  架空  地板  下  的  数据  线缆  和  电源  线缆  ，  避免  地板  下方  空间  由于  线缆  的  随意  摆放  、  堆积  而  影响  冷空气  的  正常  流动  。  
GridRunner  系统  采用  金属  材料  制造  ，  坚固  耐用  ，  配合  架空  地板  支架  固定件  ，  可以  简单  快速  地  将  其  部署  于  架空  地板  下方  。  综合  接地  系统  设计  无需  为  系统  安装  额外  的  接地  系统  ，  节省  了  时间  和  经费  。  针对  不同  的  路径  线缆  数量  ，  GridRunner  可  提供  四  种  规格  尺寸  。  除此之外  ，  GridRunner  还  为  线缆  提供  了  充足  的  弯曲  半径  保护  ，  维护  了  线缆  的  传输  性能  ，  保证  信息  传输  的  完整性  。  
架空  布线  可以  通过  在  所有  的  机架  与  机柜  上部  加上  一个  爬梯  来  实现  。  安装  于  爬梯  上  的  线缆  固定件  为  永久性  的  水平  布线  系统  提供  了  一个  清晰  、  可  管理  的  路径  。  模块化  光纤  路由  系统  安装  在  爬梯  下方  ，  这  不仅  为  机架  与  机柜  之间  的  光纤  布线  提供  了  一个  专用  路径  ，  也  可以  为  任何  介质  类型  的  临时  布线  系统  提供  路径  。  高  密度  的  机架  与  线缆  管理  系统  被  用于  主要  的  配  线  区域  ，  该  区域  安装  角型  24  口  配线架  以  在  尽可能  小  的  面积  里  容纳  最  大  数量  的  连接点  ，  同时  也  可以  在  同一个  架体  内  容纳  核心  交换  设备  和  跳插线  系统  。  
3.  保证  系统  数据  安全  
如何  帮助  IT  人员  提高  系统  的  安全性  ，  防止  意外  事件  的  发生  ，  目前  也  得到  了  布线  系统  厂商  的  高度  关注  。  
在  美国  泛达  提出  的  物理  安全  解决  方案  中  ，  包括  了  警示  标签  标识  、  安全  锁  、  RJ45  插座  塞  以及  RJ45  跳线  锁定  装置  等  。  RJ45  插座  塞  可  用于  所有  RJ45  插座  ，  插入  时  不  接触  信息  插座  内  的  金针  。  系统  用于  阻塞  未  使用  的  端口  ，  防止  未经  授权  的  接入  ，  也  可  用于  临时  的  端口  标识  。  插座  塞  安装  和  移除  不  影响  相邻  端口  。  插座  塞  的  移除  需要  使用  专用  工具  ，  这样  可  提高  整个  网络  的  安全性  。  RJ45  跳线  锁定  装置  用于  锁定  于  配线架  、  网络  设备  、  IP  电话  或  IP  摄像机  相连  的  RJ45  跳线  。  它  带有  独特  的  锁定  和  解锁  工具  ，  防止  人员  未经  授权  或  误  操作  将  关键  跳线  拆除  。  
实时  控制  物理  层  的  设备  是  当今  数据  中心  不可或缺  的  功能  。  PViQ  智能  物理  层  管理  系统  是  美国  泛达  现有  PanView  系统  的  升级  。  PViQ  可以  全天候  实时  监测  配线架  端口  的  连接  信息  。  结合  图形化  界面  ，  PViQ  可以  帮助  IT  人员  准确  了解  物理  网络  的  连接  构成  ，  生成  系统  文档  。  此外  ，  对于  未经  授权  和  意外  的  系统  连接  或  中断  ，  系统  可  自动  生成  提示  和  报警  ，  并  及时  反馈  给  网管  人员  。  另外  ，  系统  支持  工作  任务  的  创建  和  分配  ，  指导  现场  维护  人员  进行  无  差错  的  操作  。  PViQ  的  软件  采用  Java  语言  编写  ，  运行  MySQL  数据库  ，  可  在  Windows  XP  环境  下  运行  。  整个  系统  兼容性  更  好  、  费用  更  低  。  
美国  泛达  是  网络  布线  行业  率先  在  全球  范围  内  推广  客户  体验  中心  的  公司  ，  并  一直  采取  先  培育  市场  、  再  推广  品牌  的  战略  ，  可见  美国  泛达  非常  重视  对  市场  的  培育  和  与  用户  的  互动  。  在  中国  ，  美国  泛达  不仅  已  于  2006年  在  上海  成立  了  客户  体验  中心  ，  并且  计划  将  这  套  经验  移植  到  北京  、  广州  、  成都  ，  配合  原有  的  销售  办事处  。  同时  ，  在  中国  ，  美国  泛达  建立  了  领先  的  联盟  阵容  (  比如  与  思科  、  APC  等  公司  的  合作  )  ，  为  用户  提供  一体化  基础  设施  方案  。  
菜鸟  到  高手  ——  多年  总结  的  电脑  使用  小  技巧  
一  、  Win  XP  下  磁盘  格式  转换  高招  
安装  的  Win  XP  在  使用  过程  中  系统  很  不  稳定  ，  经常  死机  ，  动不动  就  蓝屏  。  经过  判断  ，  问题  可能  出现  在  磁盘  格式  上  。  打开  电脑  C  盘  的  属性  一  看  ，  磁盘  格式  为  FAT16  (  稳定  才  怪  呢  )  。  
重要  的  得  把  磁盘  格式  转换  过来  呢  ，  这里  就  出现  麻烦  了  。  属性  里  的  格式化  肯定  是  不行  了  ，  C  盘  是  系统  盘  ，  里面  的  东西  可  动  不  得  ；  格式化  重  装  又  未免  有点  小题大做  了  ；  于是  就  用  大名鼎鼎  的  PQMagic  。  重启  进入  PQMagic  后  却  发现  “  FAT-FAT32  、  FAT-NTFS  ”  皆  为  不可  选  ！  
碰见  这样  的  情况  怎么  解决  呢  ？  其实  从  Windows  2000  开始  ，  系统  中  便  自带  了  “  用  控制台  命令  CONVERT  ”  来  帮  你  进行  磁盘  属性  的  转换  ！  只  需要  在  运行  里  输入  “  CMD  ”  进入  控制台  ，  输入  convert  /  ?  ，  回车  后  就  会  看到  对  此  命令  的  简单  介绍  ，  稍  有  经验  的  用户  都  能  轻松  掌握  。  
遇见  这种  情况  ，  我们  可以  输入  convert  c  :  /  fs  :  ntfs  回车  ，  系统  会  提示  在  当前  状态  下  无法  完成  ，  这时  要  重新  启动  。  输入  “  Y  ”  ，  然后  Win  XP  会  自动  关机  ，  在  重启  两  次  以后  ，  再  看  C  盘  的  属性  ，  已经  是  NTFS  了  ！  整个  过程  还  不  到  4  分钟  (  转换  过程  需要  的  时间  与  硬盘  大小  和  计算机  配置  有关  )  ！  
二  、  在  WinXP  中  阻止  访问  
作为  一  名  单位  的  电脑  用户  ，  你  不  希望  同事  动用  你  的  电脑  ，  或者  说  某  一个  驱动器  上  的  文件  不  希望  同事  看到  ，  那么  下面  就  介绍  两  种  在  WinXP  中  阻止  访问  或  隐藏  指定  的  驱动器  的  方法  ，  或许  对  你  有用  。  
1.  利用  WinXP  “  组  策略  ”  阻止  访问  指定  的  驱动器  
单击  “  开始  →  运行  ”  ，  在  弹出  的  “  运行  ”  对话框  中  输入  “  gpedit.msc  ”  即可  打开  “  组  策略  ”  。  在  窗口  的  左边  依次  打开  “  用户  配置  →  管理  模板  →  Windows  组件  →  Windows  资源  管理器  ”  ，  在  右边  的  窗口  中  会  出现  “  防止  从  ‘  我  的  电脑  ’  访问  驱动器  ”  的  设置项  。  在  该  设置项  上  双击  鼠标  ，  在  弹出  的  “  防止  从  ‘  我  的  电脑  ’  访问  驱动器  属性  ”  对话框  中  选  “  已  启用  ”  复选项  ，  在  下面  的  “  选择  下列  组合  中  的  一个  ”  后面  的  下拉  列表  中  选择  一个  驱动器  或  几  个  驱动器  。  单击  “  确定  ”  即可  。  这样  其他  用户  就  无法  查看  “  我  的  电脑  ”  或  “  资源  管理器  ”  中  你  所  要  阻止  访问  的  驱动器  的  内容  。  这些  被  阻止  访问  的  驱动器  的  图标  仍旧  会  出现  在  “  我  的  电脑  ”  或  “  资源  管理器  ”  中  ，  但是  如果  用户  双击  图标  或  在  “  运行  ”  对话框  中  输入  被  阻止  访问  的  驱动器  的  盘符  并  单击  “  确定  ”  时  会  弹出  一个  对话框  提示  “  本次  操作  由于  这  台  计算机  的  限制  而  被  取消  。  请  与  你  的  系统  管理员  联系  ”  从而  阻止  这  一  操作  进行  。  
提示  ：  如果  允许  访问  所有  的  驱动器  目录  ，  请  将  上面  的  这项  设置  设  为  “  已  禁用  ”  或  “  未  配置  ”  或  从  下拉  列表  中  选择  “  不  限制  驱动器  ”  选项  。  
这项  策略  被  启用  后  ，  用户  仍  可以  通过  使用  其他  的  方式  来  继续  访问  这些  被  阻止  访问  的  驱动器  的  内容  。  例如  在  命令  提示符  窗口  中  输入  C  :  (  假设  C  盘  被  配置  为  阻止  访问  )  ，  然后  回车  ，  再  输入  dir  /  p  /  w  (  /  p  表示  按  页  显示  ，  /  w  表示  每  行  显示  五  个  文件  或  文件夹  )  ，  就  可  对  C  盘  进行  浏览  。  另外  这项  策略  不  会  阻止  用户  使用  其他  的  程序  来  访问  这些  被  阻止  访问  的  驱动器  或  其  内容  ，  例如  ：  WinXP  自带  的  “  磁盘  清理  ”  和  “  磁盘  碎片  整理  程序  ”  等  。  并且  也  不  会  阻止  用户  使用  “  磁盘  管理  ”  (  控制  面板  →  管理  工具  →  计算机  管理  快捷  方式  ，  打开  计算机  管理  ，  再  选  存储  →  磁盘  管理  )  来  查看  并  更改  这些  被  阻止  访问  的  驱动器  的  特性  。  
三  、  WinRAR  使用  技巧  二  则  
1.  让  加密  文件  更  安全  
为了  保护  个人  的  隐私  和  重要  数据  ，  WinRAR  提供  了  加密  的  功能  。  但  随着  CPU  频率  的  迅速  提升  ，  破解  压缩包  的  密码  也  变  得  越来越  容易  ，  只要  机器  够  快  和  肯  多  花  些  时间  ，  从  理论  上  说  任何  密码  都  有  可能  被  攻破  。  因此  ，  为了  加大  破解者  破解  的  难度  ，  最好  能  把  要  加密  文件  的  文件名  也  列入  加密  范围  。  方法  如下  ：  首先  在  WinRAR  的  主  界面  点击  “  添加  ”  按钮  ，  建立  一个  新  的  压缩包  ，  然后  在  弹出  的  窗口  上  ，  选择  “  文件  ”  选项  卡  ，  并  选定  要  添加  到  压缩包  的  文件  ；  接下来  转换  到  “  高级  ”  选项  卡  上  ，  单击  “  设置  密码  …  ”  按钮  ，  输入  密码  ，  并  选中  “  加密  文件名  ”  一  项  ，  最后  点击  “  确定  ”  即可  。  
2.  避免  反复  输入  密码  
当  我们  用  WinRAR  打开  一个  加密  的  ZIP  压缩包  ，  并  执行  里面  的  文件  时  ，  会  发现  它  与  WinZip  不同  。  WinZip  只  在  打开  第一  个  文件  的  时候  要求  输入  密码  ，  只要  一  次  通过  了  密码  验证  ，  以后  就  可以  直接  查看  压缩包  里面  的  其他  文件  ；  WinRAR  却  不  是  这样  ，  每  一  次  执行  ZIP  压缩包  里  的  程序  时  ，  它  都  要  询问  密码  ，  当  文件  较  多  时  ，  让  人  觉得  很  麻烦  。  
其实  ，  WinRAR  也  提供  了  类似  WinZip  这样  的  功能  ，  使用  起来  也  很  方便  ，  只要  在  打开  加密  的  压缩包  以后  ，  用  鼠标  点击  “  文件  ”  菜单  里  的  “  密码  ”  项  ，  并且  输入  正确  的  密码  ，  就  可以  解决  问题  了  。  
四  、  管理  好  系统  自启动  的  程序  
很多  应用  程序  的  作者  ，  总是  喜欢  将  程序  设计  成  安装  后  随  系统  启动  而  自动  启动  。  如果  用户  习惯  了  这  类  应用  程序  的  “  一路  回车  ”  默认  安装法  而  不  进行  设置  的话  ，  则  将  导致  系统  中  自动  启动  的  应用  程序  越来越  多  ，  不但  会  造成  启动  的  过程  变  长  ，  而且  造成  系统  资源  极大  的  浪费  。  
为了  系统  的  高效  运行  ，  一般而言  ，  我们  只  随  系统  启动  基本  程序  ，  而  那些  不  是  每次  开机  都  使用  的  应用  程序  ，  我们  一般  要  禁止  它们  自动  启动  ，  当  要  使用  时  再  手工  启动  。  下面  我们  谈谈  在  Windows  98  中  如何  管理  自启动  程序  。  首先  我们  来  看看  自启动  程序  的  加载  方式  
1.  通过  系统  配置  文件  和  自动  批处理  文件  加载  
CONFIG.SYS  (  系统  配置  文件  )  和  AUTOEXEC.BAT  (  自动  批处理  文件  )  是  系统  启动  时  最先  运行  的  两  个  文件  ，  也  是  我们  认识  得  最  早  的  两  个  文件  。  如果  你  是  从  DOS  时代  过来  的  人  ，  对  这  两  个  文件  不  可能  不  熟悉  ！  用  任何  文字  编辑  软件  (  比如  记事本  )  就  可以  打开  这  两  个  文件  进行  编辑  。  不过  ，  在  目前  的  图形化  操作  系统  中  ，  通过  这  两  个  文件  加载  自启动  程序  的  已经  不  多  见  了  。  
2.  通过  初始化  文件  加载  
Windows  在  操作  系统  的  安装  目录  下  有  两  个  重要  的  初始化  文件  ：  Win.ini  和  System.ini  。  在  Windows  启动  过程  中  ，  可以  通过  这  两  个  文件  加载  自启动  程序  ，  在  Win.ini  文件  [  windows  ]  字段  中  有  两  个  启动  命令  ：  “  load  =  ”  和  “  run  =  ”  。  一般  情况  下  它们  的  后面  没有  内容  ，  如果  你  用  文本  编辑器  (  比如  记事本  )  打开  后  看到  了  比如  “  run  =  c  :  \  windows  \  xxx.exe  ”  或者  “  load  =  c  :  \  windows  \  xxx.exe  ”  ，  这里  的  xxx.exe  就是  自启动  程序  了  。  在  System.ini  的  [  boot  ]  字段  下  有  “  Shell  =  Explorer.exe  ”  ，  有些  恶意  程序  或  木马  程序  就是  通过  修改  此处  加载  的  ，  比如  修改  成  “  shell  =  Explorer.exe  xxx.exe  (  xxx  是  具体  运行  程序  的  主  文件名  ，  文件名  还  可以  是  其他  类型  的  可  执行  文件  )  。  
3.  通过  “  启动  ”  菜单  或  “  Startup  ”  菜单  
最  直接  也  最  简单  的  一  种  加载  自启动  程序  的  方法  ，  就是  将  应用  程序  的  快捷  方式  添加  到  “  开始  →  程序  →  启动  ”  (  或许  还有  “  Startup  ”  )  中  ，  当  系统  启动  时  ，  “  启动  ”  组  中  的  程序  就  会  自动  启动  。  
另外  ，  Winstar.bat  也  是  一个  能  被  Windows  9X  系统  自动  运行  的  文件  ，  它  可以  人为  创建  。  如果  你  要  查找  自启动  程序  ，  请  不要  忽略  了  该  文件  是否  存在  以及  它  的  具体  内容  。  
4.  通过  系统  注册表  加载  
利用  注册表  加载  自启动  程序  是  目前  应用  程序  最  常  采用  的  方法  。  一般说来  ，  在  注册表  中  加载  应用  程序  的  最  常见  的  两  个  分支  是  ：  HKEY_CURRENT_USER  \  Software  \  Microsoft  \  Windows  \  CurrentVersion  \  Run  和  HKEY_LOCAL_MACHINE  \  Software  \  Microsoft  \  Windows  \  CurrentVersion  \  Run  。  
应用  程序  在  安装  时  ，  通过  修改  注册表  的  上述  两  个  分支  的  内容  ，  即可  让  程序  自动  启动  。  目前  的  防火墙  程序  、  实时  病毒  监控  程序  等  均  是  采用  该  方法  加载  的  。  
下面  我们  讲讲  怎样  将  应用  程序  设置  为  自动  启动  和  怎样  禁止  不  必要  的  启动  程序  。  
1.  将  应用  程序  设置  为  自动  启动  
简单  的  方法  就是  在  “  开始  →  程序  →  启动  ”  群组  中  添加  一个  快捷  方式  （  启动  这个  应用  程序  的  快捷  方式  ）  。  具体  方法  如下  ：  
右击  该  应用  程序  的  可  执行  文件  ，  选择  “  创建  快捷  方式  ”  ，  然后  在  创建  的  快捷  方式  中  点  右键  ，  选  “  复制  ”  ，  接着  打开  “  开始  →  程序  →  启动  ”  ，  将  创建  的  快捷  方式  复制  到  “  启动  ”  组  中  即可  。  
当然  也  可以  通过  注册表  加载  。  假如  我们  的  目的  是  将  C  :  \  NETANTS  \  NETANTS.EXE  （  网络  蚂蚁  ）  做成  自启动  程序  。  方法  是  编辑  一个  注册表  文件  ，  方法  如下  ：  
首先  进入  注册表  编辑器  （  用  Regedit  命令  ）  ，  然后  找到  并  打开  HKEY_LOCAL_MACHINE  \  SOFTWARE  \  Microsoft  \  Windows  \  CurrentVersion  \  Run  分支  ，  在  右侧  框  的  空白处  单击  右键  ，  出现  “  新建  ”  ，  选择  “  字串  值  ”  ；  然后  将  其  名称  由  “  新  值  #  1  ”  改为  “  NetAnts  ”  ；  接着  选中  该  名称  ，  单击  右键  ，  选  “  修改  ”  （  也  可  双击  左键  ）  ，  在  编辑  字符串  窗口  的  “  数值  数据  ”  中  输入  “  C  :  \  NETANTS  \  NETANTS.EXE  ”  ，  然后  按  “  确定  ”  ，  再  退出  注册表  编辑  程序  即可  。  
2.  禁止  不  必要  的  自启动  程序  
所有  已经  启动  的  应用  程序  都  要  占用  系统  资源  ，  所以  启动  那些  并  不  使用  的  应用  程序  就是  一  种  资源  的  浪费  。  特别  是  对于  配置  较  低  的  计算机  ，  节省  系统  资源  能够  提高  整个  系统  的  稳定性  。  为此  ，  我们  有  必要  对  自动  启动  的  应用  程序  进行  控制  。  方法  如下  ：  
在  “  开始  →  运行  ”  中  键入  “  Msconfig  ”  ，  点击  “  确定  ”  按钮  ，  出现  系统  配置  实用  程序  ，  选  启动  标签  ，  在  不  需要  启动  的  项目  前  取消  对钩  。  最好  的  方法  是  点击  全部  禁用  ，  这样  你  的  系统  运行  速度  将  会  快  很多  。  
五  、  杀毒  环境  有  讲究  
病毒  是  这些  年  遇到  的  最  多  的  问题  ，  很多  玩家  认为  杀毒  要  借助  杀毒  软件  ，  但  不  是  说  一  点  “  杀毒  ”  按钮  就  万事大吉  了  。  针对  不同  特性  的  病毒  ，  我们  应该  选择  相应  的  系统  环境  ，  否则  杀毒  软件  就是  “  草包  ”  。  （  虽然  如此  ，  但  本人  一直  以来  认为  杀毒  软件  就是  懵人  的  东东  。  ）  
1  、  非  系统  文件  病毒  
杀  这种  病毒  相对  容易  ，  一般  在  Windows  环境  下  就  能  被  “  全歼  ”  。  
2  、  已  激活  的  非  系统  文件  病毒  
虽然  现在  的  反  病毒  软件  都  声称  能  查  杀  内存  病毒  ，  但  此  技术  还  未  臻  完善  ，  效果  可能  达  不  到  预期  。  因此  ，  推荐  杀  此类  病毒  应  在  安全  模式  下  进行  。  在  Windows  安全  模式  下  ，  这些  病毒  不  会  在  启动  时  被  激活  。  
3  、  系统  文件  病毒  
杀  此类  病毒  一定  要  在  干净  的  DOS  环境  下  进行  ，  甚至  还  需要  动用  几  种  杀毒  软件  交叉  、  反复  查  杀  才能  彻底  清除  。  
4  、  网络  病毒  
此类  病毒  现在  层出不穷  ，  很  容易  反复  感染  ，  因此  不但  需要  干净  的  杀毒  环境  ，  还  必须  在  断开  网络  的  情况  下  进行  查  杀  。  
你  可能  不  知道  的  Photoshop  技巧  50  条  
1.  快速  打开  文件  
双击  Photoshop  的  背景  空白处  (  默认  为  灰色  显示  区域  )  即可  打开  选择  文件  的  浏览  窗口  。  
2.  随意  更换  画布  颜色  
选择  油漆  桶  工具  并  按住  Shift  点击  画布  边缘  ，  即可  设置  画布  底色  为  当前  选择  的  前景  色  。  如果  要  还原  到  默认  的  颜色  ，  设置  前景  色  为  25%  灰度  (  R192  ，  G192  ，  B192  )  再次  按住  Shift  点击  画布  边缘  。  
3.  选择  工具  的  快捷键  
可以  通过  按  快捷键  来  快速  选择  工具箱  中  的  某  一  工具  ，  各个  工具  的  字母  快捷键  如下  ：  
选框  -M  移动  -V  套索  -L  魔棒  -W  
喷枪  -J  画笔  -B  铅笔  -N  橡皮  图章  -S  
历史  记录  画笔  -Y  橡皮擦  -E  模糊  -R  减  淡  -O  
钢笔  -P  文字  -T  度量  -U  渐变  -G  
油漆  桶  -K  吸管  -I  抓手  -H  缩放  -Z  
默认  前景  和  背景  色  -D  切换  前景  和  背景  色  -X  
编辑  模式  切换  -Q  显示  模式  切换  -F  
另外  ，  如果  我们  按住  Alt  键  后  再  单击  显示  的  工具  图标  ，  或者  按住  Shift  键  并  重复  按  字母  快捷键  则  可以  循环  选择  隐藏  的  工具  。  
4.  获得  精确  光标  
按  Caps  Lock  键  可以  使  画笔  和  磁性  工具  的  光标  显示  为  精确  十字线  ，  再  按  一  次  可  恢复  原状  。  
5.  显示  /  隐藏  控制板  
按  Tab  键  可  切换  显示  或  隐藏  所有  的  控制板  (  包括  工具箱  )  ，  如果  按  X  则  工具箱  不  受  影响  ，  只  显示  或  隐藏  其他  的  控制板  。  
6.  快速  恢复  默认值  
有些  不  擅长  Photoshop  的  朋友  为了  调整  出  满意  的  效果  真  是  几经周折  ，  结果  发现  还是  原来  的  默认  效果  最好  ，  这  下  傻  了  眼  ，  后悔  不  该  当初  呀  ！  怎么  恢复  到  默认值  呀  ？  试  着  轻轻  点按  选项  栏  上  的  工具  图标  ，  然后  从  上下文  菜单  中  选取  “  复位  工具  ”  或者  “  复位  所有  工具  ”  。  
7.  自由  控制  大小  
缩放  工具  的  快捷键  为  “  Z  ”  ，  此外  “  Ctrl  ＋  空格键  ”  为  放大  工具  ，  “  Alt  ＋  空格键  ”  为  缩小  工具  ，  但是  要  配合  鼠标  点击  才  可以  缩放  ；  相同  按  X  “  +  ”  键  以及  “  －  ”  键  分别  也  可  为  放大  和  缩小  图像  ；  X  “  +  ”  和  X  “  －  ”  可以  自动  调整  窗口  以  满  屏  缩放  显示  ，  使用  此  工具  你  就  可以  无论  图片  以  多少  百分比  来  显示  的  情况  下  都  能  全  屏  浏览  ！  如果  想  要  在  使用  缩放  工具  时  按  图片  的  大小  自动  调整  窗口  ，  可以  在  缩放  工具  的  属性  条  中  点击  “  满  画布  显示  ”  选项  。  
8.  使用  非  Hand  Tool  (  手形  工具  )  时  ，  按住  空格键  后  可  转换  成  手形  工具  ，  即可  移动  视窗  内  图像  的  可见  范围  。  在  手形  工具  上  双击  鼠标  可以  使  图像  以  最  适合  的  窗口  大小  显示  ，  在  缩放  工具  上  双击  鼠标  可  使  图像  以  1:1  的  比例  显示  。  
9.  在  使用  Erase  Tool  (  橡皮擦  工具  )  时  ，  按住  Alt  键  即可  将  橡皮擦  功能  切换  成  恢复  到  指定  的  步骤  记录  状态  。  
10.  使用  Smudge  Tool  (  指尖  工具  )  时  ，  按住  Alt  键  可  由  纯粹  涂抹  变成  用  前景  色  涂抹  。  
11.  要  移动  使用  Type  Mask  Tool  (  文字  蒙版  工具  )  打出  的  字形  选取  范围  时  ，  可  先  切换  成  快速  蒙版  模式  （  用  快捷键  Q  切换  ）  ，  然后  再  进行  移动  ，  完成  后  只要  再  切换  回  标准  模式  即可  。  
12.  按住  Alt  键  后  ，  使用  Rubber  Stamp  Tool  (  橡皮  图章  工具  )  在  任意  打开  的  图像  视窗  内  单击  鼠标  ，  即可  在  该  视窗  内  设定  取样  位置  ，  但  不  会  改变  作用  视窗  。  
13.  在  使用  Move  Tool  (  移动  工具  )  时  ，  可  按  键盘  上  的  方向  键  直接  以  1  pixel  的  距离  移动  图层  上  的  图像  ，  如果  先  按住  Shift  键  后  再  按  方向  键  则  以  每次  10  pixel  的  距离  移动  图像  。  而  按  Alt  键  拖动  选区  将  会  移动  选区  的  拷贝  。  
14.  使用  磁性  套索  工具  或  磁性  钢笔  工具  时  ，  按  “  [  ”  或  “  ]  ”  键  可以  实时  增加  或  减少  采样  宽度  (  选项  调板  中  )  。  
15.  度量  工具  在  测量  距离  上  十分  便利  (  特别  是  在  斜线  上  )  ，  你  同样  可以  用  它  来  量  角度  (  就  像  一  只  量角器  )  。  在  信息  面板  可  视  的  前提  下  ，  选择  度量  工具  点击  并  拖  出  一  条  直线  ，  按住  Alt  键  从  第一  条  线  的  节点  上  再  拖  出  第二  条  直线  ，  这样  两  条  线  间  的  夹角  和  线  的  长度  都  显示  在  信息  面板  上  。  用  测量  工具  拖动  可以  移动  测量线  (  也  可以  只  单独  移动  测量线  的  一个  节点  )  ，  把  测量线  拖  到  画布  以外  就  可以  把  它  删除  。  
16.  使用  绘画  工具  (  如  画笔  ，  橡皮  等  )  ，  按住  Shift  键  单击  鼠标  ，  可  将  两  次  单击点  以  直线  连接  。  
17.  按住  Alt  键  用  吸管  工具  选取  颜色  即可  定义  当前  背景  色  。  通过  结合  颜色  取样器  工具  (  X  )  和  信息  面板  监视  当前  图片  的  颜色  变化  。  变化  前后  的  颜色  值  显示  在  信息  面板  上  其  取样点  编号  的  旁边  。  通过  信息  面板  上  的  弹出  菜单  可以  定义  取样点  的  色彩  模式  。  要  增加  新  取样点  只  需  在  画布  上  用  颜色  取样器  工具  随便  什么  地方  再  点  一下  ，  按住  Alt  键  点击  可以  除去  取样点  。  但  一  张  图  上  最  多  只能  放置  四  个  颜色  取样点  。  当  Photoshop  中  有  对话框  (  例如  ：  色阶  命令  、  曲线  命令  等等  )  弹出  时  ，  要  增加  新  的  取样点  必须  按住  Shift  键  再  点击  ，  按住  X  点击  可以  减去  一个  取样点  。  
18.  裁切  工具  大家  都  一定  用  过  ，  这种  情况  你  也  一定  遇到  过  ；  在  你  调整  裁切框  、  而  裁切框  又  比较  接近  图像  边界  的  时候  ，  裁切框  会  自动  地  贴  到  图像  的  边上  ，  令  你  无法  精确  的  裁切  图像  。  不过  只要  在  调整  裁切  边框  的  时候  按  下  “  Ctrl  ”  键  ，  那么  裁切框  就  会  服服帖帖  ，  让  你  精确  裁切  。  
复制  技巧  
19.  按住 X  键  拖动  鼠标  可以  复制  当前  层  或  选区  内容  。  
20.  如果  你  最近  拷贝  了  一  张  图片  存在  剪贴板  里  ，  Photoshop  在  新建  文件  (  X )  的  时候  会  以  剪贴板  中  图片  的  尺寸  作为  新建图  的  默认  大小  。  要  略过  这个  特性  而  使用  上  一  次  的  设置  ，  在  打开  的  时候  按住  Alt  键  (  X  )  。  
21.  如果  创作  一  幅  新  作品  ，  需要  与  一  幅  已  打开  的  图片  有  一样  的  尺寸  、  解析度  、  格式  的  文件  。  选取  “  文件  ”  →  “  New  ”  ，  点  Photoshop  菜单栏  的  Windows  选项  ，  在  弹出  菜单  的  最  下面  一  栏  点击  已  开启  的  图片  名称  ，  是的  ，  就是  这么  简单  !  
22.  在  使用  自由  变换  工具  (  X  )  时  按住  Alt  键  (  X  )  即可  先  复制  原  图层  (  在  当前  的  选区  )  后  在  复制层  上  进行  变换  ；  X  为  再次  执行  上次  的  变换  ，  X  为  复制  原  图  后  再  执行  变换  。  
23.  使用  “  通过  复制  新建层  (  X  )  ”  或  “  通过  剪切  新建层  (  X  )  ”  命令  可以  在  一  步  之间  完成  拷贝  到  粘贴  和  剪切  到  粘贴  的  工作  ；  通过  复制  (  剪切  )  新建层  命令  粘贴  时  仍  会  放在  它们  原来  的  地方  ，  然而  通过  拷贝  (  剪切  )  再  粘贴  ，  就  会  贴  到  图片  (  或  选区  )  的  中心  。  
24.  若  要  直接  复制  图像  而  不  希望  出现  命名  对话框  ，  可  先  按住  Alt  键  ，  再  执行  “  图像  ”  →  “  副本  ”  命令  。  
25.  Photoshop  的  剪贴板  很  好用  ，  但  你  更  希望  直接  使用  Windows  系统  剪贴板  ，  直接  处理  从  屏幕  上  截取  的  图像  。  好  的  ，  按  下  X  ，  在  弹出  的  面板  上  将  “  输出  到  剪贴板  ”  点中  吧  ！  
26.  在  Photoshop  内  实现  有  规律  复制  
在  做  版面  设计  的  时候  我们  会  经常  把  某些  元素  有  规律  地  摆放  以  寻求  一  种  形式  的  美感  ，  在  Photoshop  内  通过  四  个  快捷键  的  组合  就  可以  轻易  得出  。  
(  1  )  圈选  出  你  要  复制  的  物体  ；  
(  2  )  按  X  产生  一个  浮动  Layer  ；  
(  3  )  按  旋转  并  移动  到  适当  位置  后  确认  ；  
(  4  )  现在  可以  按住  X  后  连续  按  “  T  ”  就  可以  有  规律  地  复制  出  连续  的  物体  。  (  只  按住  X  则  只是  有  规律  移动  )  
27.  当  我们  要  复制  文件  中  的  选择  对象  时  ，  要  使用  编辑  菜单  中  的  复制  命令  。  复制  一  次  你  也许  觉  不  出  麻烦  ，  但  要  多次  复制  ，  一  次  一  次  的  点击  就  相当  不便  了  。  这时  你  可以  先  用  选择  工具  选定  对象  ，  而后  点击  移动  工具  ，  再  按住  “  Alt  ”  键  不  放  。  当  光标  变成  一  黑  一  白  重叠  在  一起  的  两  个  箭头  时  ，  拖动  鼠标  到  所  需  位置  即可  。  若  要  多次  复制  ，  只要  重复  的  放松  鼠标  就  行  了  。  
28.  可以  用  选框  工具  或  套索  工具  ，  把  选区  从  一个  文档  拖  到  另  一个  上  。  
29.  要  为  当前  历史  状态  或  快照  建立  一个  复制  文档  可以  ：  
(  1  )  点击  “  从  当前  状态  创建  新  文档  ”  按钮  ；  
(  2  )  从  历史  面板  菜单  中  选择  新  文档  ；  
(  3  )  拖动  当前  状态  (  或  快照  )  到  “  从  当前  状态  创建  新  文档  ”  按钮  上  ；  
(  4  )  右键  点击  所  要  的  状态  (  或  快照  )  从  弹出  菜单  中  选择  新  文档  把  历史  状态  中  当前  图片  的  某  一  历史  状态  拖  到  另  一个  图片  的  窗口  可  改变  目的  图片  的  内容  。  
按住  Alt  键  点击  任  一  历史  状态  (  除了  当前  的  、  最近  的  状态  )  可以  复制  它  。  而后  被  复制  的  状态  就  变为  当前  (  最近  的  )  状态  。  按住  Alt  拖动  动作  中  的  步骤  可以  把  它  复制  到  另  一个  动作  中  。  
选择  技巧  
30.  把  选择  区域  或  层  从  一个  文档  拖  向  另  一个  时  ，  按住  Shift  键  可以  使  其  在  目的  文档  上  居中  。  如果  源  文档  和  目的  文档  的  大小  (  尺寸  )  相同  ，  被  拖动  的  元素  会  被  放置  在  与  源  文档  位置  相同  的  地方  (  而  不  是  放在  画布  的  中心  )  。  如果  目的  文档  包含  选区  ，  所  拖动  的  元素  会  被  放置  在  选区  的  中心  。  
31.  在  动作  调板  中  单击  右上角  的  三角形  按钮  ，  从  弹出  的  菜单  中  选择  载入  动作  ，  进入  PhotoshopGoodiesActions  目录  下  ，  其  下  有  按钮  、  规格  、  命令  、  图像  效果  ，  文字  效果  、  纹理  、  帧  六  个  动作  集  ，  包含  了  很多  实用  的  东西  哟  !  另外  ，  在  该  目录  下  还有  一个  ACTIONS.PDF  文件  ，  可  用  Adobe  Acrobat  软件  打开  ，  里面  详细  介绍  了  这些  动作  的  使用  方法  和  产生  的  效果  。  
32.  单击  工具  条  中  的  画笔  类  工具  ，  在  随后  显示  的  属性  条  中  单击  画笔  标签  右边  的  小  三角  ，  在  弹出  的  菜单  中  再  点击  小  箭头  选择  “  载入  画笔  …  ”  。  到  Photoshop  目录  的  Brushes  文件夹  中  选择  X  。  原来  这里  还有  这么  多  可爱  的  东西  。  
33.  画  出  一个  漂亮  的  标记  ，  想  在  作品  中  重复  使用  ？  好  办  ，  用  套索  工具  选  好  它  ，  在  Brushes  的  弹出  菜单  中  选  “  储存  画笔  …  ”  ，  然后  用  画笔  工具  选中  这个  新  笔头  …  …  朋友  ，  想  做  居室  喷涂  吗  ?  
34.  如果  想  选择  两  个  选择  区域  之间  的  部分  ，  在  已  有  的  任意  一个  选择  区域  的  旁边  同时  按住  Shift  和  Alt  键  进行  拖动  ，  画  第二  个  选择  区域  (  鼠标  十字  形  旁  出现  一个  乘号  ，  表示  重合  的  该  区域  将  被  保留  )  。  
35.  在  选择  区域  中  删除  正方形  或  圆形  ，  首先  增加  任意  一个  选择  区域  ，  然后  在  该  选择  区域  内  ，  按  Alt  键  拖动  矩形  或  椭圆  的  面罩  工具  。  然后  松开  Alt  键  ，  按住  Shift  键  ，  拖动  到  你  满意  为止  。  然后  先  松开  鼠标  按钮  再  松开  Shift  键  。  
36.  从  中心  向  外  删除  一个  选择  区域  ，  在  任意  一个  选择  区域  内  ，  先  按  Alt  键  拖动  矩形  或  椭圆  的  面罩  工具  ，  然后  松开  Alt  键  后  再  一  次  按住  Alt  键  ，  最后  松开  鼠标  按钮  再  松开  Alt  键  。  
37.  在  快速  蒙版  模式  下  要  迅速  切换  蒙版  区域  或  选取  区域  选项  时  ，  先  按住  Alt  键  后  将  光标  移  到  快速  遮色片  模式  图标  上  单击  鼠标  就  可以  了  。  
38.  使用  选框  工具  的  时候  ，  按住  Shift  键  可以  划  出  正方形  和  正  圆  的  选区  ；  按住  Alt  键  将  从  起始  点  为  中心  勾划  选区  。  
39.  使用  “  重新  选择  ”  命令  (  X  )  来  载入  /  恢复  之前  的  选区  。  
40.  在  使用  套索  工具  勾画  选区  的  时候  按  Alt  键  可以  在  套索  工具  和  多边形  套索  工具  间  切换  。  勾画  选区  的  时候  按住  空格键  可以  移动  正在  勾画  的  选区  。  
41.  按住  Ctrl  键  点击  层  的  图标  (  在  层  面板  上  )  可  载入  它  的  透明  通道  ，  再  按住  X  键  点击  另  一  层  为  选取  两  个  层  的  透明  通道  相交  的  区域  。  
42.  在  缩放  或  复制  图片  之间  先  切换  到  快速  蒙板  模式  [  Q  ]  可  保留  原来  的  选区  。  
43.  “  选择框  ”  工具  中  Shift  和  Alt  键  的  使用  方法  ：  
当  用  “  选择框  ”  选取  图片  时  ，  想  扩大  选择区  ，  这时  按住  Shift  键  ，  光标  “  +  ”  会  变成  “  十  +  ”  ，  拖动  光标  ，  这样  就  可以  在  原来  选取  的  基础  上  扩大  你  所  需  的  选择  区域  。  或是  在  同一  幅  图片  中  同时  选取  两  个  或  两  个  以上  的  选取框  。  
当  用  “  选择框  ”  选取  图片  时  ，  想  在  “  选择框  ”  中  减去  多余  的  图片  ，  这时  按住  “  Alt  ”  键  ，  光标  “  +  ”  会  变成  “  十  -  ”  ，  拖动  光标  ，  这样  就  可以  留下  你  所  需要  的  图片  。  
当  用  “  选择框  ”  选取  图片  时  ，  想  得到  两  个  选取框  叠加  的  部分  ，  这时  按住  “  X  ”  键  ，  光标  “  +  ”  会  变成  “  十  í  ”  ，  拖动  光标  ，  这样  就是  你  想  要  的  部分  。  
想  得到  “  选取框  ”  中  的  正  圆  或  正方形  时  ，  按住  “  Shift  ”  键  ，  就  可以  。  
44.  “  套索  ”  工具  中  Shift  和  Alt  键  的  使用  方法  ：  
增加  选取  范围  按  “  Shift  ”  键  。  (  方法  和  “  选择框  ”  中  的  1  相同  )  
减少  选取  范围  按  “  Alt  ”  键  。  (  方法  和  “  选择框  ”  中  的  2  相同  )  
两  个  选取框  叠加  的  区域  按  “  X  ”  键  。  (  方法  和  “  选择框  ”  中  的  3  相同  )  
45.  “  魔杖  ”  工具  中  Shift  和  Alt  键  的  使用  方法  ：  
增加  选取  范围  按  “  Shift  ”  键  。  (  方法  和  “  选择框  ”  中  的  1  相同  )  
减少  选取  范围  按  “  Alt  ”  键  。  (  方法  和  “  选择框  ”  中  的  2  相同  )  
两  个  选取框  叠加  的  区域  按  “  X  ”  键  。  (  方法  和  “  选择框  ”  中  的  3  相同  )  
快捷键  技巧  
46.  你  可以  用  以下  的  快捷键  来  快速  浏览  你  的  图像  ：  
Home  卷动  至  图像  的  左上角  ；  End  卷动  至  图像  的  右下角  ；  Page  UP  卷动  至  图像  的  上方  ；  Page  Down  卷动  至  图像  的  下方  ；  X  Up  卷动  至  图像  的  左方  ；  X  Down  卷动  至  图像  的  右方  。  
47.  按  Ctrl  键  +  Alt  键  +  0  键  即可  使  图像  按  1:1  比例  显示  。  
48.  当  你  想  “  紧排  ”  (  调整  个别  字母  之间  的  空位  )  ，  首先  在  两  个  字母  之间  单击  ，  然后  按  下  Alt  键  后  用  左右  方向  键  调整  。  
49.  将  对话框  内  的  设定  恢复  为  默认  ，  先  按住  Alt  键  后  ，  Cancel  键  会  变成  Reset  键  ，  再  单击  Reset  键  即可  。  
50.  要  快速  改变  在  对话框  中  显示  的  数值  ，  首先  用  鼠标  点击  那个  数字  ，  让  光标  处在  对话框  中  ，  然后  就  可以  用  上下  方向  键  来  改变  该  数值  了  。  如果  在  用  方向  键  改变  数值  前  先  按  下  Shift  键  ，  那么  数值  的  改变  速度  会  加快  。  
木马  的  常见  四  大  伪装  欺骗  行为  
1  、  将  木马  包装  为  图像  文件  
首先  ，  黑客  最  常  使用  骗  别人  执行  木马  的  方法  ，  就是  将  特洛伊  木马  说  成  图像  文件  ，  比如  说是  照片  等  ，  应该  说  这  是  一个  最  不  合  逻辑  的  方法  ，  但  却  是  最  多  人  中招  的  方法  ，  有效  而  又  实用  。  
只要  入侵者  扮成  美眉  及  更改  服务器  程序  的  文件名  (  例如  sam.exe  )  为  “  类似  ”  图像  文件  的  名称  ，  再  假装  传送  照片  给  受害者  ，  受害者  就  会  立刻  执行  它  。  为什么  说  这  是  一个  不  合  逻辑  的  方法  呢  ？  图像  文件  的  扩展名  根本  就  不  可能  是  exe  ，  而  木马  程序  的  扩展名  基本上  又  必定  是  exe  ，  明眼人  一  看  就  会  知道  有  问题  ，  多数  人  在  接收  时  一  看见  是  exe  文件  ，  便  不  会  接收  了  ，  那  有  什么  方法  呢  ？  其实  方法  很  简单  ，  他  只要  把  文件名  改变  ，  例如  把  “  sam.exe  ”  更改  为  “  sam.jpg  ”  ，  那么  在  传送  时  ，  对方  只  会  看见  sam.jpg  了  ，  而  到达  对方  电脑  时  ，  因为  windows  默认值  是  不  显示  扩展名  的  ，  所以  很多  人  都  不  会  注意  到  扩展名  这个  问题  ，  而  恰好  你  的  计算机  又  是  设定  为  隐藏  扩展名  的话  ，  那么  你  看到  的  只是  sam.jpg  了  ，  受骗  也  就  在所难免  了  ！  
还有  一个  问题  就是  ，  木马  本身  是  没有  图标  的  ，  而  在  电脑  中  它  会  显示  一个  windows  预设  的  图标  ，  别人  一  看  便  会  知道  了  ！  但  入侵者  还是  有  办法  的  ，  这  就是  给  文件  换  个  “  马甲  ”  ，  即  用  IconForge  等  图标  文件  修改  文件  图标  ，  这样  木马  就  被  包装  成  jpg  或  其他  图片  格式  的  木马  了  ，  很多  人  会  不经意  间  执行  了  它  。  
2  、  以  Z-file  伪装  加密  程序  
Z-file  伪装  加密  软件  经过  将  文件  压缩  加密  之后  ，  再  以  bmp  图像  文件  格式  显示  出来  (  扩展名  是  bmp  ，  执行  后  是  一  幅  普通  的  图像  )  。  当初  设计  这个  软件  的  本意  只是  用来  加密  数据  ，  用以  就算  计算机  被  入侵  或  被  非法  使用  时  ，  也  不  容易  泄漏  你  的  机密  数据  所在  。  不过  如果  到  了  黑客  手中  ，  却  可以  变成  一个  入侵  他人  的  帮凶  。  使用者  会  将  木马  程序  和  小  游戏  合并  ，  再  用  Z-file  加密  及  将  此  “  混合体  ”  发给  受害者  ，  由于  看上去  是  图像  文件  ，  受害者  往往  都  不以为然  ，  打开  后  又  只是  一般  的  图片  ，  最  可怕  的  地方  还  在于  就  连  杀毒  软件  也  检测  不  出  它  内  藏  特洛伊  木马  和  病毒  。  当  打消  了  受害者  警惕性  后  ，  再  让  他  用  WinZip  解  压缩  及  执行  “  伪装体  (  比方  说  还有  一  份  小  礼物  要  送给  他  )  ，  这样  就  可以  成功  地  安装  了  木马  程序  。  如果  入侵者  有  机会  能  使用  受害者  的  电脑  (  比如  上门  维修  电脑  )  ，  只要  事先  已经  发出  了  “  混合体  ”  ，  则  可以  直接  用  Winzip  对  其  进行  解压  及  安装  。  由于  上门  维修  是  赤  着  手  使用  其  电脑  ，  受害者  根本  不  会  怀疑  有  什么  植入  他  的  计算机  中  ，  而且  时间  并  不  长  ，  30秒  时间  已经  足够  。  就  算是  “  明晃晃  ”  地  在  受害者  面前  操作  ，  他  也  不见得  会  看出  这  一  双  黑手  正在  干什么  。  特别  值得一提  的  是  ，  由于  “  混合体  ”  可以  躲  过  反  病毒  程序  的  检测  ，  如果  其中  内  含  的  是  一触即发  的  病毒  ，  那么  一经  解开  压缩  ，  后果  将  是  不堪设想  。  
3  、  合并  程序  欺骗  
通常  有  经验  的  用户  ，  是  不  会  将  图像  文件  和  可  执行  文件  混淆  的  ，  所以  很多  入侵者  一不做二不休  ，  干脆  将  木马  程序  说  成  是  应用  程序  ：  反正  都  是  以  exe  作为  扩展名  的  。  然后  再  变  着  花样  欺骗  受害者  ，  例如  说  成  是  新  出炉  的  游戏  ，  无所不能  的  黑客  程序  等等  ，  目地  是  让  受害者  立刻  执行  它  。  而  木马  程序  执行  后  一般  是  没有  任何  反应  的  ，  于是  在  悄无声息  中  ，  很多  受害者  便  以为  是  传送  时  文件  损坏  了  而  不再  理会  它  。  
如果  有  更  小心  的  用户  ，  上面  的  方法  有  可能  会  使  他们  产生  怀疑  ，  所以  就  衍生  了  一些  合并  程序  。  合并  程序  是  可以  将  两  个  或  以上  的  可  执行  文件  (  exe  文件  )  结合  为  一个  文件  ，  以后  一旦  执行  这个  合并  文件  ，  两  个  可  执行  文件  就  会  同时  执行  。  如果  入侵者  将  一个  正常  的  可  执行  文件  (  一些  小  游戏  如  wrap.exe  )  和  一个  木马  程序  合并  ，  由于  执行  合并  文件  时  wrap.exe  会  正常  执行  ，  受害者  在  不  知情  中  ，  背地里  木马  程序  也  同时  执行  了  。  而  这  其中  最  常  用到  的  软件  就是  joiner  ，  由于  它  具有  更  大  的  欺骗性  ，  使得  安装  特洛伊  木马  的  一举一动  了  无  痕迹  ，  是  一  件  相当  危险  的  黑客  工具  。  
以往  有  不少  可以  把  两  个  程序  合并  的  软件  为  黑客  所  使用  ，  但  其中  大多  都  已  被  各  大  防毒  软件  列  作  病毒  了  ，  而且  它们  有  两  个  突出  的  问题  存在  ，  这  问题  就是  ：  合并  后  的  文件  体积  过  大  ，  只能  合并  两  个  执行  文件  。  
正  因为  如此  ，  黑客  们  纷纷  弃  之  转而  使用  一个  更  简单  而  功能  更  强  的  软件  ，  那  就是  Joiner  ，  这个  软件  可以  把  图像  文件  、  音频  文件  与  可  执行  文件  合并  ，  还  能  减小  合并  后  文件  体积  ，  而且  可以  待  使用者  执行  后  立即  收到  信息  ，  告诉  你  对方  已  中招  及  对方  的  IP  。  大家  应该  提高  警惕  。  
4  、  伪装  成  应用  程序  扩展  组件  
这  一  类  属于  最  难  识别  的  特洛伊  木马  。  黑客  们  通常  将  木马  程序  写  成  任何  类型  的  文件  (  例如  dll  、  ocx  等  )  然后  挂  在  一个  十分  出名  的  软件  中  ，  让  人  不  去  怀疑  安装  文件  的  安全性  ，  更  不  会  有人  检查  它  的  文件  是否  多  了  。  而  当  受害者  打开  软件  时  ，  这个  有  问题  的  文件  即  会  同时  执行  。  这种  方式  相比  起  用  合并  程序  有  一个  更  大  的  好处  ，  那  就是  不用  更改  被入侵者  的  登录  文件  ，  以后  每当  其  打开  软件  时  木马  程序  都  会  同步  运行  。  
当  您  遇到  以上  四  种  情况  时  请  小心  为  妙  ，  说不定  无意  之中  您  已经  中招  了  ！  ！  
万兆  交换机  结构  看  最新  以太网  技术  
万兆  交换机  的  出现  彻底  实现  了  私有  网络  到  大众  网络  的  融合  ，  并且  其  能够  提供  在  一  秒钟  超过  一千  个  G  的  吞吐量  ，  这  是  传统  的  交换机  所  不能  做到  的  。  作为  兼容  于  以往  的  最新  以太网  技术  ，  万兆  以太网  不仅仅  是  以太网  的  “  高速  翻版  ”  ，  万兆  以太网  第一  次  提出  了  万兆  广域  以太网  技术  ，  第一  次  实现  了  私有  网络  到  公众  网络  的  融合  。  
同样  ，  作为  网络  的  核心  设备  ，  万兆  以太网  交换机  也  不仅仅  是  在  已  有  的  千兆  以太网  交换机  上  支持  万兆  的  接入  模块  ，  它  需要  新  一代  的  系统  设计  ，  包括  从  交换机  体系  结构  、  二  /  三  层  技术  的  更新  ，  到  下一代  IPv6  的  缺省  支持  和  有效  的  带宽  管理  。  
近年来  ，  从  局域网  到  城域网  ，  从  城域网  到  广域网  ，  以太网  技术  以  惊人  的  速度  正  占据  着  越来越  多  的  市场  ，  尤其  在  企业  网络  和  运营商  网络  中  ，  以太网  技术  越来越  多  地  成为  毫无  争议  的  选择  。  从  快速  以太网  到  千兆  以太网  ，  再  到  万兆  以太网  ，  技术  上  的  更新  满足  了  新  一代  互联网  技术  所  带来  的  高速  带宽  增长  和  新  一代  应用  的  需求  。  以下  我们  来  看  一下  万兆  以太网  交换机  中  的  新  一代  技术  。  
分布式  的  交换  体系  
用户  投资  购买  万兆  以太网  交换机  ，  是  因为  需要  能够  在  任何  情况  下  线速  处理  数据包  的  转发  ，  需要  能够  处理  新  一代  的  互联网  应用  ，  如  组播  应用  、  流媒体  应用  、  IP  语音  、  下一代  互联网  IPv6  应用  ;  同时  也  需要  交换机  能够  提供  最好  的  投资  保护  、  能够  占用  最少  的  机架  空间  、  能够  尽量  地  节省  电量  、  能够  看得见  用户  的  流量  等  。  
显然  ，  千兆  交换机  不能  容纳  大  容量  万兆  端口  的  线速  转发  ，  目前  的  千兆  交换机  只  能够  提供  几十  到  几百  个  G  的  吞吐量  ，  而  新  一代  的  万兆  交换机  能够  提供  每  秒  处理  一千  个  G  以上  的  吞吐  。  由于  如此  大  的  数据  吞吐  用  最高  的  CPU  也  不能  实现  线速  转发  ，  所以  我们  需要  专用  的  网络  集成电路  芯片  (  ASIC  )  ，  同时  需要  将  数据  转发  的  任务  分布  到  各个  模块  上  实现  。  分布式  系统  有  不同  的  实现  方式  ，  一  种  是  在  传统  的  交换机  技术  上  将  常用  的  任务  转移  到  本地  模块  上  实现  ，  它  可以  利用  本地  的  交换  矩阵  ，  也  可以  利用  整个  交换机  的  交换  矩阵  ，  但是  这样  的  做法  显然  不  是  最佳  的  ;  另  一  种  做法  是  彻底  地  将  所有  数据  转发  的  任务  分布  到  各个  模块  并  利用  本地  的  大  容量  交换  矩阵  实现  。  所以  说  ，  大  容量  的  分布式  交换  结构  最为  有效  ，  万兆  交换机  不仅  应该  提供  大  容量  的  背板  交换  矩阵  ，  还  应该  提供  大  容量  的  本地  交换  矩阵  ，  无  阻塞  的  并行  交换  矩阵  是  目前  最为  先进  的  技术  。  
ASIC  与  FPGA  芯片  
同时  ，  ASIC  提供  的  是  在  转发  数据  时  利用  专用  芯片  而  不  是  由  CPU  来  处理  。  ASIC  的  衡量  标准  就是  尽可能  在  芯片级  上  处理  所有  的  流量  转发  ，  但是  问题  在于  ASIC  一旦  设计  之后  交换机  就  不能  进行  修改  。  所以  我们  会  选择  处理  尽可能  多  的  数据  转发  设计  产品  ，  我们  会  考虑  到  IPv4  的  数据包  交换  和  路由  、  IP  组播  的  数据包  ，  是否  能够  实现  芯片级  的  数据  分流  和  服务  质量  保证  (  QoS  )  ，  是否  能够  实现  芯片级  的  数据  限速  ，  数据  限速  是否  可以  实现  多种  方式  以及  采用  信用制  而  非  门票制  的  方式  ，  是否  可以  实现  策略  路由  ，  是否  可以  实现  访问  列表  控制  (  ACL  )  ，  是否  可以  实现  新  一代  IPv6  的  交换  和  路由  ，  甚至  是否  可以  芯片级  采集  数据  流量  等  一  系列  问题  。  优秀  的  ASIC  设计  体现  了  交换机  设计  的  最高  技术  。  
但是  ，  有  了  分布式  的  交换  体系  和  优异  的  ASIC  技术  还  远远  不够  ，  由于  ASIC  的  技术  一旦  实现  则  不能  更改  ，  那么  新  的  技术  标准  、  新  的  应用  模式  将  完全  利用  CPU  来  处理  ，  而  这样  往往  给  用户  带来  性能  上  的  损失  和  业务  上  的  痛苦  。  解决  的  办法  可以  是  购买  新  一代  ASIC  设计  的  模块  ，  但是  硬件  升级  可能  带来  的  是  昂贵  的  追加  投资  。  最新  的  万兆  交换机  会  利用  现场  可  编程  门阵列  芯片  (  FPGA  )  来  解决  这  一  缺陷  ，  将  新  的  标准  通过  软件  升级  由  硬件  处理  ，  提供  了  用户  投资  的  最好  保护  。  
解决  冲突  
这样  一来  ，  似乎  所有  的  问题  都  解决  了  ，  其实不然  。  由于  交换机  的  各个  模块  之间  以及  它们  与  中央  管理  模块  之间  是  一个  有机  的  整体  ，  Internet  路由  信息  的  分发  、  维护  需要  各个  模块  的  参与  ，  并且  总  会  存在  这样  的  问题  :  由于  本地  硬件  芯片  寻址  不  到  而  需要  中央  管理  模块  的  参与  ，  所以  交换机  的  性能  会  有所  损失  。  
最新  的  万兆  交换机  是  如何  解决  这  一  问题  的  ?  主要  是  通过  两  个  途径  ：  一  是  将  控制  通道  和  数据  转发  通道  进行  分离  ，  二  是  在  各个  接口  模块  上  使用  高性能  的  CPU  参与  。  控制  通道  和  数据  转发  通道  的  分离  就是  在  交换机  上  实现  两  个  不同  的  并行  交叉  矩阵  。  这样  ，  我们  所  说  的  背板  容量  将  完全  用于  数据  通道  的  使用  ，  同时  也  保障  了  万兆  交换机  硬件  的  安全性  ，  而  本地  高性能  的  CPU  参与  使得  中央  管理  模块  永远  不  会  处理  涉及  各个  接口  数据  的  转发  ，  实现  真正  意义  上  的  分布式  体系  结构  。  当然  ，  万兆  以太网  的  体系  结构  还有  很多  因素  参与  ，  比如  大  容量  的  SDRAM  和  TCAM  (  能够  在  一  秒钟  实现  10亿  次  以上  搜索  )  ，  比如  本地  路由  方式  是否  采用  基于  拓扑  结构  驱动  。  
更  重要  的  是  ，  万兆  交换机  的  软件  是否  采用  多  线程  方式  ，  软件  是否  提供  最新  一代  的  二  /  三  层  技术  标准  。  这些  二  /  三  层  技术  包含  了  新  一代  网络  的  最新  需求  ，  比如  基于  万兆  以太网  端口  的  链路  捆绑  ，  是否  提供  快速  链路  冗余  的  各种  技术  、  是否  提供  从  端口  安全性  到  各种  用户  认证  的  安全  技术  、  是否  提供  完整  的  IPv4  和  IPv6  的  各项  规范  、  是否  提供  快速  BGP  路由  技术  、  是否  提供  冗余  路由  协议  、  是否  提供  各项  二  /  三  层  安全  特性  、  是否  提供  交换机  的  防  攻击  特性  、  是否  提供  交换机  本身  CPU  智能  保护  、  是否  所有  这些  特性  都  由  硬件  实现  等  。  
完整  的  IPv6  规范  
IPv6  提供  了  各种  设备  上网  而  非  仅仅  是  PC  和  服务器  ，  同时  克服  了  目前  IPv4  的  一些  缺陷  ，  万兆  以太网  加上  IPv6  的  组合  ，  是  构建  未来  高  性能  新  一代  网络  的  必由之路  。  通常  IPv6  有  三  种  实现  方法  :  在  目前  的  交换机  上  用  软件  方式  实现  ;  或者  采用  新  的  硬件  模块  ，  插入  现有  的  系统  之中  ，  从而  增强  IPv4  /  IPv6  的  转发  性能  ;  或者  是  全新  设计  的  IPv6  万兆  交换机  。  
安全  与  流量  管理  
安全性  和  网络  流量  管理  是  目前  用户  最为  关注  的  重点  。  作为  骨干  设备  ，  不仅仅  需要  考虑  设备  本身  的  安全  防范  ，  同时  还要  提供  用户  的  防范  ，  就是说  既  要  本身  免疫  能力  强  ，  又  要  提供  强有力  的  阻击  手段  来  保护  网络  的  用户  ，  并且  所有  的  防范  都  应该  是  基于  硬件  来  实现  。  但是  所有  的  安全  防范  都  是  基于  我们  已知  的  攻击  手段  和  安全  漏洞  上  ，  如果  我们  不能  监控  整个  网络  ，  安全性  就  不  会  是  完整  特性  。  
考虑  到  万兆  交换  和  路由  的  高速  转发  ，  以往  通过  CPU  采集  流量  的  方法  将  不  可行  ，  而  融入  ASIC  之中  的  分布式  流量  采集  系统  带来  了  万兆  交换机  的  一个  创新  。  sFlow  是  目前  较为  先进  的  流量  管理  规范  ，  它  既  能  提供  IPv4  的  数据  ，  也  能  提供  IPv6  的  数据  。  如果  我们  能  在  不  影响  性能  的  前提  下  提供  所有  设备  的  所有  流量  ，  那么  就  可以  非常  容易  地  观察  网络  的  流量  ，  可以  是  某  一个  端口  下  一个  特定  用户  的  活动  ，  也  可以  是  当前  网络  上  的  异常  流量  。  分布式  的  流量  监控  系统  好比  是  黑夜  里  的  道路  监控  系统  ，  难以  想象  一  台  核心  的  骨干  设备  缺乏  这样  的  流量  管理  系统  将  会  出现  什么样  的  后果  。  
测试  
衡量  一  台  万兆  交换机  ，  首先  是  测试  它  是否  能够  达到  线速  转发  的  吞吐量  ，  同时  观察  端  到  端  的  传输  延迟  ，  一  台  优秀  的  万兆  交换机  应该  能够  在  加载  关键  应用  的  前提  下  (  如  组播  应用  、  IPv6  应用  、  大  容量  访问  列表  控制  )  ，  线速  无  阻塞  地  转发  数据包  ，  并且  保证  端  到  端  的  数据  延迟  尽可能  地  小  。  其次  ，  衡量  万兆  交换机  还  需  通过  测试  关键  协议  ，  如  BGP4  的  容量  、  路由  收敛  和  路由  震荡  来  检验  ，  测试  针对  攻击  的  防范  特性  、  测试  流量  管理  的  关键  特性  。  冗余性  的  测试  也  非常  重要  ，  冗余性  包含  硬件  系统  的  冗余性  和  软件  特性  的  冗余性  。  可以  说  ，  选择  万兆  以太网  交换机  不仅仅  是  几  个  单项  功能  的  选择  ，  更是  一  项  全面  评估  的  系统  选择  。  
鲜为人知  的  技巧  Excel  会计  应  学  35  招  秘技  
也许  你  已经  在  Excel  中  完成  过  上百  张  财务  报表  ，  也许  你  已  利用  Excel  函数  实现  过  上千  次  的  复杂  运算  ，  也许  你  认为  Excel  也  不过如此  ，  甚至  了  无  新意  。  但  我们  平日  里  无数  次  重复  的  得心应手  的  使用  方法  只不过  是  Excel  全部  技巧  的  百分之一  。  本  专题  从  Excel  中  的  一些  鲜为人知  的  技巧  入手  ，  领略  一下  关于  Excel  的  别样  风情  。  
一  、  建立  分类  下拉  列表  填充项  
我们  常常  要  将  企业  的  名称  输入  到  表格  中  ，  为了  保持  名称  的  一致性  ，  利用  “  数据  有效性  ”  功能  建  了  一个  分类  下拉  列表  填充项  。  
1.  在  Sheet2  中  ，  将  企业  名称  按  类别  (  如  “  工业  企业  ”  、  “  商业  企业  ”  、  “  个体  企业  ”  等  )  分别  输入  不同  列  中  ，  建立  一个  企业  名称  数据库  。  2.  选中  A  列  (  “  工业  企业  ”  名称  所在  列  )  ，  在  “  名称  ”  栏  内  ，  输入  “  工业  企业  ”  字符  后  ，  按  “  回车  ”  键  进行  确认  。  仿照  上面  的  操作  ，  将  B  、  C  …  …  列  分别  命名  为  “  商业  企业  ”  、  “  个体  企业  ”  …  …  
3.  切换  到  Sheet1  中  ，  选中  需要  输入  “  企业  类别  ”  的  列  (  如  C  列  )  ，  执行  “  数据  →  有效性  ”  命令  ，  打开  “  数据  有效性  ”  对话框  。  在  “  设置  ”  标签  中  ，  单击  “  允许  ”  右侧  的  下拉  按钮  ，  选中  “  序列  ”  选项  ，  在  下面  的  “  来源  ”  方框  中  ，  输入  “  工业  企业  ”  ，  “  商业  企业  ”  ，  “  个体  企业  ”  …  …  序列  (  各  元素  之间  用  英文  逗号  隔  开  )  ，  确定  退出  。  再  选中  需要  输入  企业  名称  的  列  (  如  D  列  )  ，  再  打开  “  数据  有效性  ”  对话框  ，  选中  “  序列  ”  选项  后  ，  在  “  来源  ”  方框  中  输入  公式  ：  =  INDIRECT  (  C1  )  ，  确定  退出  。
4.  选中  C  列  任意  单元格  (  如  C4  )  ，  单击  右侧  下拉  按钮  ，  选择  相应  的  “  企业  类别  ”  填入  单元格  中  。  然后  选中  该  单元格  对应  的  D  列  单元格  (  如  D4  )  ，  单击  下拉  按钮  ，  即可  从  相应  类别  的  企业  名称  列表  中  选择  需要  的  企业  名称  填入  该  单元格  中  。
提示  ：  在  以后  打印  报表  时  ，  如果  不  需要  打印  “  企业  类别  ”  列  ，  可以  选中  该  列  ，  右击  鼠标  ，  选  “  隐藏  ”  选项  ，  将  该  列  隐藏  起来  即可  。  
二  、  建立  “  常用  文档  ”  新  菜单  
在  菜单栏  上  新建  一个  “  常用  文档  ”  菜单  ，  将  常用  的  工作簿  文档  添加  到  其中  ，  方便  随时  调用  。
1.  在  工具栏  空白处  右击  鼠标  ，  选  “  自定义  ”  选项  ，  打开  “  自定义  ”  对话框  。  在  “  命令  ”  标签  中  ，  选中  “  类别  ”  下  的  “  新  菜单  ”  项  ，  再  将  “  命令  ”  下面  的  “  新  菜单  ”  拖  到  菜单栏  。  按  “  更改  所  选  内容  ”  按钮  ，  在  弹出  菜单  的  “  命名  ”  框  中  输入  一个  名称  (  如  “  常用  文档  ”  )  。  
2.  再  在  “  类别  ”  下面  任选  一  项  (  如  “  插入  ”  选项  )  ，  在  右边  “  命令  ”  下面  任选  一  项  (  如  “  超链接  ”  选项  )  ，  将  它  拖  到  新  菜单  (  常用  文档  )  中  ，  并  仿照  上面  的  操作  对  它  进行  命名  (  如  “  工资  表  ”  等  )  ，  建立  第一  个  工作簿  文档  列表  名称  。  重复  上面  的  操作  ，  多  添加  几  个  文档  列表  名称  。  
3.  选中  “  常用  文档  ”  菜单  中  某个  菜单  项  (  如  “  工资  表  ”  等  )  ，  右击  鼠标  ，  在  弹出  的  快捷  菜单  中  ，  选  “  分配  超链接  →  打开  ”  选项  ，  打开  “  分配  超链接  ”  对话框  。  通过  按  “  查找  范围  ”  右侧  的  下拉  按钮  ，  定位  到  相应  的  工作簿  (  如  “  工资.xls  ”  等  )  文件夹  ，  并  选中  该  工作簿  文档  。  重复  上面  的  操作  ，  将  菜单项  和  与  它  对应  的  工作簿  文档  超链接  起来  。  
4.  以后  需要  打开  “  常用  文档  ”  菜单  中  的  某个  工作簿  文档  时  ，  只要  展开  “  常用  文档  ”  菜单  ，  单击  其中  的  相应  选项  即可  。
提示  ：  尽管  我们  将  “  超链接  ”  选项  拖  到  了  “  常用  文档  ”  菜单  中  ，  但  并  不  影响  “  插入  ”  菜单  中  “  超链接  ”  菜单  项  和  “  常用  ”  工具栏  上  的  “  插入  超链接  ”  按钮  的  功能  。